<?xml version="1.0" encoding="UTF-8" ?>
<ExternalServiceRegistration xmlns="http://soap.sforce.com/2006/04/metadata">
    <label>Slack</label>
    <namedCredential>Slack_Web_API</namedCredential>
    <operations>
        <active>false</active>
        <name>adminx5fappsx5fapprove</name>
    </operations>
    <operations>
        <active>false</active>
        <name>adminx5fappsx5fapprovedx5flist</name>
    </operations>
    <operations>
        <active>false</active>
        <name>adminx5fappsx5frequestsx5flist</name>
    </operations>
    <operations>
        <active>false</active>
        <name>adminx5fappsx5frestrict</name>
    </operations>
    <operations>
        <active>false</active>
        <name>adminx5fappsx5frestrictedx5flist</name>
    </operations>
    <operations>
        <active>false</active>
        <name>adminx5fconversationsx5farchive</name>
    </operations>
    <operations>
        <active>false</active>
        <name>adminx5fconversationsx5fconverttoprivate</name>
    </operations>
    <operations>
        <active>true</active>
        <name>adminx5fconversationsx5fcreate</name>
    </operations>
    <operations>
        <active>false</active>
        <name>adminx5fconversationsx5fdelete</name>
    </operations>
    <operations>
        <active>false</active>
        <name>adminx5fconversationsx5fdisconnectshared</name>
    </operations>
    <operations>
        <active>false</active>
        <name>adminx5fconversationsx5fekmx5flistoriginalconnectedchannelinfo</name>
    </operations>
    <operations>
        <active>false</active>
        <name>adminx5fconversationsx5fgetconversationprefs</name>
    </operations>
    <operations>
        <active>false</active>
        <name>adminx5fconversationsx5fgetteams</name>
    </operations>
    <operations>
        <active>false</active>
        <name>adminx5fconversationsx5finvite</name>
    </operations>
    <operations>
        <active>false</active>
        <name>adminx5fconversationsx5frename</name>
    </operations>
    <operations>
        <active>false</active>
        <name>adminx5fconversationsx5frestrictaccessx5faddgroup</name>
    </operations>
    <operations>
        <active>false</active>
        <name>adminx5fconversationsx5frestrictaccessx5flistgroups</name>
    </operations>
    <operations>
        <active>false</active>
        <name>adminx5fconversationsx5frestrictaccessx5fremovegroup</name>
    </operations>
    <operations>
        <active>false</active>
        <name>adminx5fconversationsx5fsearch</name>
    </operations>
    <operations>
        <active>false</active>
        <name>adminx5fconversationsx5fsetconversationprefs</name>
    </operations>
    <operations>
        <active>false</active>
        <name>adminx5fconversationsx5fsetteams</name>
    </operations>
    <operations>
        <active>false</active>
        <name>adminx5fconversationsx5funarchive</name>
    </operations>
    <operations>
        <active>false</active>
        <name>adminx5femojix5fadd</name>
    </operations>
    <operations>
        <active>false</active>
        <name>adminx5femojix5faddalias</name>
    </operations>
    <operations>
        <active>false</active>
        <name>adminx5femojix5flist</name>
    </operations>
    <operations>
        <active>false</active>
        <name>adminx5femojix5fremove</name>
    </operations>
    <operations>
        <active>false</active>
        <name>adminx5femojix5frename</name>
    </operations>
    <operations>
        <active>false</active>
        <name>adminx5finviterequestsx5fapprove</name>
    </operations>
    <operations>
        <active>false</active>
        <name>adminx5finviterequestsx5fapprovedx5flist</name>
    </operations>
    <operations>
        <active>false</active>
        <name>adminx5finviterequestsx5fdeniedx5flist</name>
    </operations>
    <operations>
        <active>false</active>
        <name>adminx5finviterequestsx5fdeny</name>
    </operations>
    <operations>
        <active>false</active>
        <name>adminx5finviterequestsx5flist</name>
    </operations>
    <operations>
        <active>false</active>
        <name>adminx5fteamsx5fadminsx5flist</name>
    </operations>
    <operations>
        <active>false</active>
        <name>adminx5fteamsx5fcreate</name>
    </operations>
    <operations>
        <active>false</active>
        <name>adminx5fteamsx5flist</name>
    </operations>
    <operations>
        <active>false</active>
        <name>adminx5fteamsx5fownersx5flist</name>
    </operations>
    <operations>
        <active>false</active>
        <name>adminx5fteamsx5fsettingsx5finfo</name>
    </operations>
    <operations>
        <active>false</active>
        <name>adminx5fteamsx5fsettingsx5fsetdefaultchannels</name>
    </operations>
    <operations>
        <active>false</active>
        <name>adminx5fteamsx5fsettingsx5fsetdescription</name>
    </operations>
    <operations>
        <active>false</active>
        <name>adminx5fteamsx5fsettingsx5fsetdiscoverability</name>
    </operations>
    <operations>
        <active>false</active>
        <name>adminx5fteamsx5fsettingsx5fseticon</name>
    </operations>
    <operations>
        <active>false</active>
        <name>adminx5fteamsx5fsettingsx5fsetname</name>
    </operations>
    <operations>
        <active>false</active>
        <name>adminx5fusergroupsx5faddchannels</name>
    </operations>
    <operations>
        <active>false</active>
        <name>adminx5fusergroupsx5faddteams</name>
    </operations>
    <operations>
        <active>false</active>
        <name>adminx5fusergroupsx5flistchannels</name>
    </operations>
    <operations>
        <active>false</active>
        <name>adminx5fusergroupsx5fremovechannels</name>
    </operations>
    <operations>
        <active>false</active>
        <name>adminx5fusersx5fassign</name>
    </operations>
    <operations>
        <active>false</active>
        <name>adminx5fusersx5finvite</name>
    </operations>
    <operations>
        <active>false</active>
        <name>adminx5fusersx5flist</name>
    </operations>
    <operations>
        <active>false</active>
        <name>adminx5fusersx5fremove</name>
    </operations>
    <operations>
        <active>false</active>
        <name>adminx5fusersx5fsessionx5finvalidate</name>
    </operations>
    <operations>
        <active>false</active>
        <name>adminx5fusersx5fsessionx5freset</name>
    </operations>
    <operations>
        <active>false</active>
        <name>adminx5fusersx5fsetadmin</name>
    </operations>
    <operations>
        <active>false</active>
        <name>adminx5fusersx5fsetexpiration</name>
    </operations>
    <operations>
        <active>false</active>
        <name>adminx5fusersx5fsetowner</name>
    </operations>
    <operations>
        <active>false</active>
        <name>adminx5fusersx5fsetregular</name>
    </operations>
    <operations>
        <active>false</active>
        <name>apix5ftest</name>
    </operations>
    <operations>
        <active>false</active>
        <name>appsx5feventx5fauthorizationsx5flist</name>
    </operations>
    <operations>
        <active>false</active>
        <name>appsx5fpermissionsx5finfo</name>
    </operations>
    <operations>
        <active>false</active>
        <name>appsx5fpermissionsx5frequest</name>
    </operations>
    <operations>
        <active>false</active>
        <name>appsx5fpermissionsx5fresourcesx5flist</name>
    </operations>
    <operations>
        <active>false</active>
        <name>appsx5fpermissionsx5fscopesx5flist</name>
    </operations>
    <operations>
        <active>false</active>
        <name>appsx5funinstall</name>
    </operations>
    <operations>
        <active>false</active>
        <name>authx5frevoke</name>
    </operations>
    <operations>
        <active>false</active>
        <name>authx5ftest</name>
    </operations>
    <operations>
        <active>false</active>
        <name>botsx5finfo</name>
    </operations>
    <operations>
        <active>false</active>
        <name>callsx5fadd</name>
    </operations>
    <operations>
        <active>false</active>
        <name>callsx5fend</name>
    </operations>
    <operations>
        <active>false</active>
        <name>callsx5finfo</name>
    </operations>
    <operations>
        <active>false</active>
        <name>callsx5fparticipantsx5fadd</name>
    </operations>
    <operations>
        <active>false</active>
        <name>callsx5fparticipantsx5fremove</name>
    </operations>
    <operations>
        <active>false</active>
        <name>callsx5fupdate</name>
    </operations>
    <operations>
        <active>true</active>
        <name>chatx5fdelete</name>
    </operations>
    <operations>
        <active>true</active>
        <name>chatx5fdeletescheduledmessage</name>
    </operations>
    <operations>
        <active>true</active>
        <name>chatx5fgetpermalink</name>
    </operations>
    <operations>
        <active>true</active>
        <name>chatx5fmemessage</name>
    </operations>
    <operations>
        <active>true</active>
        <name>chatx5fpostephemeral</name>
    </operations>
    <operations>
        <active>true</active>
        <name>chatx5fpostmessage</name>
    </operations>
    <operations>
        <active>true</active>
        <name>chatx5fscheduledmessagesx5flist</name>
    </operations>
    <operations>
        <active>true</active>
        <name>chatx5fschedulemessage</name>
    </operations>
    <operations>
        <active>false</active>
        <name>chatx5funfurl</name>
    </operations>
    <operations>
        <active>false</active>
        <name>chatx5fupdate</name>
    </operations>
    <operations>
        <active>false</active>
        <name>conversationsx5farchive</name>
    </operations>
    <operations>
        <active>false</active>
        <name>conversationsx5fclose</name>
    </operations>
    <operations>
        <active>false</active>
        <name>conversationsx5fcreate</name>
    </operations>
    <operations>
        <active>false</active>
        <name>conversationsx5fhistory</name>
    </operations>
    <operations>
        <active>true</active>
        <name>conversationsx5finfo</name>
    </operations>
    <operations>
        <active>false</active>
        <name>conversationsx5finvite</name>
    </operations>
    <operations>
        <active>true</active>
        <name>conversationsx5fjoin</name>
    </operations>
    <operations>
        <active>false</active>
        <name>conversationsx5fkick</name>
    </operations>
    <operations>
        <active>false</active>
        <name>conversationsx5fleave</name>
    </operations>
    <operations>
        <active>false</active>
        <name>conversationsx5flist</name>
    </operations>
    <operations>
        <active>false</active>
        <name>conversationsx5fmark</name>
    </operations>
    <operations>
        <active>false</active>
        <name>conversationsx5fmembers</name>
    </operations>
    <operations>
        <active>true</active>
        <name>conversationsx5fopen</name>
    </operations>
    <operations>
        <active>false</active>
        <name>conversationsx5frename</name>
    </operations>
    <operations>
        <active>false</active>
        <name>conversationsx5freplies</name>
    </operations>
    <operations>
        <active>false</active>
        <name>conversationsx5fsetpurpose</name>
    </operations>
    <operations>
        <active>false</active>
        <name>conversationsx5fsettopic</name>
    </operations>
    <operations>
        <active>false</active>
        <name>conversationsx5funarchive</name>
    </operations>
    <operations>
        <active>false</active>
        <name>dialogx5fopen</name>
    </operations>
    <operations>
        <active>false</active>
        <name>dndx5fenddnd</name>
    </operations>
    <operations>
        <active>false</active>
        <name>dndx5fendsnooze</name>
    </operations>
    <operations>
        <active>false</active>
        <name>dndx5finfo</name>
    </operations>
    <operations>
        <active>false</active>
        <name>dndx5fsetsnooze</name>
    </operations>
    <operations>
        <active>false</active>
        <name>dndx5fteaminfo</name>
    </operations>
    <operations>
        <active>false</active>
        <name>emojix5flist</name>
    </operations>
    <operations>
        <active>false</active>
        <name>filesx5fcommentsx5fdelete</name>
    </operations>
    <operations>
        <active>false</active>
        <name>filesx5fdelete</name>
    </operations>
    <operations>
        <active>false</active>
        <name>filesx5finfo</name>
    </operations>
    <operations>
        <active>false</active>
        <name>filesx5flist</name>
    </operations>
    <operations>
        <active>false</active>
        <name>filesx5fremotex5fadd</name>
    </operations>
    <operations>
        <active>false</active>
        <name>filesx5fremotex5finfo</name>
    </operations>
    <operations>
        <active>false</active>
        <name>filesx5fremotex5flist</name>
    </operations>
    <operations>
        <active>false</active>
        <name>filesx5fremotex5fremove</name>
    </operations>
    <operations>
        <active>false</active>
        <name>filesx5fremotex5fshare</name>
    </operations>
    <operations>
        <active>false</active>
        <name>filesx5fremotex5fupdate</name>
    </operations>
    <operations>
        <active>false</active>
        <name>filesx5frevokepublicurl</name>
    </operations>
    <operations>
        <active>false</active>
        <name>filesx5fsharedpublicurl</name>
    </operations>
    <operations>
        <active>false</active>
        <name>filesx5fupload</name>
    </operations>
    <operations>
        <active>false</active>
        <name>migrationx5fexchange</name>
    </operations>
    <operations>
        <active>false</active>
        <name>oauthx5faccess</name>
    </operations>
    <operations>
        <active>false</active>
        <name>oauthx5ftoken</name>
    </operations>
    <operations>
        <active>false</active>
        <name>oauthx5fv2x5faccess</name>
    </operations>
    <operations>
        <active>false</active>
        <name>pinsx5fadd</name>
    </operations>
    <operations>
        <active>false</active>
        <name>pinsx5flist</name>
    </operations>
    <operations>
        <active>false</active>
        <name>pinsx5fremove</name>
    </operations>
    <operations>
        <active>false</active>
        <name>reactionsx5fadd</name>
    </operations>
    <operations>
        <active>false</active>
        <name>reactionsx5fget</name>
    </operations>
    <operations>
        <active>false</active>
        <name>reactionsx5flist</name>
    </operations>
    <operations>
        <active>false</active>
        <name>reactionsx5fremove</name>
    </operations>
    <operations>
        <active>false</active>
        <name>remindersx5fadd</name>
    </operations>
    <operations>
        <active>false</active>
        <name>remindersx5fcomplete</name>
    </operations>
    <operations>
        <active>false</active>
        <name>remindersx5fdelete</name>
    </operations>
    <operations>
        <active>false</active>
        <name>remindersx5finfo</name>
    </operations>
    <operations>
        <active>false</active>
        <name>remindersx5flist</name>
    </operations>
    <operations>
        <active>false</active>
        <name>rtmx5fconnect</name>
    </operations>
    <operations>
        <active>false</active>
        <name>searchx5fmessages</name>
    </operations>
    <operations>
        <active>false</active>
        <name>starsx5fadd</name>
    </operations>
    <operations>
        <active>false</active>
        <name>starsx5flist</name>
    </operations>
    <operations>
        <active>false</active>
        <name>starsx5fremove</name>
    </operations>
    <operations>
        <active>false</active>
        <name>teamx5faccesslogs</name>
    </operations>
    <operations>
        <active>false</active>
        <name>teamx5fbillableinfo</name>
    </operations>
    <operations>
        <active>false</active>
        <name>teamx5finfo</name>
    </operations>
    <operations>
        <active>false</active>
        <name>teamx5fintegrationlogs</name>
    </operations>
    <operations>
        <active>false</active>
        <name>teamx5fprofilex5fget</name>
    </operations>
    <operations>
        <active>false</active>
        <name>usergroupsx5fcreate</name>
    </operations>
    <operations>
        <active>false</active>
        <name>usergroupsx5fdisable</name>
    </operations>
    <operations>
        <active>false</active>
        <name>usergroupsx5fenable</name>
    </operations>
    <operations>
        <active>false</active>
        <name>usergroupsx5flist</name>
    </operations>
    <operations>
        <active>false</active>
        <name>usergroupsx5fupdate</name>
    </operations>
    <operations>
        <active>false</active>
        <name>usergroupsx5fusersx5flist</name>
    </operations>
    <operations>
        <active>false</active>
        <name>usergroupsx5fusersx5fupdate</name>
    </operations>
    <operations>
        <active>false</active>
        <name>usersx5fconversations</name>
    </operations>
    <operations>
        <active>false</active>
        <name>usersx5fdeletephoto</name>
    </operations>
    <operations>
        <active>false</active>
        <name>usersx5fgetpresence</name>
    </operations>
    <operations>
        <active>false</active>
        <name>usersx5fidentity</name>
    </operations>
    <operations>
        <active>true</active>
        <name>usersx5finfo</name>
    </operations>
    <operations>
        <active>true</active>
        <name>usersx5flist</name>
    </operations>
    <operations>
        <active>true</active>
        <name>usersx5flookupbyemail</name>
    </operations>
    <operations>
        <active>false</active>
        <name>usersx5fprofilex5fget</name>
    </operations>
    <operations>
        <active>false</active>
        <name>usersx5fprofilex5fset</name>
    </operations>
    <operations>
        <active>false</active>
        <name>usersx5fsetactive</name>
    </operations>
    <operations>
        <active>false</active>
        <name>usersx5fsetphoto</name>
    </operations>
    <operations>
        <active>false</active>
        <name>usersx5fsetpresence</name>
    </operations>
    <operations>
        <active>false</active>
        <name>viewsx5fopen</name>
    </operations>
    <operations>
        <active>false</active>
        <name>viewsx5fpublish</name>
    </operations>
    <operations>
        <active>false</active>
        <name>viewsx5fpush</name>
    </operations>
    <operations>
        <active>false</active>
        <name>viewsx5fupdate</name>
    </operations>
    <operations>
        <active>false</active>
        <name>workflowsx5fstepcompleted</name>
    </operations>
    <operations>
        <active>false</active>
        <name>workflowsx5fstepfailed</name>
    </operations>
    <operations>
        <active>false</active>
        <name>workflowsx5fupdatestep</name>
    </operations>
    <registrationProviderType>Custom</registrationProviderType>
    <schema>{
    &quot;basePath&quot;: &quot;/api&quot;,
    &quot;definitions&quot;: {
        &quot;blocks&quot;: {
            &quot;description&quot;: &quot;This is a very loose definition, in the future, we&apos;ll populate this with deeper schema in this definition namespace.&quot;,
            &quot;items&quot;: {
                &quot;additionalProperties&quot;: true,
                &quot;properties&quot;: {
                    &quot;type&quot;: {
                        &quot;type&quot;: &quot;string&quot;
                    }
                },
                &quot;required&quot;: [
                    &quot;type&quot;
                ],
                &quot;type&quot;: &quot;object&quot;
            },
            &quot;title&quot;: &quot;Block Kit blocks&quot;,
            &quot;type&quot;: &quot;array&quot;
        },
        &quot;defs_app_id&quot;: {
            &quot;pattern&quot;: &quot;^A[A-Z0-9]{1,}$&quot;,
            &quot;title&quot;: &quot;App ID&quot;,
            &quot;type&quot;: &quot;string&quot;
        },
        &quot;defs_bot_id&quot;: {
            &quot;pattern&quot;: &quot;^B[A-Z0-9]{8,}$&quot;,
            &quot;title&quot;: &quot;Bot User ID&quot;,
            &quot;type&quot;: &quot;string&quot;
        },
        &quot;defs_channel&quot;: {
            &quot;pattern&quot;: &quot;^[CGD][A-Z0-9]{8,}$&quot;,
            &quot;title&quot;: &quot;Channel-like conversation ID&quot;,
            &quot;type&quot;: &quot;string&quot;
        },
        &quot;defs_channel_id&quot;: {
            &quot;pattern&quot;: &quot;^[C][A-Z0-9]{2,}$&quot;,
            &quot;title&quot;: &quot;Channel ID&quot;,
            &quot;type&quot;: &quot;string&quot;
        },
        &quot;defs_channel_name&quot;: {
            &quot;title&quot;: &quot;Name of a channel&quot;,
            &quot;type&quot;: &quot;string&quot;
        },
        &quot;defs_comment_id&quot;: {
            &quot;pattern&quot;: &quot;^Fc[A-Z0-9]{8,}$&quot;,
            &quot;title&quot;: &quot;File Comment ID&quot;,
            &quot;type&quot;: &quot;string&quot;
        },
        &quot;defs_dm_id&quot;: {
            &quot;pattern&quot;: &quot;^[D][A-Z0-9]{8,}$&quot;,
            &quot;title&quot;: &quot;Direct Message Channel ID&quot;,
            &quot;type&quot;: &quot;string&quot;
        },
        &quot;defs_enterprise_id&quot;: {
            &quot;pattern&quot;: &quot;^[E][A-Z0-9]{8,}$&quot;,
            &quot;title&quot;: &quot;Enterprise ID&quot;,
            &quot;type&quot;: &quot;string&quot;
        },
        &quot;defs_enterprise_name&quot;: {
            &quot;title&quot;: &quot;Name of the enterprise org&quot;,
            &quot;type&quot;: &quot;string&quot;
        },
        &quot;defs_enterprise_user_id&quot;: {
            &quot;pattern&quot;: &quot;^[WU][A-Z0-9]{8,}$&quot;,
            &quot;title&quot;: &quot;Enterprise User ID&quot;,
            &quot;type&quot;: &quot;string&quot;
        },
        &quot;defs_file_id&quot;: {
            &quot;pattern&quot;: &quot;^[F][A-Z0-9]{8,}$&quot;,
            &quot;title&quot;: &quot;File ID&quot;,
            &quot;type&quot;: &quot;string&quot;
        },
        &quot;defs_group_id&quot;: {
            &quot;pattern&quot;: &quot;^[G][A-Z0-9]{8,}$&quot;,
            &quot;title&quot;: &quot;Private Channel ID&quot;,
            &quot;type&quot;: &quot;string&quot;
        },
        &quot;defs_ok_false&quot;: {
            &quot;enum&quot;: [
                false
            ],
            &quot;title&quot;: &quot;default failure response&quot;,
            &quot;type&quot;: &quot;boolean&quot;
        },
        &quot;defs_ok_true&quot;: {
            &quot;enum&quot;: [
                true
            ],
            &quot;title&quot;: &quot;default success response&quot;,
            &quot;type&quot;: &quot;boolean&quot;
        },
        &quot;defs_optional_app_id&quot;: {
            &quot;pattern&quot;: &quot;^(A[A-Z0-9]{1,})?$&quot;,
            &quot;title&quot;: &quot;App ID or empty string&quot;,
            &quot;type&quot;: &quot;string&quot;
        },
        &quot;defs_pinned_info&quot;: {
            &quot;additionalProperties&quot;: false,
            &quot;title&quot;: &quot;Info for a pinned item&quot;,
            &quot;type&quot;: &quot;object&quot;
        },
        &quot;defs_reminder_id&quot;: {
            &quot;pattern&quot;: &quot;^Rm[A-Z0-9]{8,}$&quot;,
            &quot;title&quot;: &quot;Reminder ID&quot;,
            &quot;type&quot;: &quot;string&quot;
        },
        &quot;defs_subteam_id&quot;: {
            &quot;pattern&quot;: &quot;^S[A-Z0-9]{2,}$&quot;,
            &quot;title&quot;: &quot;Subteam ID&quot;,
            &quot;type&quot;: &quot;string&quot;
        },
        &quot;defs_team&quot;: {
            &quot;pattern&quot;: &quot;^[T][A-Z0-9]{2,}$&quot;,
            &quot;title&quot;: &quot;Team ID&quot;,
            &quot;type&quot;: &quot;string&quot;
        },
        &quot;defs_topic_purpose_creator&quot;: {
            &quot;pattern&quot;: &quot;^[UW][A-Z0-9]{8,}$|^$&quot;,
            &quot;title&quot;: &quot;User ID or empty string, used for topic and purpose creation&quot;,
            &quot;type&quot;: &quot;string&quot;
        },
        &quot;defs_ts&quot;: {
            &quot;pattern&quot;: &quot;^\\d{10}\\.\\d{6}$&quot;,
            &quot;title&quot;: &quot;Timestamp in format 0123456789.012345&quot;,
            &quot;type&quot;: &quot;string&quot;
        },
        &quot;defs_user_id&quot;: {
            &quot;pattern&quot;: &quot;^[UW][A-Z0-9]{2,}$&quot;,
            &quot;title&quot;: &quot;User ID&quot;,
            &quot;type&quot;: &quot;string&quot;
        },
        &quot;defs_workspace_id&quot;: {
            &quot;pattern&quot;: &quot;^[TE][A-Z0-9]{8,}$&quot;,
            &quot;title&quot;: &quot;Team or Enterprise ID&quot;,
            &quot;type&quot;: &quot;string&quot;
        },
        &quot;objs_bot_profile&quot;: {
            &quot;additionalProperties&quot;: false,
            &quot;properties&quot;: {
                &quot;app_id&quot;: {
                    &quot;$ref&quot;: &quot;#/definitions/defs_app_id&quot;
                },
                &quot;deleted&quot;: {
                    &quot;type&quot;: &quot;boolean&quot;
                },
                &quot;icons&quot;: {
                    &quot;additionalProperties&quot;: false,
                    &quot;properties&quot;: {
                        &quot;image_36&quot;: {
                            &quot;format&quot;: &quot;uri&quot;,
                            &quot;type&quot;: &quot;string&quot;
                        },
                        &quot;image_48&quot;: {
                            &quot;format&quot;: &quot;uri&quot;,
                            &quot;type&quot;: &quot;string&quot;
                        },
                        &quot;image_72&quot;: {
                            &quot;format&quot;: &quot;uri&quot;,
                            &quot;type&quot;: &quot;string&quot;
                        }
                    },
                    &quot;required&quot;: [
                        &quot;image_36&quot;,
                        &quot;image_48&quot;,
                        &quot;image_72&quot;
                    ],
                    &quot;type&quot;: &quot;object&quot;
                },
                &quot;id&quot;: {
                    &quot;$ref&quot;: &quot;#/definitions/defs_bot_id&quot;
                },
                &quot;name&quot;: {
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;team_id&quot;: {
                    &quot;$ref&quot;: &quot;#/definitions/defs_team&quot;
                },
                &quot;updated&quot;: {
                    &quot;type&quot;: &quot;integer&quot;
                }
            },
            &quot;required&quot;: [
                &quot;id&quot;,
                &quot;deleted&quot;,
                &quot;name&quot;,
                &quot;updated&quot;,
                &quot;app_id&quot;,
                &quot;icons&quot;,
                &quot;team_id&quot;
            ],
            &quot;title&quot;: &quot;Bot Profile Object&quot;,
            &quot;type&quot;: &quot;object&quot;
        },
        &quot;objs_channel&quot;: {
            &quot;additionalProperties&quot;: false,
            &quot;properties&quot;: {
                &quot;accepted_user&quot;: {
                    &quot;$ref&quot;: &quot;#/definitions/defs_user_id&quot;
                },
                &quot;created&quot;: {
                    &quot;type&quot;: &quot;integer&quot;
                },
                &quot;creator&quot;: {
                    &quot;$ref&quot;: &quot;#/definitions/defs_user_id&quot;
                },
                &quot;id&quot;: {
                    &quot;$ref&quot;: &quot;#/definitions/defs_channel_id&quot;
                },
                &quot;is_archived&quot;: {
                    &quot;type&quot;: &quot;boolean&quot;
                },
                &quot;is_channel&quot;: {
                    &quot;type&quot;: &quot;boolean&quot;
                },
                &quot;is_frozen&quot;: {
                    &quot;type&quot;: &quot;boolean&quot;
                },
                &quot;is_general&quot;: {
                    &quot;type&quot;: &quot;boolean&quot;
                },
                &quot;is_member&quot;: {
                    &quot;type&quot;: &quot;boolean&quot;
                },
                &quot;is_moved&quot;: {
                    &quot;type&quot;: &quot;integer&quot;
                },
                &quot;is_mpim&quot;: {
                    &quot;type&quot;: &quot;boolean&quot;
                },
                &quot;is_non_threadable&quot;: {
                    &quot;type&quot;: &quot;boolean&quot;
                },
                &quot;is_org_shared&quot;: {
                    &quot;type&quot;: &quot;boolean&quot;
                },
                &quot;is_pending_ext_shared&quot;: {
                    &quot;type&quot;: &quot;boolean&quot;
                },
                &quot;is_private&quot;: {
                    &quot;type&quot;: &quot;boolean&quot;
                },
                &quot;is_read_only&quot;: {
                    &quot;type&quot;: &quot;boolean&quot;
                },
                &quot;is_shared&quot;: {
                    &quot;type&quot;: &quot;boolean&quot;
                },
                &quot;is_thread_only&quot;: {
                    &quot;type&quot;: &quot;boolean&quot;
                },
                &quot;last_read&quot;: {
                    &quot;$ref&quot;: &quot;#/definitions/defs_ts&quot;
                },
                &quot;latest&quot;: {
                    &quot;items&quot;: [
                        {
                            &quot;$ref&quot;: &quot;#/definitions/objs_message&quot;
                        },
                        {
                            &quot;type&quot;: &quot;null&quot;
                        }
                    ]
                },
                &quot;members&quot;: {
                    &quot;items&quot;: {
                        &quot;$ref&quot;: &quot;#/definitions/defs_user_id&quot;
                    },
                    &quot;minItems&quot;: 0,
                    &quot;type&quot;: &quot;array&quot;,
                    &quot;uniqueItems&quot;: true
                },
                &quot;name&quot;: {
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;name_normalized&quot;: {
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;num_members&quot;: {
                    &quot;type&quot;: &quot;integer&quot;
                },
                &quot;pending_shared&quot;: {
                    &quot;items&quot;: {
                        &quot;$ref&quot;: &quot;#/definitions/defs_team&quot;
                    },
                    &quot;minItems&quot;: 0,
                    &quot;type&quot;: &quot;array&quot;,
                    &quot;uniqueItems&quot;: true
                },
                &quot;previous_names&quot;: {
                    &quot;items&quot;: {
                        &quot;$ref&quot;: &quot;#/definitions/defs_channel_name&quot;
                    },
                    &quot;minItems&quot;: 0,
                    &quot;type&quot;: &quot;array&quot;,
                    &quot;uniqueItems&quot;: true
                },
                &quot;priority&quot;: {
                    &quot;type&quot;: &quot;number&quot;
                },
                &quot;purpose&quot;: {
                    &quot;additionalProperties&quot;: false,
                    &quot;properties&quot;: {
                        &quot;creator&quot;: {
                            &quot;$ref&quot;: &quot;#/definitions/defs_topic_purpose_creator&quot;
                        },
                        &quot;last_set&quot;: {
                            &quot;type&quot;: &quot;integer&quot;
                        },
                        &quot;value&quot;: {
                            &quot;type&quot;: &quot;string&quot;
                        }
                    },
                    &quot;required&quot;: [
                        &quot;value&quot;,
                        &quot;creator&quot;,
                        &quot;last_set&quot;
                    ],
                    &quot;type&quot;: &quot;object&quot;
                },
                &quot;topic&quot;: {
                    &quot;additionalProperties&quot;: false,
                    &quot;properties&quot;: {
                        &quot;creator&quot;: {
                            &quot;$ref&quot;: &quot;#/definitions/defs_topic_purpose_creator&quot;
                        },
                        &quot;last_set&quot;: {
                            &quot;type&quot;: &quot;integer&quot;
                        },
                        &quot;value&quot;: {
                            &quot;type&quot;: &quot;string&quot;
                        }
                    },
                    &quot;required&quot;: [
                        &quot;value&quot;,
                        &quot;creator&quot;,
                        &quot;last_set&quot;
                    ],
                    &quot;type&quot;: &quot;object&quot;
                },
                &quot;unlinked&quot;: {
                    &quot;title&quot;: &quot;Field to determine whether a channel has ever been shared/disconnected in the past&quot;,
                    &quot;type&quot;: &quot;integer&quot;
                },
                &quot;unread_count&quot;: {
                    &quot;type&quot;: &quot;integer&quot;
                },
                &quot;unread_count_display&quot;: {
                    &quot;type&quot;: &quot;integer&quot;
                }
            },
            &quot;required&quot;: [
                &quot;id&quot;,
                &quot;name&quot;,
                &quot;created&quot;,
                &quot;creator&quot;,
                &quot;is_channel&quot;,
                &quot;is_org_shared&quot;,
                &quot;is_private&quot;,
                &quot;is_mpim&quot;,
                &quot;is_shared&quot;,
                &quot;name_normalized&quot;,
                &quot;members&quot;,
                &quot;topic&quot;,
                &quot;purpose&quot;
            ],
            &quot;title&quot;: &quot;Channel Object&quot;,
            &quot;type&quot;: &quot;object&quot;
        },
        &quot;objs_comment&quot;: {
            &quot;additionalProperties&quot;: false,
            &quot;properties&quot;: {
                &quot;comment&quot;: {
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;created&quot;: {
                    &quot;type&quot;: &quot;integer&quot;
                },
                &quot;id&quot;: {
                    &quot;$ref&quot;: &quot;#/definitions/defs_comment_id&quot;
                },
                &quot;is_intro&quot;: {
                    &quot;type&quot;: &quot;boolean&quot;
                },
                &quot;is_starred&quot;: {
                    &quot;type&quot;: &quot;boolean&quot;
                },
                &quot;num_stars&quot;: {
                    &quot;type&quot;: &quot;integer&quot;
                },
                &quot;pinned_info&quot;: {
                    &quot;$ref&quot;: &quot;#/definitions/defs_pinned_info&quot;
                },
                &quot;pinned_to&quot;: {
                    &quot;items&quot;: {
                        &quot;$ref&quot;: &quot;#/definitions/defs_channel&quot;
                    },
                    &quot;type&quot;: &quot;array&quot;
                },
                &quot;reactions&quot;: {
                    &quot;items&quot;: {
                        &quot;$ref&quot;: &quot;#/definitions/objs_reaction&quot;
                    },
                    &quot;type&quot;: &quot;array&quot;
                },
                &quot;timestamp&quot;: {
                    &quot;type&quot;: &quot;integer&quot;
                },
                &quot;user&quot;: {
                    &quot;$ref&quot;: &quot;#/definitions/defs_user_id&quot;
                }
            },
            &quot;required&quot;: [
                &quot;id&quot;,
                &quot;created&quot;,
                &quot;timestamp&quot;,
                &quot;user&quot;,
                &quot;is_intro&quot;,
                &quot;comment&quot;
            ],
            &quot;title&quot;: &quot;File Comment Object&quot;,
            &quot;type&quot;: &quot;object&quot;
        },
        &quot;objs_comments&quot;: {
            &quot;items&quot;: {},
            &quot;title&quot;: &quot;file comments object&quot;,
            &quot;type&quot;: &quot;array&quot;
        },
        &quot;objs_conversation&quot;: {
            &quot;items&quot;: [
                {
                    &quot;additionalProperties&quot;: false,
                    &quot;properties&quot;: {
                        &quot;accepted_user&quot;: {
                            &quot;$ref&quot;: &quot;#/definitions/defs_user_id&quot;
                        },
                        &quot;connected_team_ids&quot;: {
                            &quot;items&quot;: {
                                &quot;$ref&quot;: &quot;#/definitions/defs_workspace_id&quot;
                            },
                            &quot;minItems&quot;: 0,
                            &quot;type&quot;: &quot;array&quot;,
                            &quot;uniqueItems&quot;: true
                        },
                        &quot;conversation_host_id&quot;: {
                            &quot;$ref&quot;: &quot;#/definitions/defs_workspace_id&quot;
                        },
                        &quot;created&quot;: {
                            &quot;type&quot;: &quot;integer&quot;
                        },
                        &quot;creator&quot;: {
                            &quot;$ref&quot;: &quot;#/definitions/defs_user_id&quot;
                        },
                        &quot;display_counts&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;properties&quot;: {
                                &quot;display_counts&quot;: {
                                    &quot;type&quot;: &quot;integer&quot;
                                },
                                &quot;guest_counts&quot;: {
                                    &quot;type&quot;: &quot;integer&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;display_counts&quot;,
                                &quot;guest_counts&quot;
                            ],
                            &quot;type&quot;: &quot;object&quot;
                        },
                        &quot;enterprise_id&quot;: {
                            &quot;$ref&quot;: &quot;#/definitions/defs_enterprise_id&quot;
                        },
                        &quot;has_pins&quot;: {
                            &quot;type&quot;: &quot;boolean&quot;
                        },
                        &quot;id&quot;: {
                            &quot;$ref&quot;: &quot;#/definitions/defs_channel&quot;
                        },
                        &quot;internal_team_ids&quot;: {
                            &quot;items&quot;: {
                                &quot;$ref&quot;: &quot;#/definitions/defs_team&quot;
                            },
                            &quot;minItems&quot;: 0,
                            &quot;type&quot;: &quot;array&quot;,
                            &quot;uniqueItems&quot;: true
                        },
                        &quot;is_archived&quot;: {
                            &quot;type&quot;: &quot;boolean&quot;
                        },
                        &quot;is_channel&quot;: {
                            &quot;type&quot;: &quot;boolean&quot;
                        },
                        &quot;is_ext_shared&quot;: {
                            &quot;type&quot;: &quot;boolean&quot;
                        },
                        &quot;is_frozen&quot;: {
                            &quot;type&quot;: &quot;boolean&quot;
                        },
                        &quot;is_general&quot;: {
                            &quot;type&quot;: &quot;boolean&quot;
                        },
                        &quot;is_global_shared&quot;: {
                            &quot;type&quot;: &quot;boolean&quot;
                        },
                        &quot;is_group&quot;: {
                            &quot;type&quot;: &quot;boolean&quot;
                        },
                        &quot;is_im&quot;: {
                            &quot;type&quot;: &quot;boolean&quot;
                        },
                        &quot;is_member&quot;: {
                            &quot;type&quot;: &quot;boolean&quot;
                        },
                        &quot;is_moved&quot;: {
                            &quot;type&quot;: &quot;integer&quot;
                        },
                        &quot;is_mpim&quot;: {
                            &quot;enum&quot;: [
                                false
                            ],
                            &quot;type&quot;: &quot;boolean&quot;
                        },
                        &quot;is_non_threadable&quot;: {
                            &quot;type&quot;: &quot;boolean&quot;
                        },
                        &quot;is_open&quot;: {
                            &quot;type&quot;: &quot;boolean&quot;
                        },
                        &quot;is_org_default&quot;: {
                            &quot;type&quot;: &quot;boolean&quot;
                        },
                        &quot;is_org_mandatory&quot;: {
                            &quot;type&quot;: &quot;boolean&quot;
                        },
                        &quot;is_org_shared&quot;: {
                            &quot;type&quot;: &quot;boolean&quot;
                        },
                        &quot;is_pending_ext_shared&quot;: {
                            &quot;type&quot;: &quot;boolean&quot;
                        },
                        &quot;is_private&quot;: {
                            &quot;type&quot;: &quot;boolean&quot;
                        },
                        &quot;is_read_only&quot;: {
                            &quot;type&quot;: &quot;boolean&quot;
                        },
                        &quot;is_shared&quot;: {
                            &quot;type&quot;: &quot;boolean&quot;
                        },
                        &quot;is_starred&quot;: {
                            &quot;type&quot;: &quot;boolean&quot;
                        },
                        &quot;is_thread_only&quot;: {
                            &quot;type&quot;: &quot;boolean&quot;
                        },
                        &quot;last_read&quot;: {
                            &quot;$ref&quot;: &quot;#/definitions/defs_ts&quot;
                        },
                        &quot;latest&quot;: {
                            &quot;items&quot;: [
                                {
                                    &quot;$ref&quot;: &quot;#/definitions/objs_message&quot;
                                },
                                {
                                    &quot;type&quot;: &quot;null&quot;
                                }
                            ]
                        },
                        &quot;members&quot;: {
                            &quot;items&quot;: {
                                &quot;$ref&quot;: &quot;#/definitions/defs_user_id&quot;
                            },
                            &quot;minItems&quot;: 0,
                            &quot;type&quot;: &quot;array&quot;,
                            &quot;uniqueItems&quot;: true
                        },
                        &quot;name&quot;: {
                            &quot;type&quot;: &quot;string&quot;
                        },
                        &quot;name_normalized&quot;: {
                            &quot;type&quot;: &quot;string&quot;
                        },
                        &quot;num_members&quot;: {
                            &quot;type&quot;: &quot;integer&quot;
                        },
                        &quot;parent_conversation&quot;: {
                            &quot;items&quot;: [
                                {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_channel&quot;
                                },
                                {
                                    &quot;type&quot;: &quot;null&quot;
                                }
                            ]
                        },
                        &quot;pending_connected_team_ids&quot;: {
                            &quot;items&quot;: {
                                &quot;$ref&quot;: &quot;#/definitions/defs_team&quot;
                            },
                            &quot;minItems&quot;: 0,
                            &quot;type&quot;: &quot;array&quot;,
                            &quot;uniqueItems&quot;: true
                        },
                        &quot;pending_shared&quot;: {
                            &quot;items&quot;: {
                                &quot;$ref&quot;: &quot;#/definitions/defs_team&quot;
                            },
                            &quot;minItems&quot;: 0,
                            &quot;type&quot;: &quot;array&quot;,
                            &quot;uniqueItems&quot;: true
                        },
                        &quot;pin_count&quot;: {
                            &quot;type&quot;: &quot;integer&quot;
                        },
                        &quot;previous_names&quot;: {
                            &quot;items&quot;: {
                                &quot;$ref&quot;: &quot;#/definitions/defs_channel_name&quot;
                            },
                            &quot;minItems&quot;: 0,
                            &quot;type&quot;: &quot;array&quot;,
                            &quot;uniqueItems&quot;: true
                        },
                        &quot;priority&quot;: {
                            &quot;type&quot;: &quot;number&quot;
                        },
                        &quot;purpose&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;properties&quot;: {
                                &quot;creator&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_topic_purpose_creator&quot;
                                },
                                &quot;last_set&quot;: {
                                    &quot;type&quot;: &quot;integer&quot;
                                },
                                &quot;value&quot;: {
                                    &quot;type&quot;: &quot;string&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;value&quot;,
                                &quot;creator&quot;,
                                &quot;last_set&quot;
                            ],
                            &quot;type&quot;: &quot;object&quot;
                        },
                        &quot;shared_team_ids&quot;: {
                            &quot;items&quot;: {
                                &quot;$ref&quot;: &quot;#/definitions/defs_team&quot;
                            },
                            &quot;minItems&quot;: 0,
                            &quot;type&quot;: &quot;array&quot;,
                            &quot;uniqueItems&quot;: true
                        },
                        &quot;shares&quot;: {
                            &quot;items&quot;: {
                                &quot;additionalProperties&quot;: false,
                                &quot;properties&quot;: {
                                    &quot;accepted_user&quot;: {
                                        &quot;$ref&quot;: &quot;#/definitions/defs_user_id&quot;
                                    },
                                    &quot;is_active&quot;: {
                                        &quot;type&quot;: &quot;boolean&quot;
                                    },
                                    &quot;team&quot;: {
                                        &quot;$ref&quot;: &quot;#/definitions/objs_team&quot;
                                    },
                                    &quot;user&quot;: {
                                        &quot;$ref&quot;: &quot;#/definitions/defs_user_id&quot;
                                    }
                                },
                                &quot;required&quot;: [
                                    &quot;team&quot;,
                                    &quot;user&quot;,
                                    &quot;is_active&quot;
                                ],
                                &quot;type&quot;: &quot;object&quot;
                            },
                            &quot;minItems&quot;: 0,
                            &quot;type&quot;: &quot;array&quot;,
                            &quot;uniqueItems&quot;: true
                        },
                        &quot;timezone_count&quot;: {
                            &quot;type&quot;: &quot;integer&quot;
                        },
                        &quot;topic&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;properties&quot;: {
                                &quot;creator&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_topic_purpose_creator&quot;
                                },
                                &quot;last_set&quot;: {
                                    &quot;type&quot;: &quot;integer&quot;
                                },
                                &quot;value&quot;: {
                                    &quot;type&quot;: &quot;string&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;value&quot;,
                                &quot;creator&quot;,
                                &quot;last_set&quot;
                            ],
                            &quot;type&quot;: &quot;object&quot;
                        },
                        &quot;unlinked&quot;: {
                            &quot;title&quot;: &quot;Field to determine whether a channel has ever been shared/disconnected in the past&quot;,
                            &quot;type&quot;: &quot;integer&quot;
                        },
                        &quot;unread_count&quot;: {
                            &quot;type&quot;: &quot;integer&quot;
                        },
                        &quot;unread_count_display&quot;: {
                            &quot;type&quot;: &quot;integer&quot;
                        },
                        &quot;use_case&quot;: {
                            &quot;type&quot;: &quot;string&quot;
                        },
                        &quot;user&quot;: {
                            &quot;$ref&quot;: &quot;#/definitions/defs_user_id&quot;
                        },
                        &quot;version&quot;: {
                            &quot;type&quot;: &quot;integer&quot;
                        }
                    },
                    &quot;required&quot;: [
                        &quot;id&quot;,
                        &quot;name&quot;,
                        &quot;created&quot;,
                        &quot;creator&quot;,
                        &quot;is_archived&quot;,
                        &quot;is_channel&quot;,
                        &quot;is_general&quot;,
                        &quot;is_mpim&quot;,
                        &quot;is_group&quot;,
                        &quot;is_org_shared&quot;,
                        &quot;is_im&quot;,
                        &quot;is_shared&quot;,
                        &quot;is_private&quot;,
                        &quot;name_normalized&quot;,
                        &quot;topic&quot;,
                        &quot;purpose&quot;
                    ],
                    &quot;title&quot;: &quot;Conversation object&quot;,
                    &quot;type&quot;: &quot;object&quot;
                },
                {
                    &quot;additionalProperties&quot;: false,
                    &quot;properties&quot;: {
                        &quot;accepted_user&quot;: {
                            &quot;$ref&quot;: &quot;#/definitions/defs_user_id&quot;
                        },
                        &quot;connected_team_ids&quot;: {
                            &quot;items&quot;: {
                                &quot;$ref&quot;: &quot;#/definitions/defs_team&quot;
                            },
                            &quot;minItems&quot;: 0,
                            &quot;type&quot;: &quot;array&quot;,
                            &quot;uniqueItems&quot;: true
                        },
                        &quot;conversation_host_id&quot;: {
                            &quot;$ref&quot;: &quot;#/definitions/defs_workspace_id&quot;
                        },
                        &quot;created&quot;: {
                            &quot;type&quot;: &quot;integer&quot;
                        },
                        &quot;creator&quot;: {
                            &quot;$ref&quot;: &quot;#/definitions/defs_user_id&quot;
                        },
                        &quot;display_counts&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;properties&quot;: {
                                &quot;display_counts&quot;: {
                                    &quot;type&quot;: &quot;integer&quot;
                                },
                                &quot;guest_counts&quot;: {
                                    &quot;type&quot;: &quot;integer&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;display_counts&quot;,
                                &quot;guest_counts&quot;
                            ],
                            &quot;type&quot;: &quot;object&quot;
                        },
                        &quot;id&quot;: {
                            &quot;$ref&quot;: &quot;#/definitions/defs_channel&quot;
                        },
                        &quot;internal_team_ids&quot;: {
                            &quot;items&quot;: {
                                &quot;$ref&quot;: &quot;#/definitions/defs_team&quot;
                            },
                            &quot;minItems&quot;: 0,
                            &quot;type&quot;: &quot;array&quot;,
                            &quot;uniqueItems&quot;: true
                        },
                        &quot;is_archived&quot;: {
                            &quot;type&quot;: &quot;boolean&quot;
                        },
                        &quot;is_channel&quot;: {
                            &quot;type&quot;: &quot;boolean&quot;
                        },
                        &quot;is_ext_shared&quot;: {
                            &quot;type&quot;: &quot;boolean&quot;
                        },
                        &quot;is_frozen&quot;: {
                            &quot;type&quot;: &quot;boolean&quot;
                        },
                        &quot;is_general&quot;: {
                            &quot;type&quot;: &quot;boolean&quot;
                        },
                        &quot;is_group&quot;: {
                            &quot;type&quot;: &quot;boolean&quot;
                        },
                        &quot;is_im&quot;: {
                            &quot;type&quot;: &quot;boolean&quot;
                        },
                        &quot;is_member&quot;: {
                            &quot;type&quot;: &quot;boolean&quot;
                        },
                        &quot;is_moved&quot;: {
                            &quot;type&quot;: &quot;integer&quot;
                        },
                        &quot;is_mpim&quot;: {
                            &quot;enum&quot;: [
                                true
                            ],
                            &quot;type&quot;: &quot;boolean&quot;
                        },
                        &quot;is_non_threadable&quot;: {
                            &quot;type&quot;: &quot;boolean&quot;
                        },
                        &quot;is_open&quot;: {
                            &quot;type&quot;: &quot;boolean&quot;
                        },
                        &quot;is_org_shared&quot;: {
                            &quot;type&quot;: &quot;boolean&quot;
                        },
                        &quot;is_pending_ext_shared&quot;: {
                            &quot;type&quot;: &quot;boolean&quot;
                        },
                        &quot;is_private&quot;: {
                            &quot;type&quot;: &quot;boolean&quot;
                        },
                        &quot;is_read_only&quot;: {
                            &quot;type&quot;: &quot;boolean&quot;
                        },
                        &quot;is_shared&quot;: {
                            &quot;type&quot;: &quot;boolean&quot;
                        },
                        &quot;is_starred&quot;: {
                            &quot;type&quot;: &quot;boolean&quot;
                        },
                        &quot;is_thread_only&quot;: {
                            &quot;type&quot;: &quot;boolean&quot;
                        },
                        &quot;last_read&quot;: {
                            &quot;$ref&quot;: &quot;#/definitions/defs_ts&quot;
                        },
                        &quot;latest&quot;: {
                            &quot;items&quot;: [
                                {
                                    &quot;$ref&quot;: &quot;#/definitions/objs_message&quot;
                                },
                                {
                                    &quot;type&quot;: &quot;null&quot;
                                }
                            ]
                        },
                        &quot;members&quot;: {
                            &quot;items&quot;: {
                                &quot;$ref&quot;: &quot;#/definitions/defs_user_id&quot;
                            },
                            &quot;minItems&quot;: 0,
                            &quot;type&quot;: &quot;array&quot;,
                            &quot;uniqueItems&quot;: true
                        },
                        &quot;name&quot;: {
                            &quot;type&quot;: &quot;string&quot;
                        },
                        &quot;name_normalized&quot;: {
                            &quot;type&quot;: &quot;string&quot;
                        },
                        &quot;num_members&quot;: {
                            &quot;type&quot;: &quot;integer&quot;
                        },
                        &quot;parent_conversation&quot;: {
                            &quot;items&quot;: [
                                {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_channel&quot;
                                },
                                {
                                    &quot;type&quot;: &quot;null&quot;
                                }
                            ]
                        },
                        &quot;pending_connected_team_ids&quot;: {
                            &quot;items&quot;: {
                                &quot;$ref&quot;: &quot;#/definitions/defs_team&quot;
                            },
                            &quot;minItems&quot;: 0,
                            &quot;type&quot;: &quot;array&quot;,
                            &quot;uniqueItems&quot;: true
                        },
                        &quot;pending_shared&quot;: {
                            &quot;items&quot;: {
                                &quot;$ref&quot;: &quot;#/definitions/defs_team&quot;
                            },
                            &quot;minItems&quot;: 0,
                            &quot;type&quot;: &quot;array&quot;,
                            &quot;uniqueItems&quot;: true
                        },
                        &quot;pin_count&quot;: {
                            &quot;type&quot;: &quot;integer&quot;
                        },
                        &quot;previous_names&quot;: {
                            &quot;items&quot;: {
                                &quot;$ref&quot;: &quot;#/definitions/defs_channel_name&quot;
                            },
                            &quot;minItems&quot;: 0,
                            &quot;type&quot;: &quot;array&quot;,
                            &quot;uniqueItems&quot;: true
                        },
                        &quot;priority&quot;: {
                            &quot;type&quot;: &quot;number&quot;
                        },
                        &quot;purpose&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;properties&quot;: {
                                &quot;creator&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_topic_purpose_creator&quot;
                                },
                                &quot;last_set&quot;: {
                                    &quot;type&quot;: &quot;integer&quot;
                                },
                                &quot;value&quot;: {
                                    &quot;type&quot;: &quot;string&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;value&quot;,
                                &quot;creator&quot;,
                                &quot;last_set&quot;
                            ],
                            &quot;type&quot;: &quot;object&quot;
                        },
                        &quot;shared_team_ids&quot;: {
                            &quot;items&quot;: {
                                &quot;$ref&quot;: &quot;#/definitions/defs_team&quot;
                            },
                            &quot;minItems&quot;: 0,
                            &quot;type&quot;: &quot;array&quot;,
                            &quot;uniqueItems&quot;: true
                        },
                        &quot;shares&quot;: {
                            &quot;items&quot;: {
                                &quot;additionalProperties&quot;: false,
                                &quot;properties&quot;: {
                                    &quot;accepted_user&quot;: {
                                        &quot;$ref&quot;: &quot;#/definitions/defs_user_id&quot;
                                    },
                                    &quot;is_active&quot;: {
                                        &quot;type&quot;: &quot;boolean&quot;
                                    },
                                    &quot;team&quot;: {
                                        &quot;$ref&quot;: &quot;#/definitions/objs_team&quot;
                                    },
                                    &quot;user&quot;: {
                                        &quot;$ref&quot;: &quot;#/definitions/defs_user_id&quot;
                                    }
                                },
                                &quot;required&quot;: [
                                    &quot;team&quot;,
                                    &quot;user&quot;,
                                    &quot;is_active&quot;
                                ],
                                &quot;type&quot;: &quot;object&quot;
                            },
                            &quot;minItems&quot;: 0,
                            &quot;type&quot;: &quot;array&quot;,
                            &quot;uniqueItems&quot;: true
                        },
                        &quot;timezone_count&quot;: {
                            &quot;type&quot;: &quot;integer&quot;
                        },
                        &quot;topic&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;properties&quot;: {
                                &quot;creator&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_topic_purpose_creator&quot;
                                },
                                &quot;last_set&quot;: {
                                    &quot;type&quot;: &quot;integer&quot;
                                },
                                &quot;value&quot;: {
                                    &quot;type&quot;: &quot;string&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;value&quot;,
                                &quot;creator&quot;,
                                &quot;last_set&quot;
                            ],
                            &quot;type&quot;: &quot;object&quot;
                        },
                        &quot;unlinked&quot;: {
                            &quot;title&quot;: &quot;Field to determine whether a channel has ever been shared/disconnected in the past&quot;,
                            &quot;type&quot;: &quot;integer&quot;
                        },
                        &quot;unread_count&quot;: {
                            &quot;type&quot;: &quot;integer&quot;
                        },
                        &quot;unread_count_display&quot;: {
                            &quot;type&quot;: &quot;integer&quot;
                        },
                        &quot;user&quot;: {
                            &quot;$ref&quot;: &quot;#/definitions/defs_user_id&quot;
                        },
                        &quot;version&quot;: {
                            &quot;type&quot;: &quot;integer&quot;
                        }
                    },
                    &quot;required&quot;: [
                        &quot;id&quot;,
                        &quot;name&quot;,
                        &quot;created&quot;,
                        &quot;creator&quot;,
                        &quot;is_archived&quot;,
                        &quot;is_channel&quot;,
                        &quot;is_general&quot;,
                        &quot;is_mpim&quot;,
                        &quot;is_group&quot;,
                        &quot;is_org_shared&quot;,
                        &quot;is_im&quot;,
                        &quot;is_shared&quot;,
                        &quot;is_private&quot;,
                        &quot;name_normalized&quot;,
                        &quot;topic&quot;,
                        &quot;purpose&quot;
                    ],
                    &quot;title&quot;: &quot;Conversation MPIM Object&quot;,
                    &quot;type&quot;: &quot;object&quot;
                },
                {
                    &quot;additionalProperties&quot;: false,
                    &quot;properties&quot;: {
                        &quot;created&quot;: {
                            &quot;type&quot;: &quot;integer&quot;
                        },
                        &quot;has_pins&quot;: {
                            &quot;type&quot;: &quot;boolean&quot;
                        },
                        &quot;id&quot;: {
                            &quot;$ref&quot;: &quot;#/definitions/defs_dm_id&quot;
                        },
                        &quot;is_archived&quot;: {
                            &quot;type&quot;: &quot;boolean&quot;
                        },
                        &quot;is_ext_shared&quot;: {
                            &quot;type&quot;: &quot;boolean&quot;
                        },
                        &quot;is_frozen&quot;: {
                            &quot;type&quot;: &quot;boolean&quot;
                        },
                        &quot;is_im&quot;: {
                            &quot;type&quot;: &quot;boolean&quot;
                        },
                        &quot;is_open&quot;: {
                            &quot;type&quot;: &quot;boolean&quot;
                        },
                        &quot;is_org_shared&quot;: {
                            &quot;type&quot;: &quot;boolean&quot;
                        },
                        &quot;is_shared&quot;: {
                            &quot;type&quot;: &quot;boolean&quot;
                        },
                        &quot;is_starred&quot;: {
                            &quot;type&quot;: &quot;boolean&quot;
                        },
                        &quot;is_user_deleted&quot;: {
                            &quot;type&quot;: &quot;boolean&quot;
                        },
                        &quot;last_read&quot;: {
                            &quot;$ref&quot;: &quot;#/definitions/defs_ts&quot;
                        },
                        &quot;latest&quot;: {
                            &quot;items&quot;: [
                                {
                                    &quot;$ref&quot;: &quot;#/definitions/objs_message&quot;
                                },
                                {
                                    &quot;type&quot;: &quot;null&quot;
                                }
                            ]
                        },
                        &quot;parent_conversation&quot;: {
                            &quot;items&quot;: [
                                {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_channel&quot;
                                },
                                {
                                    &quot;type&quot;: &quot;null&quot;
                                }
                            ]
                        },
                        &quot;pin_count&quot;: {
                            &quot;type&quot;: &quot;integer&quot;
                        },
                        &quot;priority&quot;: {
                            &quot;type&quot;: &quot;number&quot;
                        },
                        &quot;shares&quot;: {
                            &quot;items&quot;: {
                                &quot;additionalProperties&quot;: false,
                                &quot;properties&quot;: {
                                    &quot;date_create&quot;: {
                                        &quot;type&quot;: &quot;integer&quot;
                                    },
                                    &quot;id&quot;: {
                                        &quot;$ref&quot;: &quot;#/definitions/defs_team&quot;
                                    },
                                    &quot;is_active&quot;: {
                                        &quot;type&quot;: &quot;boolean&quot;
                                    },
                                    &quot;name&quot;: {
                                        &quot;type&quot;: &quot;string&quot;
                                    },
                                    &quot;team&quot;: {
                                        &quot;$ref&quot;: &quot;#/definitions/objs_team&quot;
                                    }
                                },
                                &quot;required&quot;: [
                                    &quot;id&quot;,
                                    &quot;name&quot;,
                                    &quot;team&quot;,
                                    &quot;date_create&quot;,
                                    &quot;is_active&quot;
                                ],
                                &quot;type&quot;: &quot;object&quot;
                            },
                            &quot;minItems&quot;: 0,
                            &quot;type&quot;: &quot;array&quot;,
                            &quot;uniqueItems&quot;: true
                        },
                        &quot;unread_count&quot;: {
                            &quot;type&quot;: &quot;integer&quot;
                        },
                        &quot;unread_count_display&quot;: {
                            &quot;type&quot;: &quot;integer&quot;
                        },
                        &quot;user&quot;: {
                            &quot;$ref&quot;: &quot;#/definitions/defs_user_id&quot;
                        },
                        &quot;version&quot;: {
                            &quot;type&quot;: &quot;integer&quot;
                        }
                    },
                    &quot;required&quot;: [
                        &quot;id&quot;,
                        &quot;created&quot;,
                        &quot;is_im&quot;,
                        &quot;is_org_shared&quot;,
                        &quot;user&quot;,
                        &quot;priority&quot;
                    ],
                    &quot;title&quot;: &quot;Conversation IM Channel Object from conversations.* methods&quot;,
                    &quot;type&quot;: &quot;object&quot;
                }
            ]
        },
        &quot;objs_enterprise_user&quot;: {
            &quot;additionalProperties&quot;: false,
            &quot;properties&quot;: {
                &quot;enterprise_id&quot;: {
                    &quot;$ref&quot;: &quot;#/definitions/defs_enterprise_id&quot;
                },
                &quot;enterprise_name&quot;: {
                    &quot;$ref&quot;: &quot;#/definitions/defs_enterprise_name&quot;
                },
                &quot;id&quot;: {
                    &quot;$ref&quot;: &quot;#/definitions/defs_enterprise_user_id&quot;
                },
                &quot;is_admin&quot;: {
                    &quot;type&quot;: &quot;boolean&quot;
                },
                &quot;is_owner&quot;: {
                    &quot;type&quot;: &quot;boolean&quot;
                },
                &quot;teams&quot;: {
                    &quot;items&quot;: {
                        &quot;$ref&quot;: &quot;#/definitions/defs_team&quot;
                    },
                    &quot;type&quot;: &quot;array&quot;,
                    &quot;uniqueItems&quot;: true
                }
            },
            &quot;required&quot;: [
                &quot;id&quot;,
                &quot;enterprise_id&quot;,
                &quot;enterprise_name&quot;,
                &quot;is_admin&quot;,
                &quot;is_owner&quot;,
                &quot;teams&quot;
            ],
            &quot;type&quot;: &quot;object&quot;
        },
        &quot;objs_external_org_migrations&quot;: {
            &quot;properties&quot;: {
                &quot;current&quot;: {
                    &quot;items&quot;: {
                        &quot;properties&quot;: {
                            &quot;date_started&quot;: {
                                &quot;type&quot;: &quot;integer&quot;
                            },
                            &quot;team_id&quot;: {
                                &quot;type&quot;: &quot;string&quot;
                            }
                        },
                        &quot;required&quot;: [
                            &quot;team_id&quot;,
                            &quot;date_started&quot;
                        ],
                        &quot;type&quot;: &quot;object&quot;
                    },
                    &quot;type&quot;: &quot;array&quot;
                },
                &quot;date_updated&quot;: {
                    &quot;type&quot;: &quot;integer&quot;
                }
            },
            &quot;required&quot;: [
                &quot;date_updated&quot;,
                &quot;current&quot;
            ],
            &quot;title&quot;: &quot;External Org Migrations&quot;,
            &quot;type&quot;: &quot;object&quot;
        },
        &quot;objs_file&quot;: {
            &quot;additionalProperties&quot;: false,
            &quot;properties&quot;: {
                &quot;channels&quot;: {
                    &quot;items&quot;: {
                        &quot;$ref&quot;: &quot;#/definitions/defs_channel_id&quot;
                    },
                    &quot;type&quot;: &quot;array&quot;,
                    &quot;uniqueItems&quot;: true
                },
                &quot;comments_count&quot;: {
                    &quot;type&quot;: &quot;integer&quot;
                },
                &quot;created&quot;: {
                    &quot;type&quot;: &quot;integer&quot;
                },
                &quot;date_delete&quot;: {
                    &quot;type&quot;: &quot;integer&quot;
                },
                &quot;display_as_bot&quot;: {
                    &quot;type&quot;: &quot;boolean&quot;
                },
                &quot;editable&quot;: {
                    &quot;type&quot;: &quot;boolean&quot;
                },
                &quot;editor&quot;: {
                    &quot;$ref&quot;: &quot;#/definitions/defs_user_id&quot;
                },
                &quot;external_id&quot;: {
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;external_type&quot;: {
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;external_url&quot;: {
                    &quot;format&quot;: &quot;uri&quot;,
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;filetype&quot;: {
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;groups&quot;: {
                    &quot;items&quot;: {
                        &quot;$ref&quot;: &quot;#/definitions/defs_group_id&quot;
                    },
                    &quot;type&quot;: &quot;array&quot;,
                    &quot;uniqueItems&quot;: true
                },
                &quot;has_rich_preview&quot;: {
                    &quot;type&quot;: &quot;boolean&quot;
                },
                &quot;id&quot;: {
                    &quot;$ref&quot;: &quot;#/definitions/defs_file_id&quot;
                },
                &quot;image_exif_rotation&quot;: {
                    &quot;type&quot;: &quot;integer&quot;
                },
                &quot;ims&quot;: {
                    &quot;items&quot;: {
                        &quot;$ref&quot;: &quot;#/definitions/defs_dm_id&quot;
                    },
                    &quot;type&quot;: &quot;array&quot;,
                    &quot;uniqueItems&quot;: true
                },
                &quot;is_external&quot;: {
                    &quot;type&quot;: &quot;boolean&quot;
                },
                &quot;is_public&quot;: {
                    &quot;type&quot;: &quot;boolean&quot;
                },
                &quot;is_starred&quot;: {
                    &quot;type&quot;: &quot;boolean&quot;
                },
                &quot;is_tombstoned&quot;: {
                    &quot;type&quot;: &quot;boolean&quot;
                },
                &quot;last_editor&quot;: {
                    &quot;$ref&quot;: &quot;#/definitions/defs_user_id&quot;
                },
                &quot;mimetype&quot;: {
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;mode&quot;: {
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;name&quot;: {
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;non_owner_editable&quot;: {
                    &quot;type&quot;: &quot;boolean&quot;
                },
                &quot;num_stars&quot;: {
                    &quot;type&quot;: &quot;integer&quot;
                },
                &quot;original_h&quot;: {
                    &quot;type&quot;: &quot;integer&quot;
                },
                &quot;original_w&quot;: {
                    &quot;type&quot;: &quot;integer&quot;
                },
                &quot;permalink&quot;: {
                    &quot;format&quot;: &quot;uri&quot;,
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;permalink_public&quot;: {
                    &quot;format&quot;: &quot;uri&quot;,
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;pinned_info&quot;: {
                    &quot;$ref&quot;: &quot;#/definitions/defs_pinned_info&quot;
                },
                &quot;pinned_to&quot;: {
                    &quot;items&quot;: {
                        &quot;$ref&quot;: &quot;#/definitions/defs_channel&quot;
                    },
                    &quot;type&quot;: &quot;array&quot;
                },
                &quot;pretty_type&quot;: {
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;preview&quot;: {
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;public_url_shared&quot;: {
                    &quot;type&quot;: &quot;boolean&quot;
                },
                &quot;reactions&quot;: {
                    &quot;items&quot;: {
                        &quot;$ref&quot;: &quot;#/definitions/objs_reaction&quot;
                    },
                    &quot;type&quot;: &quot;array&quot;
                },
                &quot;shares&quot;: {
                    &quot;additionalProperties&quot;: false,
                    &quot;properties&quot;: {
                        &quot;private&quot;: {
                            &quot;additionalProperties&quot;: false
                        },
                        &quot;public&quot;: {
                            &quot;additionalProperties&quot;: false
                        }
                    },
                    &quot;type&quot;: &quot;object&quot;
                },
                &quot;size&quot;: {
                    &quot;type&quot;: &quot;integer&quot;
                },
                &quot;source_team&quot;: {
                    &quot;$ref&quot;: &quot;#/definitions/defs_team&quot;
                },
                &quot;state&quot;: {
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;thumb_1024&quot;: {
                    &quot;format&quot;: &quot;uri&quot;,
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;thumb_1024_h&quot;: {
                    &quot;type&quot;: &quot;integer&quot;
                },
                &quot;thumb_1024_w&quot;: {
                    &quot;type&quot;: &quot;integer&quot;
                },
                &quot;thumb_160&quot;: {
                    &quot;format&quot;: &quot;uri&quot;,
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;thumb_360&quot;: {
                    &quot;format&quot;: &quot;uri&quot;,
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;thumb_360_h&quot;: {
                    &quot;type&quot;: &quot;integer&quot;
                },
                &quot;thumb_360_w&quot;: {
                    &quot;type&quot;: &quot;integer&quot;
                },
                &quot;thumb_480&quot;: {
                    &quot;format&quot;: &quot;uri&quot;,
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;thumb_480_h&quot;: {
                    &quot;type&quot;: &quot;integer&quot;
                },
                &quot;thumb_480_w&quot;: {
                    &quot;type&quot;: &quot;integer&quot;
                },
                &quot;thumb_64&quot;: {
                    &quot;format&quot;: &quot;uri&quot;,
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;thumb_720&quot;: {
                    &quot;format&quot;: &quot;uri&quot;,
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;thumb_720_h&quot;: {
                    &quot;type&quot;: &quot;integer&quot;
                },
                &quot;thumb_720_w&quot;: {
                    &quot;type&quot;: &quot;integer&quot;
                },
                &quot;thumb_80&quot;: {
                    &quot;format&quot;: &quot;uri&quot;,
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;thumb_800&quot;: {
                    &quot;format&quot;: &quot;uri&quot;,
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;thumb_800_h&quot;: {
                    &quot;type&quot;: &quot;integer&quot;
                },
                &quot;thumb_800_w&quot;: {
                    &quot;type&quot;: &quot;integer&quot;
                },
                &quot;thumb_960&quot;: {
                    &quot;format&quot;: &quot;uri&quot;,
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;thumb_960_h&quot;: {
                    &quot;type&quot;: &quot;integer&quot;
                },
                &quot;thumb_960_w&quot;: {
                    &quot;type&quot;: &quot;integer&quot;
                },
                &quot;thumb_tiny&quot;: {
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;timestamp&quot;: {
                    &quot;type&quot;: &quot;integer&quot;
                },
                &quot;title&quot;: {
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;updated&quot;: {
                    &quot;type&quot;: &quot;integer&quot;
                },
                &quot;url_private&quot;: {
                    &quot;format&quot;: &quot;uri&quot;,
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;url_private_download&quot;: {
                    &quot;format&quot;: &quot;uri&quot;,
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;user&quot;: {
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;user_team&quot;: {
                    &quot;$ref&quot;: &quot;#/definitions/defs_team&quot;
                },
                &quot;username&quot;: {
                    &quot;type&quot;: &quot;string&quot;
                }
            },
            &quot;title&quot;: &quot;file object&quot;,
            &quot;type&quot;: &quot;object&quot;
        },
        &quot;objs_icon&quot;: {
            &quot;properties&quot;: {
                &quot;image_102&quot;: {
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;image_132&quot;: {
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;image_230&quot;: {
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;image_34&quot;: {
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;image_44&quot;: {
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;image_68&quot;: {
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;image_88&quot;: {
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;image_default&quot;: {
                    &quot;type&quot;: &quot;boolean&quot;
                }
            },
            &quot;type&quot;: &quot;object&quot;
        },
        &quot;objs_message&quot;: {
            &quot;additionalProperties&quot;: false,
            &quot;properties&quot;: {
                &quot;attachments&quot;: {
                    &quot;items&quot;: {
                        &quot;additionalProperties&quot;: false,
                        &quot;properties&quot;: {
                            &quot;fallback&quot;: {
                                &quot;type&quot;: &quot;string&quot;
                            },
                            &quot;id&quot;: {
                                &quot;type&quot;: &quot;integer&quot;
                            },
                            &quot;image_bytes&quot;: {
                                &quot;type&quot;: &quot;integer&quot;
                            },
                            &quot;image_height&quot;: {
                                &quot;type&quot;: &quot;integer&quot;
                            },
                            &quot;image_url&quot;: {
                                &quot;type&quot;: &quot;string&quot;
                            },
                            &quot;image_width&quot;: {
                                &quot;type&quot;: &quot;integer&quot;
                            }
                        },
                        &quot;required&quot;: [
                            &quot;id&quot;
                        ],
                        &quot;type&quot;: &quot;object&quot;
                    },
                    &quot;minItems&quot;: 1,
                    &quot;type&quot;: &quot;array&quot;,
                    &quot;uniqueItems&quot;: true
                },
                &quot;blocks&quot;: {
                    &quot;$ref&quot;: &quot;#/definitions/blocks&quot;
                },
                &quot;bot_id&quot;: {
                    &quot;items&quot;: [
                        {
                            &quot;$ref&quot;: &quot;#/definitions/defs_bot_id&quot;
                        },
                        {
                            &quot;title&quot;: &quot;Nil bot_id set when display_as_bot is false&quot;,
                            &quot;type&quot;: &quot;null&quot;
                        }
                    ]
                },
                &quot;bot_profile&quot;: {
                    &quot;$ref&quot;: &quot;#/definitions/objs_bot_profile&quot;
                },
                &quot;client_msg_id&quot;: {
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;comment&quot;: {
                    &quot;$ref&quot;: &quot;#/definitions/objs_comment&quot;
                },
                &quot;display_as_bot&quot;: {
                    &quot;type&quot;: &quot;boolean&quot;
                },
                &quot;file&quot;: {
                    &quot;$ref&quot;: &quot;#/definitions/objs_file&quot;
                },
                &quot;files&quot;: {
                    &quot;items&quot;: {
                        &quot;$ref&quot;: &quot;#/definitions/objs_file&quot;
                    },
                    &quot;minItems&quot;: 1,
                    &quot;type&quot;: &quot;array&quot;,
                    &quot;uniqueItems&quot;: true
                },
                &quot;icons&quot;: {
                    &quot;additionalProperties&quot;: false,
                    &quot;properties&quot;: {
                        &quot;emoji&quot;: {
                            &quot;type&quot;: &quot;string&quot;
                        },
                        &quot;image_64&quot;: {
                            &quot;format&quot;: &quot;uri&quot;,
                            &quot;type&quot;: &quot;string&quot;
                        }
                    },
                    &quot;type&quot;: &quot;object&quot;
                },
                &quot;inviter&quot;: {
                    &quot;$ref&quot;: &quot;#/definitions/defs_user_id&quot;
                },
                &quot;is_delayed_message&quot;: {
                    &quot;type&quot;: &quot;boolean&quot;
                },
                &quot;is_intro&quot;: {
                    &quot;type&quot;: &quot;boolean&quot;
                },
                &quot;is_starred&quot;: {
                    &quot;type&quot;: &quot;boolean&quot;
                },
                &quot;last_read&quot;: {
                    &quot;$ref&quot;: &quot;#/definitions/defs_ts&quot;
                },
                &quot;latest_reply&quot;: {
                    &quot;$ref&quot;: &quot;#/definitions/defs_ts&quot;
                },
                &quot;name&quot;: {
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;old_name&quot;: {
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;parent_user_id&quot;: {
                    &quot;$ref&quot;: &quot;#/definitions/defs_user_id&quot;
                },
                &quot;permalink&quot;: {
                    &quot;format&quot;: &quot;uri&quot;,
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;pinned_to&quot;: {
                    &quot;items&quot;: {
                        &quot;$ref&quot;: &quot;#/definitions/defs_channel&quot;
                    },
                    &quot;type&quot;: &quot;array&quot;
                },
                &quot;purpose&quot;: {
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;reactions&quot;: {
                    &quot;items&quot;: {
                        &quot;$ref&quot;: &quot;#/definitions/objs_reaction&quot;
                    },
                    &quot;type&quot;: &quot;array&quot;
                },
                &quot;reply_count&quot;: {
                    &quot;type&quot;: &quot;integer&quot;
                },
                &quot;reply_users&quot;: {
                    &quot;items&quot;: {
                        &quot;$ref&quot;: &quot;#/definitions/defs_user_id&quot;
                    },
                    &quot;minItems&quot;: 1,
                    &quot;type&quot;: &quot;array&quot;,
                    &quot;uniqueItems&quot;: true
                },
                &quot;reply_users_count&quot;: {
                    &quot;type&quot;: &quot;integer&quot;
                },
                &quot;source_team&quot;: {
                    &quot;$ref&quot;: &quot;#/definitions/defs_workspace_id&quot;
                },
                &quot;subscribed&quot;: {
                    &quot;type&quot;: &quot;boolean&quot;
                },
                &quot;subtype&quot;: {
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;team&quot;: {
                    &quot;$ref&quot;: &quot;#/definitions/defs_workspace_id&quot;
                },
                &quot;text&quot;: {
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;thread_ts&quot;: {
                    &quot;$ref&quot;: &quot;#/definitions/defs_ts&quot;
                },
                &quot;topic&quot;: {
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;ts&quot;: {
                    &quot;$ref&quot;: &quot;#/definitions/defs_ts&quot;
                },
                &quot;type&quot;: {
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;unread_count&quot;: {
                    &quot;type&quot;: &quot;integer&quot;
                },
                &quot;upload&quot;: {
                    &quot;type&quot;: &quot;boolean&quot;
                },
                &quot;user&quot;: {
                    &quot;$ref&quot;: &quot;#/definitions/defs_user_id&quot;
                },
                &quot;user_profile&quot;: {
                    &quot;$ref&quot;: &quot;#/definitions/objs_user_profile_short&quot;
                },
                &quot;user_team&quot;: {
                    &quot;$ref&quot;: &quot;#/definitions/defs_workspace_id&quot;
                },
                &quot;username&quot;: {
                    &quot;type&quot;: &quot;string&quot;
                }
            },
            &quot;required&quot;: [
                &quot;text&quot;,
                &quot;type&quot;,
                &quot;ts&quot;
            ],
            &quot;title&quot;: &quot;Message object&quot;,
            &quot;type&quot;: &quot;object&quot;
        },
        &quot;objs_paging&quot;: {
            &quot;additionalProperties&quot;: false,
            &quot;properties&quot;: {
                &quot;count&quot;: {
                    &quot;type&quot;: &quot;integer&quot;
                },
                &quot;page&quot;: {
                    &quot;type&quot;: &quot;integer&quot;
                },
                &quot;pages&quot;: {
                    &quot;type&quot;: &quot;integer&quot;
                },
                &quot;per_page&quot;: {
                    &quot;type&quot;: &quot;integer&quot;
                },
                &quot;spill&quot;: {
                    &quot;type&quot;: &quot;integer&quot;
                },
                &quot;total&quot;: {
                    &quot;type&quot;: &quot;integer&quot;
                }
            },
            &quot;required&quot;: [
                &quot;page&quot;,
                &quot;total&quot;
            ],
            &quot;title&quot;: &quot;paging object&quot;,
            &quot;type&quot;: &quot;object&quot;
        },
        &quot;objs_primary_owner&quot;: {
            &quot;properties&quot;: {
                &quot;email&quot;: {
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;id&quot;: {
                    &quot;type&quot;: &quot;string&quot;
                }
            },
            &quot;required&quot;: [
                &quot;id&quot;,
                &quot;email&quot;
            ],
            &quot;type&quot;: &quot;object&quot;
        },
        &quot;objs_reaction&quot;: {
            &quot;additionalProperties&quot;: true,
            &quot;properties&quot;: {
                &quot;count&quot;: {
                    &quot;type&quot;: &quot;integer&quot;
                },
                &quot;name&quot;: {
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;users&quot;: {
                    &quot;items&quot;: {
                        &quot;$ref&quot;: &quot;#/definitions/defs_user_id&quot;
                    },
                    &quot;type&quot;: &quot;array&quot;
                }
            },
            &quot;required&quot;: [
                &quot;name&quot;,
                &quot;users&quot;,
                &quot;count&quot;
            ],
            &quot;title&quot;: &quot;Reaction object&quot;,
            &quot;type&quot;: &quot;object&quot;
        },
        &quot;objs_reminder&quot;: {
            &quot;additionalProperties&quot;: false,
            &quot;properties&quot;: {
                &quot;complete_ts&quot;: {
                    &quot;type&quot;: &quot;integer&quot;
                },
                &quot;creator&quot;: {
                    &quot;$ref&quot;: &quot;#/definitions/defs_user_id&quot;
                },
                &quot;id&quot;: {
                    &quot;$ref&quot;: &quot;#/definitions/defs_reminder_id&quot;
                },
                &quot;recurring&quot;: {
                    &quot;type&quot;: &quot;boolean&quot;
                },
                &quot;text&quot;: {
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;time&quot;: {
                    &quot;type&quot;: &quot;integer&quot;
                },
                &quot;user&quot;: {
                    &quot;$ref&quot;: &quot;#/definitions/defs_user_id&quot;
                }
            },
            &quot;required&quot;: [
                &quot;id&quot;,
                &quot;creator&quot;,
                &quot;user&quot;,
                &quot;text&quot;,
                &quot;recurring&quot;
            ],
            &quot;type&quot;: &quot;object&quot;
        },
        &quot;objs_resources&quot;: {
            &quot;additionalProperties&quot;: false,
            &quot;properties&quot;: {
                &quot;excluded_ids&quot;: {
                    &quot;items&quot;: {
                        &quot;items&quot;: [
                            {
                                &quot;$ref&quot;: &quot;#/definitions/defs_channel&quot;
                            },
                            {
                                &quot;$ref&quot;: &quot;#/definitions/defs_team&quot;
                            }
                        ]
                    },
                    &quot;type&quot;: &quot;array&quot;
                },
                &quot;ids&quot;: {
                    &quot;items&quot;: {
                        &quot;items&quot;: [
                            {
                                &quot;$ref&quot;: &quot;#/definitions/defs_channel&quot;
                            },
                            {
                                &quot;$ref&quot;: &quot;#/definitions/defs_team&quot;
                            }
                        ]
                    },
                    &quot;type&quot;: &quot;array&quot;
                },
                &quot;wildcard&quot;: {
                    &quot;type&quot;: &quot;boolean&quot;
                }
            },
            &quot;required&quot;: [
                &quot;ids&quot;
            ],
            &quot;title&quot;: &quot;resources in info from apps.permissions.info&quot;,
            &quot;type&quot;: &quot;object&quot;
        },
        &quot;objs_response_metadata&quot;: {
            &quot;items&quot;: [
                {
                    &quot;additionalProperties&quot;: false,
                    &quot;properties&quot;: {
                        &quot;next_cursor&quot;: {
                            &quot;type&quot;: &quot;string&quot;
                        }
                    },
                    &quot;required&quot;: [
                        &quot;next_cursor&quot;
                    ],
                    &quot;title&quot;: &quot;new paging style&quot;,
                    &quot;type&quot;: &quot;object&quot;
                },
                {
                    &quot;additionalProperties&quot;: false,
                    &quot;properties&quot;: {
                        &quot;messages&quot;: {
                            &quot;items&quot;: {
                                &quot;type&quot;: &quot;string&quot;
                            },
                            &quot;type&quot;: &quot;array&quot;
                        },
                        &quot;warnings&quot;: {
                            &quot;items&quot;: {
                                &quot;enum&quot;: [
                                    &quot;method_deprecated&quot;
                                ],
                                &quot;type&quot;: &quot;string&quot;
                            },
                            &quot;type&quot;: &quot;array&quot;
                        }
                    },
                    &quot;required&quot;: [
                        &quot;messages&quot;,
                        &quot;warnings&quot;
                    ],
                    &quot;title&quot;: &quot;deprecation_warning&quot;,
                    &quot;type&quot;: &quot;object&quot;
                },
                {
                    &quot;additionalProperties&quot;: false,
                    &quot;properties&quot;: {
                        &quot;messages&quot;: {
                            &quot;items&quot;: {
                                &quot;type&quot;: &quot;string&quot;
                            },
                            &quot;type&quot;: &quot;array&quot;
                        },
                        &quot;next_cursor&quot;: {
                            &quot;type&quot;: &quot;string&quot;
                        },
                        &quot;warnings&quot;: {
                            &quot;items&quot;: {
                                &quot;enum&quot;: [
                                    &quot;method_deprecated&quot;
                                ],
                                &quot;type&quot;: &quot;string&quot;
                            },
                            &quot;type&quot;: &quot;array&quot;
                        }
                    },
                    &quot;required&quot;: [
                        &quot;messages&quot;,
                        &quot;warnings&quot;,
                        &quot;next_cursor&quot;
                    ],
                    &quot;title&quot;: &quot;deprecation_warning and paging style together&quot;,
                    &quot;type&quot;: &quot;object&quot;
                }
            ]
        },
        &quot;objs_scopes&quot;: {
            &quot;items&quot;: {
                &quot;title&quot;: &quot;Named OAuth scopes&quot;,
                &quot;type&quot;: &quot;string&quot;,
                &quot;x-examples&quot;: [
                    &quot;chat:write&quot;,
                    &quot;im:history&quot;,
                    &quot;im:read&quot;
                ]
            },
            &quot;type&quot;: &quot;array&quot;
        },
        &quot;objs_subteam&quot;: {
            &quot;additionalProperties&quot;: false,
            &quot;properties&quot;: {
                &quot;auto_provision&quot;: {
                    &quot;type&quot;: &quot;boolean&quot;
                },
                &quot;auto_type&quot;: {
                    &quot;items&quot;: [
                        {
                            &quot;type&quot;: &quot;null&quot;
                        },
                        {
                            &quot;enum&quot;: [
                                &quot;owner&quot;,
                                &quot;admin&quot;
                            ],
                            &quot;type&quot;: &quot;string&quot;
                        }
                    ]
                },
                &quot;channel_count&quot;: {
                    &quot;type&quot;: &quot;integer&quot;
                },
                &quot;created_by&quot;: {
                    &quot;$ref&quot;: &quot;#/definitions/defs_user_id&quot;
                },
                &quot;date_create&quot;: {
                    &quot;type&quot;: &quot;integer&quot;
                },
                &quot;date_delete&quot;: {
                    &quot;type&quot;: &quot;integer&quot;
                },
                &quot;date_update&quot;: {
                    &quot;type&quot;: &quot;integer&quot;
                },
                &quot;deleted_by&quot;: {
                    &quot;items&quot;: [
                        {
                            &quot;type&quot;: &quot;null&quot;
                        },
                        {
                            &quot;$ref&quot;: &quot;#/definitions/defs_user_id&quot;
                        }
                    ]
                },
                &quot;description&quot;: {
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;enterprise_subteam_id&quot;: {
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;handle&quot;: {
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;id&quot;: {
                    &quot;$ref&quot;: &quot;#/definitions/defs_subteam_id&quot;
                },
                &quot;is_external&quot;: {
                    &quot;type&quot;: &quot;boolean&quot;
                },
                &quot;is_subteam&quot;: {
                    &quot;type&quot;: &quot;boolean&quot;
                },
                &quot;is_usergroup&quot;: {
                    &quot;type&quot;: &quot;boolean&quot;
                },
                &quot;name&quot;: {
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;prefs&quot;: {
                    &quot;additionalProperties&quot;: false,
                    &quot;properties&quot;: {
                        &quot;channels&quot;: {
                            &quot;items&quot;: {
                                &quot;$ref&quot;: &quot;#/definitions/defs_channel_id&quot;
                            },
                            &quot;type&quot;: &quot;array&quot;
                        },
                        &quot;groups&quot;: {
                            &quot;items&quot;: {
                                &quot;$ref&quot;: &quot;#/definitions/defs_group_id&quot;
                            },
                            &quot;type&quot;: &quot;array&quot;
                        }
                    },
                    &quot;required&quot;: [
                        &quot;channels&quot;,
                        &quot;groups&quot;
                    ],
                    &quot;type&quot;: &quot;object&quot;
                },
                &quot;team_id&quot;: {
                    &quot;$ref&quot;: &quot;#/definitions/defs_team&quot;
                },
                &quot;updated_by&quot;: {
                    &quot;$ref&quot;: &quot;#/definitions/defs_user_id&quot;
                },
                &quot;user_count&quot;: {
                    &quot;type&quot;: &quot;integer&quot;
                },
                &quot;users&quot;: {
                    &quot;items&quot;: {
                        &quot;$ref&quot;: &quot;#/definitions/defs_user_id&quot;
                    },
                    &quot;type&quot;: &quot;array&quot;
                }
            },
            &quot;required&quot;: [
                &quot;id&quot;,
                &quot;team_id&quot;,
                &quot;is_usergroup&quot;,
                &quot;is_subteam&quot;,
                &quot;name&quot;,
                &quot;description&quot;,
                &quot;handle&quot;,
                &quot;is_external&quot;,
                &quot;date_create&quot;,
                &quot;date_update&quot;,
                &quot;date_delete&quot;,
                &quot;auto_type&quot;,
                &quot;auto_provision&quot;,
                &quot;enterprise_subteam_id&quot;,
                &quot;created_by&quot;,
                &quot;updated_by&quot;,
                &quot;deleted_by&quot;,
                &quot;prefs&quot;
            ],
            &quot;title&quot;: &quot;Subteam/Usergroup Object&quot;,
            &quot;type&quot;: &quot;object&quot;
        },
        &quot;objs_team&quot;: {
            &quot;additionalProperties&quot;: false,
            &quot;properties&quot;: {
                &quot;archived&quot;: {
                    &quot;type&quot;: &quot;boolean&quot;
                },
                &quot;avatar_base_url&quot;: {
                    &quot;format&quot;: &quot;uri&quot;,
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;created&quot;: {
                    &quot;type&quot;: &quot;integer&quot;
                },
                &quot;date_create&quot;: {
                    &quot;type&quot;: &quot;integer&quot;
                },
                &quot;deleted&quot;: {
                    &quot;type&quot;: &quot;boolean&quot;
                },
                &quot;description&quot;: {
                    &quot;type&quot;: [
                        &quot;null&quot;,
                        &quot;string&quot;
                    ]
                },
                &quot;discoverable&quot;: {
                    &quot;items&quot;: [
                        {
                            &quot;type&quot;: &quot;null&quot;
                        },
                        {
                            &quot;type&quot;: &quot;string&quot;
                        }
                    ]
                },
                &quot;domain&quot;: {
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;email_domain&quot;: {
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;enterprise_id&quot;: {
                    &quot;$ref&quot;: &quot;#/definitions/defs_enterprise_id&quot;
                },
                &quot;enterprise_name&quot;: {
                    &quot;$ref&quot;: &quot;#/definitions/defs_enterprise_name&quot;
                },
                &quot;external_org_migrations&quot;: {
                    &quot;$ref&quot;: &quot;#/definitions/objs_external_org_migrations&quot;
                },
                &quot;has_compliance_export&quot;: {
                    &quot;type&quot;: &quot;boolean&quot;
                },
                &quot;icon&quot;: {
                    &quot;$ref&quot;: &quot;#/definitions/objs_icon&quot;
                },
                &quot;id&quot;: {
                    &quot;$ref&quot;: &quot;#/definitions/defs_workspace_id&quot;
                },
                &quot;is_assigned&quot;: {
                    &quot;type&quot;: &quot;boolean&quot;
                },
                &quot;is_enterprise&quot;: {
                    &quot;type&quot;: &quot;integer&quot;
                },
                &quot;is_over_storage_limit&quot;: {
                    &quot;type&quot;: &quot;boolean&quot;
                },
                &quot;limit_ts&quot;: {
                    &quot;type&quot;: &quot;integer&quot;
                },
                &quot;locale&quot;: {
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;messages_count&quot;: {
                    &quot;type&quot;: &quot;integer&quot;
                },
                &quot;msg_edit_window_mins&quot;: {
                    &quot;type&quot;: &quot;integer&quot;
                },
                &quot;name&quot;: {
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;over_integrations_limit&quot;: {
                    &quot;type&quot;: &quot;boolean&quot;
                },
                &quot;over_storage_limit&quot;: {
                    &quot;type&quot;: &quot;boolean&quot;
                },
                &quot;pay_prod_cur&quot;: {
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;plan&quot;: {
                    &quot;enum&quot;: [
                        &quot;&quot;,
                        &quot;std&quot;,
                        &quot;plus&quot;,
                        &quot;compliance&quot;,
                        &quot;enterprise&quot;
                    ],
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;primary_owner&quot;: {
                    &quot;$ref&quot;: &quot;#/definitions/objs_primary_owner&quot;
                },
                &quot;sso_provider&quot;: {
                    &quot;properties&quot;: {
                        &quot;label&quot;: {
                            &quot;type&quot;: &quot;string&quot;
                        },
                        &quot;name&quot;: {
                            &quot;type&quot;: &quot;string&quot;
                        },
                        &quot;type&quot;: {
                            &quot;type&quot;: &quot;string&quot;
                        }
                    },
                    &quot;type&quot;: &quot;object&quot;
                }
            },
            &quot;required&quot;: [
                &quot;id&quot;,
                &quot;name&quot;,
                &quot;domain&quot;,
                &quot;email_domain&quot;,
                &quot;icon&quot;
            ],
            &quot;title&quot;: &quot;Team Object&quot;,
            &quot;type&quot;: &quot;object&quot;
        },
        &quot;objs_team_profile_field&quot;: {
            &quot;additionalProperties&quot;: false,
            &quot;properties&quot;: {
                &quot;field_name&quot;: {
                    &quot;type&quot;: [
                        &quot;null&quot;,
                        &quot;string&quot;
                    ]
                },
                &quot;hint&quot;: {
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;id&quot;: {
                    &quot;pattern&quot;: &quot;^X[a-zA-Z0-9]{9,}$&quot;,
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;is_hidden&quot;: {
                    &quot;type&quot;: &quot;boolean&quot;
                },
                &quot;label&quot;: {
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;options&quot;: {
                    &quot;items&quot;: [
                        {
                            &quot;type&quot;: &quot;null&quot;
                        },
                        {
                            &quot;$ref&quot;: &quot;#/definitions/objs_team_profile_field_option&quot;
                        }
                    ]
                },
                &quot;ordering&quot;: {
                    &quot;type&quot;: &quot;number&quot;
                },
                &quot;possible_values&quot;: {
                    &quot;items&quot;: {
                        &quot;type&quot;: &quot;string&quot;
                    },
                    &quot;type&quot;: [
                        &quot;null&quot;,
                        &quot;array&quot;
                    ]
                },
                &quot;type&quot;: {
                    &quot;enum&quot;: [
                        &quot;text&quot;,
                        &quot;date&quot;,
                        &quot;link&quot;,
                        &quot;mailto&quot;,
                        &quot;options_list&quot;,
                        &quot;user&quot;
                    ],
                    &quot;type&quot;: &quot;string&quot;
                }
            },
            &quot;required&quot;: [
                &quot;id&quot;,
                &quot;ordering&quot;,
                &quot;label&quot;,
                &quot;hint&quot;,
                &quot;type&quot;
            ],
            &quot;type&quot;: &quot;object&quot;
        },
        &quot;objs_team_profile_field_option&quot;: {
            &quot;additionalProperties&quot;: false,
            &quot;properties&quot;: {
                &quot;is_custom&quot;: {
                    &quot;type&quot;: [
                        &quot;null&quot;,
                        &quot;boolean&quot;
                    ]
                },
                &quot;is_multiple_entry&quot;: {
                    &quot;type&quot;: [
                        &quot;null&quot;,
                        &quot;boolean&quot;
                    ]
                },
                &quot;is_protected&quot;: {
                    &quot;type&quot;: [
                        &quot;null&quot;,
                        &quot;boolean&quot;
                    ]
                },
                &quot;is_scim&quot;: {
                    &quot;type&quot;: [
                        &quot;null&quot;,
                        &quot;boolean&quot;
                    ]
                }
            },
            &quot;type&quot;: &quot;object&quot;
        },
        &quot;objs_user&quot;: {
            &quot;items&quot;: [
                {
                    &quot;additionalProperties&quot;: false,
                    &quot;description&quot;: &quot;user object for non enterprise type&quot;,
                    &quot;properties&quot;: {
                        &quot;color&quot;: {
                            &quot;pattern&quot;: &quot;^[a-fA-F0-9]{6}$&quot;,
                            &quot;type&quot;: &quot;string&quot;
                        },
                        &quot;deleted&quot;: {
                            &quot;type&quot;: &quot;boolean&quot;
                        },
                        &quot;enterprise_user&quot;: {
                            &quot;$ref&quot;: &quot;#/definitions/objs_enterprise_user&quot;
                        },
                        &quot;has_2fa&quot;: {
                            &quot;type&quot;: &quot;boolean&quot;
                        },
                        &quot;id&quot;: {
                            &quot;$ref&quot;: &quot;#/definitions/defs_user_id&quot;
                        },
                        &quot;is_admin&quot;: {
                            &quot;type&quot;: &quot;boolean&quot;
                        },
                        &quot;is_app_user&quot;: {
                            &quot;type&quot;: &quot;boolean&quot;
                        },
                        &quot;is_bot&quot;: {
                            &quot;type&quot;: &quot;boolean&quot;
                        },
                        &quot;is_external&quot;: {
                            &quot;type&quot;: &quot;boolean&quot;
                        },
                        &quot;is_forgotten&quot;: {
                            &quot;type&quot;: &quot;boolean&quot;
                        },
                        &quot;is_invited_user&quot;: {
                            &quot;type&quot;: &quot;boolean&quot;
                        },
                        &quot;is_owner&quot;: {
                            &quot;type&quot;: &quot;boolean&quot;
                        },
                        &quot;is_primary_owner&quot;: {
                            &quot;type&quot;: &quot;boolean&quot;
                        },
                        &quot;is_restricted&quot;: {
                            &quot;type&quot;: &quot;boolean&quot;
                        },
                        &quot;is_stranger&quot;: {
                            &quot;type&quot;: &quot;boolean&quot;
                        },
                        &quot;is_ultra_restricted&quot;: {
                            &quot;type&quot;: &quot;boolean&quot;
                        },
                        &quot;locale&quot;: {
                            &quot;type&quot;: &quot;string&quot;
                        },
                        &quot;name&quot;: {
                            &quot;type&quot;: &quot;string&quot;
                        },
                        &quot;presence&quot;: {
                            &quot;type&quot;: &quot;string&quot;
                        },
                        &quot;profile&quot;: {
                            &quot;$ref&quot;: &quot;#/definitions/objs_user_profile&quot;
                        },
                        &quot;real_name&quot;: {
                            &quot;type&quot;: &quot;string&quot;
                        },
                        &quot;team&quot;: {
                            &quot;$ref&quot;: &quot;#/definitions/defs_workspace_id&quot;
                        },
                        &quot;team_id&quot;: {
                            &quot;$ref&quot;: &quot;#/definitions/defs_workspace_id&quot;
                        },
                        &quot;team_profile&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;properties&quot;: {
                                &quot;fields&quot;: {
                                    &quot;items&quot;: {
                                        &quot;$ref&quot;: &quot;#/definitions/objs_team_profile_field&quot;
                                    },
                                    &quot;minItems&quot;: 1,
                                    &quot;type&quot;: &quot;array&quot;,
                                    &quot;uniqueItems&quot;: true
                                }
                            },
                            &quot;required&quot;: [
                                &quot;fields&quot;
                            ],
                            &quot;type&quot;: &quot;object&quot;
                        },
                        &quot;two_factor_type&quot;: {
                            &quot;type&quot;: &quot;string&quot;
                        },
                        &quot;tz&quot;: {
                            &quot;items&quot;: [
                                {
                                    &quot;type&quot;: &quot;null&quot;
                                },
                                {
                                    &quot;type&quot;: &quot;string&quot;
                                }
                            ]
                        },
                        &quot;tz_label&quot;: {
                            &quot;type&quot;: &quot;string&quot;
                        },
                        &quot;tz_offset&quot;: {
                            &quot;type&quot;: &quot;number&quot;
                        },
                        &quot;updated&quot;: {
                            &quot;type&quot;: &quot;number&quot;
                        }
                    },
                    &quot;required&quot;: [
                        &quot;id&quot;,
                        &quot;name&quot;,
                        &quot;profile&quot;,
                        &quot;is_bot&quot;,
                        &quot;updated&quot;,
                        &quot;is_app_user&quot;
                    ],
                    &quot;type&quot;: &quot;object&quot;
                },
                {
                    &quot;additionalProperties&quot;: false,
                    &quot;description&quot;: &quot;enterprise user&quot;,
                    &quot;properties&quot;: {
                        &quot;color&quot;: {
                            &quot;description&quot;: &quot;refercing to bug: https://jira.tinyspeck.com/browse/EVALUE-1559&quot;,
                            &quot;pattern&quot;: &quot;^([a-fA-F0-9]{6})?$&quot;,
                            &quot;type&quot;: &quot;string&quot;
                        },
                        &quot;deleted&quot;: {
                            &quot;type&quot;: &quot;boolean&quot;
                        },
                        &quot;enterprise_user&quot;: {
                            &quot;$ref&quot;: &quot;#/definitions/objs_enterprise_user&quot;
                        },
                        &quot;has_2fa&quot;: {
                            &quot;type&quot;: &quot;boolean&quot;
                        },
                        &quot;id&quot;: {
                            &quot;$ref&quot;: &quot;#/definitions/defs_user_id&quot;
                        },
                        &quot;is_admin&quot;: {
                            &quot;type&quot;: &quot;boolean&quot;
                        },
                        &quot;is_app_user&quot;: {
                            &quot;type&quot;: &quot;boolean&quot;
                        },
                        &quot;is_bot&quot;: {
                            &quot;type&quot;: &quot;boolean&quot;
                        },
                        &quot;is_external&quot;: {
                            &quot;type&quot;: &quot;boolean&quot;
                        },
                        &quot;is_forgotten&quot;: {
                            &quot;type&quot;: &quot;boolean&quot;
                        },
                        &quot;is_owner&quot;: {
                            &quot;type&quot;: &quot;boolean&quot;
                        },
                        &quot;is_primary_owner&quot;: {
                            &quot;type&quot;: &quot;boolean&quot;
                        },
                        &quot;is_restricted&quot;: {
                            &quot;type&quot;: &quot;boolean&quot;
                        },
                        &quot;is_stranger&quot;: {
                            &quot;type&quot;: &quot;boolean&quot;
                        },
                        &quot;is_ultra_restricted&quot;: {
                            &quot;type&quot;: &quot;boolean&quot;
                        },
                        &quot;locale&quot;: {
                            &quot;type&quot;: &quot;string&quot;
                        },
                        &quot;name&quot;: {
                            &quot;type&quot;: &quot;string&quot;
                        },
                        &quot;presence&quot;: {
                            &quot;type&quot;: &quot;string&quot;
                        },
                        &quot;profile&quot;: {
                            &quot;$ref&quot;: &quot;#/definitions/objs_user_profile&quot;
                        },
                        &quot;real_name&quot;: {
                            &quot;type&quot;: &quot;string&quot;
                        },
                        &quot;team_id&quot;: {
                            &quot;$ref&quot;: &quot;#/definitions/defs_workspace_id&quot;
                        },
                        &quot;team_profile&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;properties&quot;: {
                                &quot;fields&quot;: {
                                    &quot;items&quot;: {
                                        &quot;$ref&quot;: &quot;#/definitions/objs_team_profile_field&quot;
                                    },
                                    &quot;minItems&quot;: 1,
                                    &quot;type&quot;: &quot;array&quot;,
                                    &quot;uniqueItems&quot;: true
                                }
                            },
                            &quot;required&quot;: [
                                &quot;fields&quot;
                            ],
                            &quot;type&quot;: &quot;object&quot;
                        },
                        &quot;teams&quot;: {
                            &quot;items&quot;: {
                                &quot;$ref&quot;: &quot;#/definitions/defs_workspace_id&quot;
                            },
                            &quot;minItems&quot;: 1,
                            &quot;type&quot;: &quot;array&quot;,
                            &quot;uniqueItems&quot;: true
                        },
                        &quot;two_factor_type&quot;: {
                            &quot;type&quot;: &quot;string&quot;
                        },
                        &quot;tz&quot;: {
                            &quot;items&quot;: [
                                {
                                    &quot;type&quot;: &quot;null&quot;
                                },
                                {
                                    &quot;type&quot;: &quot;string&quot;
                                }
                            ]
                        },
                        &quot;tz_label&quot;: {
                            &quot;type&quot;: &quot;string&quot;
                        },
                        &quot;tz_offset&quot;: {
                            &quot;type&quot;: &quot;number&quot;
                        },
                        &quot;updated&quot;: {
                            &quot;type&quot;: &quot;number&quot;
                        }
                    },
                    &quot;required&quot;: [
                        &quot;id&quot;,
                        &quot;name&quot;,
                        &quot;profile&quot;,
                        &quot;is_bot&quot;,
                        &quot;updated&quot;,
                        &quot;is_app_user&quot;
                    ],
                    &quot;type&quot;: &quot;object&quot;
                }
            ]
        },
        &quot;objs_user_profile&quot;: {
            &quot;additionalProperties&quot;: false,
            &quot;properties&quot;: {
                &quot;always_active&quot;: {
                    &quot;type&quot;: &quot;boolean&quot;
                },
                &quot;api_app_id&quot;: {
                    &quot;$ref&quot;: &quot;#/definitions/defs_optional_app_id&quot;
                },
                &quot;avatar_hash&quot;: {
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;bot_id&quot;: {
                    &quot;$ref&quot;: &quot;#/definitions/defs_bot_id&quot;
                },
                &quot;display_name&quot;: {
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;display_name_normalized&quot;: {
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;email&quot;: {
                    &quot;format&quot;: &quot;email&quot;,
                    &quot;type&quot;: [
                        &quot;null&quot;,
                        &quot;string&quot;
                    ]
                },
                &quot;fields&quot;: {
                    &quot;items&quot;: {
                        &quot;type&quot;: &quot;object&quot;
                    },
                    &quot;type&quot;: [
                        &quot;object&quot;,
                        &quot;null&quot;,
                        &quot;array&quot;
                    ]
                },
                &quot;first_name&quot;: {
                    &quot;type&quot;: [
                        &quot;null&quot;,
                        &quot;string&quot;
                    ]
                },
                &quot;guest_expiration_ts&quot;: {
                    &quot;type&quot;: [
                        &quot;null&quot;,
                        &quot;integer&quot;
                    ]
                },
                &quot;guest_invited_by&quot;: {
                    &quot;type&quot;: [
                        &quot;null&quot;,
                        &quot;string&quot;
                    ]
                },
                &quot;image_1024&quot;: {
                    &quot;format&quot;: &quot;uri&quot;,
                    &quot;type&quot;: [
                        &quot;null&quot;,
                        &quot;string&quot;
                    ]
                },
                &quot;image_192&quot;: {
                    &quot;format&quot;: &quot;uri&quot;,
                    &quot;type&quot;: [
                        &quot;null&quot;,
                        &quot;string&quot;
                    ]
                },
                &quot;image_24&quot;: {
                    &quot;format&quot;: &quot;uri&quot;,
                    &quot;type&quot;: [
                        &quot;null&quot;,
                        &quot;string&quot;
                    ]
                },
                &quot;image_32&quot;: {
                    &quot;format&quot;: &quot;uri&quot;,
                    &quot;type&quot;: [
                        &quot;null&quot;,
                        &quot;string&quot;
                    ]
                },
                &quot;image_48&quot;: {
                    &quot;format&quot;: &quot;uri&quot;,
                    &quot;type&quot;: [
                        &quot;null&quot;,
                        &quot;string&quot;
                    ]
                },
                &quot;image_512&quot;: {
                    &quot;format&quot;: &quot;uri&quot;,
                    &quot;type&quot;: [
                        &quot;null&quot;,
                        &quot;string&quot;
                    ]
                },
                &quot;image_72&quot;: {
                    &quot;format&quot;: &quot;uri&quot;,
                    &quot;type&quot;: [
                        &quot;null&quot;,
                        &quot;string&quot;
                    ]
                },
                &quot;image_original&quot;: {
                    &quot;format&quot;: &quot;uri&quot;,
                    &quot;type&quot;: [
                        &quot;null&quot;,
                        &quot;string&quot;
                    ]
                },
                &quot;is_app_user&quot;: {
                    &quot;type&quot;: &quot;boolean&quot;
                },
                &quot;is_custom_image&quot;: {
                    &quot;type&quot;: &quot;boolean&quot;
                },
                &quot;is_restricted&quot;: {
                    &quot;type&quot;: [
                        &quot;null&quot;,
                        &quot;boolean&quot;
                    ]
                },
                &quot;is_ultra_restricted&quot;: {
                    &quot;type&quot;: [
                        &quot;null&quot;,
                        &quot;boolean&quot;
                    ]
                },
                &quot;last_avatar_image_hash&quot;: {
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;last_name&quot;: {
                    &quot;type&quot;: [
                        &quot;null&quot;,
                        &quot;string&quot;
                    ]
                },
                &quot;memberships_count&quot;: {
                    &quot;type&quot;: &quot;integer&quot;
                },
                &quot;name&quot;: {
                    &quot;type&quot;: [
                        &quot;null&quot;,
                        &quot;string&quot;
                    ]
                },
                &quot;phone&quot;: {
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;pronouns&quot;: {
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;real_name&quot;: {
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;real_name_normalized&quot;: {
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;skype&quot;: {
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;status_default_emoji&quot;: {
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;status_default_text&quot;: {
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;status_default_text_canonical&quot;: {
                    &quot;type&quot;: [
                        &quot;null&quot;,
                        &quot;string&quot;
                    ]
                },
                &quot;status_emoji&quot;: {
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;status_expiration&quot;: {
                    &quot;type&quot;: &quot;integer&quot;
                },
                &quot;status_text&quot;: {
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;status_text_canonical&quot;: {
                    &quot;type&quot;: [
                        &quot;null&quot;,
                        &quot;string&quot;
                    ]
                },
                &quot;team&quot;: {
                    &quot;$ref&quot;: &quot;#/definitions/defs_workspace_id&quot;
                },
                &quot;title&quot;: {
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;updated&quot;: {
                    &quot;type&quot;: &quot;integer&quot;
                },
                &quot;user_id&quot;: {
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;username&quot;: {
                    &quot;type&quot;: [
                        &quot;null&quot;,
                        &quot;string&quot;
                    ]
                }
            },
            &quot;required&quot;: [
                &quot;real_name&quot;,
                &quot;display_name&quot;,
                &quot;avatar_hash&quot;,
                &quot;real_name_normalized&quot;,
                &quot;display_name_normalized&quot;,
                &quot;title&quot;,
                &quot;phone&quot;,
                &quot;skype&quot;,
                &quot;status_text&quot;,
                &quot;status_emoji&quot;,
                &quot;fields&quot;
            ],
            &quot;title&quot;: &quot;User profile object&quot;,
            &quot;type&quot;: &quot;object&quot;
        },
        &quot;objs_user_profile_short&quot;: {
            &quot;additionalProperties&quot;: false,
            &quot;properties&quot;: {
                &quot;avatar_hash&quot;: {
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;display_name&quot;: {
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;display_name_normalized&quot;: {
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;first_name&quot;: {
                    &quot;type&quot;: [
                        &quot;string&quot;,
                        &quot;null&quot;
                    ]
                },
                &quot;image_72&quot;: {
                    &quot;format&quot;: &quot;uri&quot;,
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;is_restricted&quot;: {
                    &quot;type&quot;: &quot;boolean&quot;
                },
                &quot;is_ultra_restricted&quot;: {
                    &quot;type&quot;: &quot;boolean&quot;
                },
                &quot;name&quot;: {
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;real_name&quot;: {
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;real_name_normalized&quot;: {
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;team&quot;: {
                    &quot;$ref&quot;: &quot;#/definitions/defs_workspace_id&quot;
                }
            },
            &quot;required&quot;: [
                &quot;avatar_hash&quot;,
                &quot;image_72&quot;,
                &quot;first_name&quot;,
                &quot;real_name&quot;,
                &quot;display_name&quot;,
                &quot;team&quot;,
                &quot;name&quot;,
                &quot;is_restricted&quot;,
                &quot;is_ultra_restricted&quot;
            ],
            &quot;type&quot;: &quot;object&quot;
        }
    },
    &quot;externalDocs&quot;: {
        &quot;description&quot;: &quot;Learn more about the Slack Web API&quot;,
        &quot;url&quot;: &quot;https://api.slack.com/web&quot;
    },
    &quot;host&quot;: &quot;slack.com&quot;,
    &quot;info&quot;: {
        &quot;contact&quot;: {
            &quot;name&quot;: &quot;Slack developer relations&quot;,
            &quot;url&quot;: &quot;https://api.slack.com/support&quot;
        },
        &quot;description&quot;: &quot;One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.&quot;,
        &quot;title&quot;: &quot;Slack Web API&quot;,
        &quot;version&quot;: &quot;1.7.0&quot;
    },
    &quot;paths&quot;: {
        &quot;/admin.apps.approve&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Approve an app for installation on a workspace.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/admin.apps.approve&quot;
                },
                &quot;operationId&quot;: &quot;admin_apps_approve&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `admin.apps:write`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The id of the app to approve.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;app_id&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The id of the request to approve.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;request_id&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;team_id&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default success template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default error template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;admin.apps:write&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;admin.apps&quot;,
                    &quot;admin&quot;
                ]
            }
        },
        &quot;/admin.apps.approved.list&quot;: {
            &quot;get&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;
                ],
                &quot;description&quot;: &quot;List approved apps for an org or workspace.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/admin.apps.approved.list&quot;
                },
                &quot;operationId&quot;: &quot;admin_apps_approved_list&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `admin.apps:read`&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The maximum number of items to return. Must be between 1 - 1000 both inclusive.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;limit&quot;,
                        &quot;type&quot;: &quot;integer&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Set `cursor` to `next_cursor` returned by the previous call to list items in the next page&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;cursor&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;team_id&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;enterprise_id&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default success template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default error template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;admin.apps:read&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;admin.apps.approved&quot;,
                    &quot;admin&quot;
                ]
            }
        },
        &quot;/admin.apps.requests.list&quot;: {
            &quot;get&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;
                ],
                &quot;description&quot;: &quot;List app requests for a team/workspace.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/admin.apps.requests.list&quot;
                },
                &quot;operationId&quot;: &quot;admin_apps_requests_list&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `admin.apps:read`&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The maximum number of items to return. Must be between 1 - 1000 both inclusive.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;limit&quot;,
                        &quot;type&quot;: &quot;integer&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Set `cursor` to `next_cursor` returned by the previous call to list items in the next page&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;cursor&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;team_id&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default success template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default error template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;admin.apps:read&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;admin.apps.requests&quot;,
                    &quot;admin&quot;
                ]
            }
        },
        &quot;/admin.apps.restrict&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Restrict an app for installation on a workspace.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/admin.apps.restrict&quot;
                },
                &quot;operationId&quot;: &quot;admin_apps_restrict&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `admin.apps:write`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The id of the app to restrict.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;app_id&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The id of the request to restrict.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;request_id&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;team_id&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default success template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default error template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;admin.apps:write&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;admin.apps&quot;,
                    &quot;admin&quot;
                ]
            }
        },
        &quot;/admin.apps.restricted.list&quot;: {
            &quot;get&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;
                ],
                &quot;description&quot;: &quot;List restricted apps for an org or workspace.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/admin.apps.restricted.list&quot;
                },
                &quot;operationId&quot;: &quot;admin_apps_restricted_list&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `admin.apps:read`&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The maximum number of items to return. Must be between 1 - 1000 both inclusive.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;limit&quot;,
                        &quot;type&quot;: &quot;integer&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Set `cursor` to `next_cursor` returned by the previous call to list items in the next page&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;cursor&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;team_id&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;enterprise_id&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default success template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default error template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;admin.apps:read&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;admin.apps.restricted&quot;,
                    &quot;admin&quot;
                ]
            }
        },
        &quot;/admin.conversations.archive&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Archive a public or private channel.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/admin.conversations.archive&quot;
                },
                &quot;operationId&quot;: &quot;admin_conversations_archive&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `admin.conversations:write`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The channel to archive.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;channel_id&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response of admin.conversations.archive&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;admin.conversations.archive schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from admin.conversations.archive&quot;,
                            &quot;properties&quot;: {
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;feature_not_enabled&quot;,
                                        &quot;channel_not_found&quot;,
                                        &quot;channel_type_not_supported&quot;,
                                        &quot;default_org_wide_channel&quot;,
                                        &quot;already_archived&quot;,
                                        &quot;cant_archive_general&quot;,
                                        &quot;restricted_action&quot;,
                                        &quot;could_not_archive_channel&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;admin.conversations.archive error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;admin.conversations:write&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;admin.conversations&quot;,
                    &quot;admin&quot;
                ]
            }
        },
        &quot;/admin.conversations.convertToPrivate&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Convert a public channel to a private channel.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/admin.conversations.convertToPrivate&quot;
                },
                &quot;operationId&quot;: &quot;admin_conversations_convertToPrivate&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `admin.conversations:write`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The channel to convert to private.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;channel_id&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response of admin.conversations.convertToPrivate&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;admin.conversations.convertToPrivate schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from admin.conversations.convertToPrivate&quot;,
                            &quot;properties&quot;: {
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;feature_not_enabled&quot;,
                                        &quot;restricted_action&quot;,
                                        &quot;name_taken&quot;,
                                        &quot;channel_not_found&quot;,
                                        &quot;channel_type_not_supported&quot;,
                                        &quot;default_org_wide_channel&quot;,
                                        &quot;method_not_supported_for_channel_type&quot;,
                                        &quot;could_not_convert_channel&quot;,
                                        &quot;external_channel_migrating&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;admin.conversations.convertToPrivate error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;admin.conversations:write&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;admin.conversations&quot;,
                    &quot;admin&quot;
                ]
            }
        },
        &quot;/admin.conversations.create&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Create a public or private channel-based conversation.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/admin.conversations.create&quot;
                },
                &quot;operationId&quot;: &quot;admin_conversations_create&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `admin.conversations:write`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Name of the public or private channel to create.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;name&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Description of the public or private channel to create.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;description&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;When `true`, creates a private channel instead of a public channel&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;is_private&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;boolean&quot;
                    },
                    {
                        &quot;description&quot;: &quot;When `true`, the channel will be available org-wide. Note: if the channel is not `org_wide=true`, you must specify a `team_id` for this channel&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;org_wide&quot;,
                        &quot;type&quot;: &quot;boolean&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The workspace to create the channel in. Note: this argument is required unless you set `org_wide=true`.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;team_id&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response of admin.conversations.create&quot;,
                            &quot;properties&quot;: {
                                &quot;channel_id&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_channel_id&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;admin.conversations.create schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from admin.conversations.create&quot;,
                            &quot;properties&quot;: {
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;feature_not_enabled&quot;,
                                        &quot;name_taken&quot;,
                                        &quot;restricted_action&quot;,
                                        &quot;team_not_found&quot;,
                                        &quot;invalid_team&quot;,
                                        &quot;invalid_name&quot;,
                                        &quot;could_not_create_channel&quot;,
                                        &quot;team_id_or_org_required&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;admin.conversations.create error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;admin.conversations:write&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;admin.conversations&quot;,
                    &quot;admin&quot;
                ]
            }
        },
        &quot;/admin.conversations.delete&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Delete a public or private channel.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/admin.conversations.delete&quot;
                },
                &quot;operationId&quot;: &quot;admin_conversations_delete&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `admin.conversations:write`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The channel to delete.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;channel_id&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response of admin.conversations.delete&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;admin.conversations.delete schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from admin.conversations.delete&quot;,
                            &quot;properties&quot;: {
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;feature_not_enabled&quot;,
                                        &quot;not_an_admin&quot;,
                                        &quot;channel_not_found&quot;,
                                        &quot;channel_type_not_supported&quot;,
                                        &quot;default_org_wide_channel&quot;,
                                        &quot;restricted_action&quot;,
                                        &quot;could_not_delete_channel&quot;,
                                        &quot;missing_scope&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;admin.conversations.delete error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;admin.conversations:write&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;admin.conversations&quot;,
                    &quot;admin&quot;
                ]
            }
        },
        &quot;/admin.conversations.disconnectShared&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Disconnect a connected channel from one or more workspaces.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/admin.conversations.disconnectShared&quot;
                },
                &quot;operationId&quot;: &quot;admin_conversations_disconnectShared&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `admin.conversations:write`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The channel to be disconnected from some workspaces.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;channel_id&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The team to be removed from the channel. Currently only a single team id can be specified.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;leaving_team_ids&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response of admin.conversations.disconnectShared&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;admin.conversations.rename schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from admin.conversations.disconnectShared&quot;,
                            &quot;properties&quot;: {
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;feature_not_enabled&quot;,
                                        &quot;not_an_admin&quot;,
                                        &quot;not_an_enterprise&quot;,
                                        &quot;channel_not_found&quot;,
                                        &quot;not_supported&quot;,
                                        &quot;team_not_found&quot;,
                                        &quot;restricted_action&quot;,
                                        &quot;missing_scope&quot;,
                                        &quot;leaving_team_not_in_channel&quot;,
                                        &quot;no_teams_to_disconnect&quot;,
                                        &quot;leaving_team_required&quot;,
                                        &quot;cannot_kick_team&quot;,
                                        &quot;cannot_kick_home_team&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;admin.conversations.disconnectShared error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;admin.conversations:write&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;admin.conversations&quot;,
                    &quot;admin&quot;
                ]
            }
        },
        &quot;/admin.conversations.ekm.listOriginalConnectedChannelInfo&quot;: {
            &quot;get&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;
                ],
                &quot;description&quot;: &quot;List all disconnected channels\u2014i.e., channels that were once connected to other workspaces and then disconnected\u2014and the corresponding original channel IDs for key revocation with EKM.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/admin.conversations.ekm.listOriginalConnectedChannelInfo&quot;
                },
                &quot;operationId&quot;: &quot;admin_conversations_ekm_listOriginalConnectedChannelInfo&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `admin.conversations:read`&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;A comma-separated list of channels to filter to.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;channel_ids&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;A comma-separated list of the workspaces to which the channels you would like returned belong.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;team_ids&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The maximum number of items to return. Must be between 1 - 1000 both inclusive.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;limit&quot;,
                        &quot;type&quot;: &quot;integer&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Set `cursor` to `next_cursor` returned by the previous call to list items in the next page.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;cursor&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default success template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default error template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;admin.conversations:read&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;admin.conversations.ekm&quot;,
                    &quot;admin&quot;
                ]
            }
        },
        &quot;/admin.conversations.getConversationPrefs&quot;: {
            &quot;get&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Get conversation preferences for a public or private channel.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/admin.conversations.getConversationPrefs&quot;
                },
                &quot;operationId&quot;: &quot;admin_conversations_getConversationPrefs&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `admin.conversations:read`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The channel to get preferences for.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;channel_id&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response of admin.conversations.getConversationPrefs&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                },
                                &quot;prefs&quot;: {
                                    &quot;properties&quot;: {
                                        &quot;can_thread&quot;: {
                                            &quot;properties&quot;: {
                                                &quot;type&quot;: {
                                                    &quot;items&quot;: {
                                                        &quot;type&quot;: &quot;string&quot;
                                                    },
                                                    &quot;type&quot;: &quot;array&quot;
                                                },
                                                &quot;user&quot;: {
                                                    &quot;items&quot;: {
                                                        &quot;type&quot;: &quot;string&quot;
                                                    },
                                                    &quot;type&quot;: &quot;array&quot;
                                                }
                                            },
                                            &quot;type&quot;: &quot;object&quot;
                                        },
                                        &quot;who_can_post&quot;: {
                                            &quot;properties&quot;: {
                                                &quot;type&quot;: {
                                                    &quot;items&quot;: {
                                                        &quot;type&quot;: &quot;string&quot;
                                                    },
                                                    &quot;type&quot;: &quot;array&quot;
                                                },
                                                &quot;user&quot;: {
                                                    &quot;items&quot;: {
                                                        &quot;type&quot;: &quot;string&quot;
                                                    },
                                                    &quot;type&quot;: &quot;array&quot;
                                                }
                                            },
                                            &quot;type&quot;: &quot;object&quot;
                                        }
                                    },
                                    &quot;type&quot;: &quot;object&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;admin.conversations.getConversationPrefs schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from admin.conversations.getConversationPrefs&quot;,
                            &quot;properties&quot;: {
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;feature_not_enabled&quot;,
                                        &quot;not_an_admin&quot;,
                                        &quot;not_an_enterprise&quot;,
                                        &quot;restricted_action&quot;,
                                        &quot;missing_scope&quot;,
                                        &quot;channel_not_found&quot;,
                                        &quot;channel_type_not_supported&quot;,
                                        &quot;could_not_get_conversation_prefs&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;admin.conversations.unarchive error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;admin.conversations:read&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;admin.conversations&quot;,
                    &quot;admin&quot;
                ]
            }
        },
        &quot;/admin.conversations.getTeams&quot;: {
            &quot;get&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Get all the workspaces a given public or private channel is connected to within this Enterprise org.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/admin.conversations.getTeams&quot;
                },
                &quot;operationId&quot;: &quot;admin_conversations_getTeams&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `admin.conversations:read`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The channel to determine connected workspaces within the organization for.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;channel_id&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Set `cursor` to `next_cursor` returned by the previous call to list items in the next page&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;cursor&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The maximum number of items to return. Must be between 1 - 1000 both inclusive.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;limit&quot;,
                        &quot;type&quot;: &quot;integer&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response of admin.conversations.getTeams&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                },
                                &quot;response_metadata&quot;: {
                                    &quot;additionalProperties&quot;: false,
                                    &quot;properties&quot;: {
                                        &quot;next_cursor&quot;: {
                                            &quot;type&quot;: &quot;string&quot;
                                        }
                                    },
                                    &quot;required&quot;: [
                                        &quot;next_cursor&quot;
                                    ],
                                    &quot;type&quot;: &quot;object&quot;
                                },
                                &quot;team_ids&quot;: {
                                    &quot;items&quot;: {
                                        &quot;$ref&quot;: &quot;#/definitions/defs_team&quot;
                                    },
                                    &quot;type&quot;: &quot;array&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;team_ids&quot;
                            ],
                            &quot;title&quot;: &quot;admin.conversations.getTeams schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from admin.conversations.getTeams&quot;,
                            &quot;properties&quot;: {
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;feature_not_enabled&quot;,
                                        &quot;channel_not_found&quot;,
                                        &quot;channel_type_not_supported&quot;,
                                        &quot;unsupported_team_type&quot;,
                                        &quot;restricted_action&quot;,
                                        &quot;could_not_get_teams&quot;,
                                        &quot;invalid_cursor&quot;,
                                        &quot;invalid_limit&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;admin.conversations.getTeams error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;admin.conversations:read&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;admin.conversations&quot;,
                    &quot;admin&quot;
                ]
            }
        },
        &quot;/admin.conversations.invite&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Invite a user to a public or private channel.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/admin.conversations.invite&quot;
                },
                &quot;operationId&quot;: &quot;admin_conversations_invite&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `admin.conversations:write`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The users to invite.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;user_ids&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The channel that the users will be invited to.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;channel_id&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response of admin.conversations.invite&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;admin.conversations.invite schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;Schema for error response from admin.conversations.invite&quot;,
                            &quot;properties&quot;: {
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;feature_not_enabled&quot;,
                                        &quot;channel_not_found&quot;,
                                        &quot;channel_type_not_supported&quot;,
                                        &quot;default_org_wide_channel&quot;,
                                        &quot;restricted_action&quot;,
                                        &quot;user_must_be_admin&quot;,
                                        &quot;failed_for_some_users&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;admin.conversations.invite error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;admin.conversations:write&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;admin.conversations&quot;,
                    &quot;admin&quot;
                ]
            }
        },
        &quot;/admin.conversations.rename&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Rename a public or private channel.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/admin.conversations.rename&quot;
                },
                &quot;operationId&quot;: &quot;admin_conversations_rename&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `admin.conversations:write`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The channel to rename.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;channel_id&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;name&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response of admin.conversations.rename&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;admin.conversations.rename schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from admin.conversations.rename&quot;,
                            &quot;properties&quot;: {
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;feature_not_enabled&quot;,
                                        &quot;channel_not_found&quot;,
                                        &quot;channel_type_not_supported&quot;,
                                        &quot;restricted_action&quot;,
                                        &quot;could_not_rename_channel&quot;,
                                        &quot;default_org_wide_channel&quot;,
                                        &quot;name_taken&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;admin.conversations.unarchive error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;admin.conversations:write&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;admin.conversations&quot;,
                    &quot;admin&quot;
                ]
            }
        },
        &quot;/admin.conversations.restrictAccess.addGroup&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;
                ],
                &quot;description&quot;: &quot;Add an allowlist of IDP groups for accessing a channel&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/admin.conversations.restrictAccess.addGroup&quot;
                },
                &quot;operationId&quot;: &quot;admin_conversations_restrictAccess_addGroup&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `admin.conversations:write`&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;team_id&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The [IDP Group](https://slack.com/help/articles/115001435788-Connect-identity-provider-groups-to-your-Enterprise-Grid-org) ID to be an allowlist for the private channel.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;group_id&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The channel to link this group to.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;channel_id&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default success template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default error template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;admin.conversations:write&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;admin.conversations.restrictAccess&quot;,
                    &quot;admin&quot;
                ]
            }
        },
        &quot;/admin.conversations.restrictAccess.listGroups&quot;: {
            &quot;get&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;
                ],
                &quot;description&quot;: &quot;List all IDP Groups linked to a channel&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/admin.conversations.restrictAccess.listGroups&quot;
                },
                &quot;operationId&quot;: &quot;admin_conversations_restrictAccess_listGroups&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `admin.conversations:read`&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;channel_id&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;team_id&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default success template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default error template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;admin.conversations:read&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;admin.conversations.restrictAccess&quot;,
                    &quot;admin&quot;
                ]
            }
        },
        &quot;/admin.conversations.restrictAccess.removeGroup&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;
                ],
                &quot;description&quot;: &quot;Remove a linked IDP group linked from a private channel&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/admin.conversations.restrictAccess.removeGroup&quot;
                },
                &quot;operationId&quot;: &quot;admin_conversations_restrictAccess_removeGroup&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `admin.conversations:write`&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;team_id&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The [IDP Group](https://slack.com/help/articles/115001435788-Connect-identity-provider-groups-to-your-Enterprise-Grid-org) ID to remove from the private channel.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;group_id&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The channel to remove the linked group from.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;channel_id&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default success template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default error template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;admin.conversations:write&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;admin.conversations.restrictAccess&quot;,
                    &quot;admin&quot;
                ]
            }
        },
        &quot;/admin.conversations.search&quot;: {
            &quot;get&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Search for public or private channels in an Enterprise organization.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/admin.conversations.search&quot;
                },
                &quot;operationId&quot;: &quot;admin_conversations_search&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `admin.conversations:read`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Comma separated string of team IDs, signifying the workspaces to search through.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;team_ids&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Name of the the channel to query by.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;query&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Maximum number of items to be returned. Must be between 1 - 20 both inclusive. Default is 10.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;limit&quot;,
                        &quot;type&quot;: &quot;integer&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Set `cursor` to `next_cursor` returned by the previous call to list items in the next page.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;cursor&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The type of channel to include or exclude in the search. For example `private` will search private channels, while `private_exclude` will exclude them. For a full list of types, check the [Types section](#types).&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;search_channel_types&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Possible values are `relevant` (search ranking based on what we think is closest), `name` (alphabetical), `member_count` (number of users in the channel), and `created` (date channel was created). You can optionally pair this with the `sort_dir` arg to change how it is sorted &quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;sort&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Sort direction. Possible values are `asc` for ascending order like (1, 2, 3) or (a, b, c), and `desc` for descending order like (3, 2, 1) or (c, b, a)&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;sort_dir&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response of admin.conversations.search&quot;,
                            &quot;properties&quot;: {
                                &quot;channels&quot;: {
                                    &quot;items&quot;: {
                                        &quot;$ref&quot;: &quot;#/definitions/objs_channel&quot;
                                    },
                                    &quot;type&quot;: &quot;array&quot;
                                },
                                &quot;next_cursor&quot;: {
                                    &quot;type&quot;: &quot;string&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;channels&quot;,
                                &quot;next_cursor&quot;
                            ],
                            &quot;title&quot;: &quot;admin.conversations.search schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from admin.conversations.search&quot;,
                            &quot;properties&quot;: {
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;feature_not_enabled&quot;,
                                        &quot;not_an_admin&quot;,
                                        &quot;not_an_enterprise&quot;,
                                        &quot;team_not_found&quot;,
                                        &quot;not_allowed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;invalid_cursor&quot;,
                                        &quot;invalid_search_channel_type&quot;,
                                        &quot;invalid_sort&quot;,
                                        &quot;invalid_sort_dir&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;admin.conversations.search error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;admin.conversations:read&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;admin.conversations&quot;,
                    &quot;admin&quot;
                ]
            }
        },
        &quot;/admin.conversations.setConversationPrefs&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Set the posting permissions for a public or private channel.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/admin.conversations.setConversationPrefs&quot;
                },
                &quot;operationId&quot;: &quot;admin_conversations_setConversationPrefs&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `admin.conversations:write`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The channel to set the prefs for&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;channel_id&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The prefs for this channel in a stringified JSON format.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;prefs&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response of admin.conversations.setConversationPrefs&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;admin.conversations.setConversationPrefs schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from admin.conversations.setConversationPrefs&quot;,
                            &quot;properties&quot;: {
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;feature_not_enabled&quot;,
                                        &quot;not_an_admin&quot;,
                                        &quot;channel_not_found&quot;,
                                        &quot;channel_type_not_supported&quot;,
                                        &quot;restricted_action&quot;,
                                        &quot;missing_scope&quot;,
                                        &quot;could_not_set_channel_pref&quot;,
                                        &quot;default_org_wide_channel&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;admin.conversations.setConversationPrefs error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;admin.conversations:write&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;admin.conversations&quot;,
                    &quot;admin&quot;
                ]
            }
        },
        &quot;/admin.conversations.setTeams&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Set the workspaces in an Enterprise grid org that connect to a public or private channel.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/admin.conversations.setTeams&quot;
                },
                &quot;operationId&quot;: &quot;admin_conversations_setTeams&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `admin.conversations:write`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The encoded `channel_id` to add or remove to workspaces.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;channel_id&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The workspace to which the channel belongs. Omit this argument if the channel is a cross-workspace shared channel.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;team_id&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;A comma-separated list of workspaces to which the channel should be shared. Not required if the channel is being shared org-wide.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;target_team_ids&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;True if channel has to be converted to an org channel&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;org_channel&quot;,
                        &quot;type&quot;: &quot;boolean&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default success template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default error template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;admin.conversations:write&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;admin.conversations&quot;,
                    &quot;admin&quot;
                ]
            }
        },
        &quot;/admin.conversations.unarchive&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Unarchive a public or private channel.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/admin.conversations.unarchive&quot;
                },
                &quot;operationId&quot;: &quot;admin_conversations_unarchive&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `admin.conversations:write`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The channel to unarchive.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;channel_id&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response of admin.conversations.unarchive&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;admin.conversations.unarchive schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from admin.conversations.unarchive&quot;,
                            &quot;properties&quot;: {
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;feature_not_enabled&quot;,
                                        &quot;channel_not_found&quot;,
                                        &quot;channel_not_archived&quot;,
                                        &quot;channel_type_not_supported&quot;,
                                        &quot;restricted_action&quot;,
                                        &quot;could_not_unarchive_channel&quot;,
                                        &quot;default_org_wide_channel&quot;,
                                        &quot;missing_scope&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;admin.conversations.unarchive error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;admin.conversations:write&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;admin.conversations&quot;,
                    &quot;admin&quot;
                ]
            }
        },
        &quot;/admin.emoji.add&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;
                ],
                &quot;description&quot;: &quot;Add an emoji.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/admin.emoji.add&quot;
                },
                &quot;operationId&quot;: &quot;admin_emoji_add&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `admin.teams:write`&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The name of the emoji to be removed. Colons (`:myemoji:`) around the value are not required, although they may be included.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;name&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The URL of a file to use as an image for the emoji. Square images under 128KB and with transparent backgrounds work best.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;url&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default success template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default error template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;admin.teams:write&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;admin.emoji&quot;,
                    &quot;admin&quot;
                ]
            }
        },
        &quot;/admin.emoji.addAlias&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;
                ],
                &quot;description&quot;: &quot;Add an emoji alias.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/admin.emoji.addAlias&quot;
                },
                &quot;operationId&quot;: &quot;admin_emoji_addAlias&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `admin.teams:write`&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The name of the emoji to be aliased. Colons (`:myemoji:`) around the value are not required, although they may be included.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;name&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The alias of the emoji.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;alias_for&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default success template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default error template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;admin.teams:write&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;admin.emoji&quot;,
                    &quot;admin&quot;
                ]
            }
        },
        &quot;/admin.emoji.list&quot;: {
            &quot;get&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;
                ],
                &quot;description&quot;: &quot;List emoji for an Enterprise Grid organization.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/admin.emoji.list&quot;
                },
                &quot;operationId&quot;: &quot;admin_emoji_list&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `admin.teams:read`&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Set `cursor` to `next_cursor` returned by the previous call to list items in the next page&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;cursor&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The maximum number of items to return. Must be between 1 - 1000 both inclusive.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;limit&quot;,
                        &quot;type&quot;: &quot;integer&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default success template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default error template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;admin.teams:read&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;admin.emoji&quot;,
                    &quot;admin&quot;
                ]
            }
        },
        &quot;/admin.emoji.remove&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;
                ],
                &quot;description&quot;: &quot;Remove an emoji across an Enterprise Grid organization&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/admin.emoji.remove&quot;
                },
                &quot;operationId&quot;: &quot;admin_emoji_remove&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `admin.teams:write`&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The name of the emoji to be removed. Colons (`:myemoji:`) around the value are not required, although they may be included.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;name&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default success template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default error template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;admin.teams:write&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;admin.emoji&quot;,
                    &quot;admin&quot;
                ]
            }
        },
        &quot;/admin.emoji.rename&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;
                ],
                &quot;description&quot;: &quot;Rename an emoji.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/admin.emoji.rename&quot;
                },
                &quot;operationId&quot;: &quot;admin_emoji_rename&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `admin.teams:write`&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The name of the emoji to be renamed. Colons (`:myemoji:`) around the value are not required, although they may be included.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;name&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The new name of the emoji.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;new_name&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default success template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default error template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;admin.teams:write&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;admin.emoji&quot;,
                    &quot;admin&quot;
                ]
            }
        },
        &quot;/admin.inviteRequests.approve&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Approve a workspace invite request.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/admin.inviteRequests.approve&quot;
                },
                &quot;operationId&quot;: &quot;admin_inviteRequests_approve&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `admin.invites:write`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;ID for the workspace where the invite request was made.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;team_id&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;ID of the request to invite.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;invite_request_id&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default success template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default error template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;admin.invites:write&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;admin.inviteRequests&quot;,
                    &quot;admin&quot;
                ]
            }
        },
        &quot;/admin.inviteRequests.approved.list&quot;: {
            &quot;get&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;List all approved workspace invite requests.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/admin.inviteRequests.approved.list&quot;
                },
                &quot;operationId&quot;: &quot;admin_inviteRequests_approved_list&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `admin.invites:read`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;ID for the workspace where the invite requests were made.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;team_id&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Value of the `next_cursor` field sent as part of the previous API response&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;cursor&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The number of results that will be returned by the API on each invocation. Must be between 1 - 1000, both inclusive&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;limit&quot;,
                        &quot;type&quot;: &quot;integer&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default success template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default error template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;admin.invites:read&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;admin.inviteRequests.approved&quot;,
                    &quot;admin&quot;
                ]
            }
        },
        &quot;/admin.inviteRequests.denied.list&quot;: {
            &quot;get&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;List all denied workspace invite requests.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/admin.inviteRequests.denied.list&quot;
                },
                &quot;operationId&quot;: &quot;admin_inviteRequests_denied_list&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `admin.invites:read`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;ID for the workspace where the invite requests were made.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;team_id&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Value of the `next_cursor` field sent as part of the previous api response&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;cursor&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The number of results that will be returned by the API on each invocation. Must be between 1 - 1000 both inclusive&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;limit&quot;,
                        &quot;type&quot;: &quot;integer&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default success template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default error template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;admin.invites:read&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;admin.inviteRequests.denied&quot;,
                    &quot;admin&quot;
                ]
            }
        },
        &quot;/admin.inviteRequests.deny&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Deny a workspace invite request.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/admin.inviteRequests.deny&quot;
                },
                &quot;operationId&quot;: &quot;admin_inviteRequests_deny&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `admin.invites:write`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;ID for the workspace where the invite request was made.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;team_id&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;ID of the request to invite.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;invite_request_id&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default success template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default error template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;admin.invites:write&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;admin.inviteRequests&quot;,
                    &quot;admin&quot;
                ]
            }
        },
        &quot;/admin.inviteRequests.list&quot;: {
            &quot;get&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;List all pending workspace invite requests.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/admin.inviteRequests.list&quot;
                },
                &quot;operationId&quot;: &quot;admin_inviteRequests_list&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `admin.invites:read`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;ID for the workspace where the invite requests were made.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;team_id&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Value of the `next_cursor` field sent as part of the previous API response&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;cursor&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The number of results that will be returned by the API on each invocation. Must be between 1 - 1000, both inclusive&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;limit&quot;,
                        &quot;type&quot;: &quot;integer&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default success template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default error template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;admin.invites:read&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;admin.inviteRequests&quot;,
                    &quot;admin&quot;
                ]
            }
        },
        &quot;/admin.teams.admins.list&quot;: {
            &quot;get&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;
                ],
                &quot;description&quot;: &quot;List all of the admins on a given workspace.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/admin.teams.admins.list&quot;
                },
                &quot;operationId&quot;: &quot;admin_teams_admins_list&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `admin.teams:read`&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The maximum number of items to return.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;limit&quot;,
                        &quot;type&quot;: &quot;integer&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Set `cursor` to `next_cursor` returned by the previous call to list items in the next page.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;cursor&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;team_id&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default success template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default error template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;admin.teams:read&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;admin.teams.admins&quot;,
                    &quot;admin&quot;
                ]
            }
        },
        &quot;/admin.teams.create&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Create an Enterprise team.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/admin.teams.create&quot;
                },
                &quot;operationId&quot;: &quot;admin_teams_create&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `admin.teams:write`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Team domain (for example, slacksoftballteam).&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;team_domain&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Team name (for example, Slack Softball Team).&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;team_name&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Description for the team.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;team_description&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Who can join the team. A team&apos;s discoverability can be `open`, `closed`, `invite_only`, or `unlisted`.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;team_discoverability&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default success template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default error template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;admin.teams:write&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;admin.teams&quot;,
                    &quot;admin&quot;
                ]
            }
        },
        &quot;/admin.teams.list&quot;: {
            &quot;get&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;List all teams on an Enterprise organization&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/admin.teams.list&quot;
                },
                &quot;operationId&quot;: &quot;admin_teams_list&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `admin.teams:read`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The maximum number of items to return. Must be between 1 - 100 both inclusive.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;limit&quot;,
                        &quot;type&quot;: &quot;integer&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Set `cursor` to `next_cursor` returned by the previous call to list items in the next page.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;cursor&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default success template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default error template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;admin.teams:read&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;admin.teams&quot;,
                    &quot;admin&quot;
                ]
            }
        },
        &quot;/admin.teams.owners.list&quot;: {
            &quot;get&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;
                ],
                &quot;description&quot;: &quot;List all of the owners on a given workspace.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/admin.teams.owners.list&quot;
                },
                &quot;operationId&quot;: &quot;admin_teams_owners_list&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `admin.teams:read`&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;team_id&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The maximum number of items to return. Must be between 1 - 1000 both inclusive.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;limit&quot;,
                        &quot;type&quot;: &quot;integer&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Set `cursor` to `next_cursor` returned by the previous call to list items in the next page.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;cursor&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default success template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default error template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;admin.teams:read&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;admin.teams.owners&quot;,
                    &quot;admin&quot;
                ]
            }
        },
        &quot;/admin.teams.settings.info&quot;: {
            &quot;get&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Fetch information about settings in a workspace&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/admin.teams.settings.info&quot;
                },
                &quot;operationId&quot;: &quot;admin_teams_settings_info&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `admin.teams:read`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;team_id&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default success template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default error template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;admin.teams:read&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;admin.teams.settings&quot;,
                    &quot;admin&quot;
                ]
            }
        },
        &quot;/admin.teams.settings.setDefaultChannels&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;
                ],
                &quot;description&quot;: &quot;Set the default channels of a workspace.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/admin.teams.settings.setDefaultChannels&quot;
                },
                &quot;operationId&quot;: &quot;admin_teams_settings_setDefaultChannels&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `admin.teams:write`&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;ID for the workspace to set the default channel for.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;team_id&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;An array of channel IDs.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;channel_ids&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default success template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default error template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;admin.teams:write&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;admin.teams.settings&quot;,
                    &quot;admin&quot;
                ]
            }
        },
        &quot;/admin.teams.settings.setDescription&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Set the description of a given workspace.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/admin.teams.settings.setDescription&quot;
                },
                &quot;operationId&quot;: &quot;admin_teams_settings_setDescription&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `admin.teams:write`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;ID for the workspace to set the description for.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;team_id&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The new description for the workspace.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;description&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default success template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default error template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;admin.teams:write&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;admin.teams.settings&quot;,
                    &quot;admin&quot;
                ]
            }
        },
        &quot;/admin.teams.settings.setDiscoverability&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;An API method that allows admins to set the discoverability of a given workspace&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/admin.teams.settings.setDiscoverability&quot;
                },
                &quot;operationId&quot;: &quot;admin_teams_settings_setDiscoverability&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `admin.teams:write`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The ID of the workspace to set discoverability on.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;team_id&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;This workspace&apos;s discovery setting. It must be set to one of `open`, `invite_only`, `closed`, or `unlisted`.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;discoverability&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default success template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default error template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;admin.teams:write&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;admin.teams.settings&quot;,
                    &quot;admin&quot;
                ]
            }
        },
        &quot;/admin.teams.settings.setIcon&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;
                ],
                &quot;description&quot;: &quot;Sets the icon of a workspace.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/admin.teams.settings.setIcon&quot;
                },
                &quot;operationId&quot;: &quot;admin_teams_settings_setIcon&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `admin.teams:write`&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Image URL for the icon&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;image_url&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;ID for the workspace to set the icon for.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;team_id&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default success template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default error template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;admin.teams:write&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;admin.teams.settings&quot;,
                    &quot;admin&quot;
                ]
            }
        },
        &quot;/admin.teams.settings.setName&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Set the name of a given workspace.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/admin.teams.settings.setName&quot;
                },
                &quot;operationId&quot;: &quot;admin_teams_settings_setName&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `admin.teams:write`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;ID for the workspace to set the name for.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;team_id&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The new name of the workspace.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;name&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default success template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default error template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;admin.teams:write&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;admin.teams.settings&quot;,
                    &quot;admin&quot;
                ]
            }
        },
        &quot;/admin.usergroups.addChannels&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Add one or more default channels to an IDP group.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/admin.usergroups.addChannels&quot;
                },
                &quot;operationId&quot;: &quot;admin_usergroups_addChannels&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `admin.usergroups:write`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;ID of the IDP group to add default channels for.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;usergroup_id&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The workspace to add default channels in.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;team_id&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Comma separated string of channel IDs.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;channel_ids&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default success template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response if the token provided is not associated with an Org Admin or Owner&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default error template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;admin.usergroups:write&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;admin.usergroups&quot;,
                    &quot;admin&quot;
                ]
            }
        },
        &quot;/admin.usergroups.addTeams&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Associate one or more default workspaces with an organization-wide IDP group.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/admin.usergroups.addTeams&quot;
                },
                &quot;operationId&quot;: &quot;admin_usergroups_addTeams&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `admin.teams:write`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;An encoded usergroup (IDP Group) ID.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;usergroup_id&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;A comma separated list of encoded team (workspace) IDs. Each workspace *MUST* belong to the organization associated with the token.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;team_ids&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;When `true`, this method automatically creates new workspace accounts for the IDP group members.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;auto_provision&quot;,
                        &quot;type&quot;: &quot;boolean&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default success template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default error template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;admin.teams:write&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;admin.usergroups&quot;,
                    &quot;admin&quot;
                ]
            }
        },
        &quot;/admin.usergroups.listChannels&quot;: {
            &quot;get&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;List the channels linked to an org-level IDP group (user group).&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/admin.usergroups.listChannels&quot;
                },
                &quot;operationId&quot;: &quot;admin_usergroups_listChannels&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `admin.usergroups:read`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;ID of the IDP group to list default channels for.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;usergroup_id&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;ID of the the workspace.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;team_id&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Flag to include or exclude the count of members per channel.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;include_num_members&quot;,
                        &quot;type&quot;: &quot;boolean&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default success template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response if the token provided is not associated with an Org Admin or Owner&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default error template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;admin.usergroups:read&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;admin.usergroups&quot;,
                    &quot;admin&quot;
                ]
            }
        },
        &quot;/admin.usergroups.removeChannels&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Remove one or more default channels from an org-level IDP group (user group).&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/admin.usergroups.removeChannels&quot;
                },
                &quot;operationId&quot;: &quot;admin_usergroups_removeChannels&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `admin.usergroups:write`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;ID of the IDP Group&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;usergroup_id&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Comma-separated string of channel IDs&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;channel_ids&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default success template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response if the token provided is not associated with an Org Admin or Owner&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default error template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;admin.usergroups:write&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;admin.usergroups&quot;,
                    &quot;admin&quot;
                ]
            }
        },
        &quot;/admin.users.assign&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Add an Enterprise user to a workspace.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/admin.users.assign&quot;
                },
                &quot;operationId&quot;: &quot;admin_users_assign&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `admin.users:write`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The ID (`T1234`) of the workspace.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;team_id&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The ID of the user to add to the workspace.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;user_id&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;True if user should be added to the workspace as a guest.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;is_restricted&quot;,
                        &quot;type&quot;: &quot;boolean&quot;
                    },
                    {
                        &quot;description&quot;: &quot;True if user should be added to the workspace as a single-channel guest.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;is_ultra_restricted&quot;,
                        &quot;type&quot;: &quot;boolean&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Comma separated values of channel IDs to add user in the new workspace.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;channel_ids&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default success template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default error template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;admin.users:write&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;admin.users&quot;,
                    &quot;admin&quot;
                ]
            }
        },
        &quot;/admin.users.invite&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Invite a user to a workspace.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/admin.users.invite&quot;
                },
                &quot;operationId&quot;: &quot;admin_users_invite&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `admin.users:write`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The ID (`T1234`) of the workspace.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;team_id&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The email address of the person to invite.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;email&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;A comma-separated list of `channel_id`s for this user to join. At least one channel is required.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;channel_ids&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;An optional message to send to the user in the invite email.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;custom_message&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Full name of the user.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;real_name&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Allow this invite to be resent in the future if a user has not signed up yet. (default: false)&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;resend&quot;,
                        &quot;type&quot;: &quot;boolean&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Is this user a multi-channel guest user? (default: false)&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;is_restricted&quot;,
                        &quot;type&quot;: &quot;boolean&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Is this user a single channel guest user? (default: false)&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;is_ultra_restricted&quot;,
                        &quot;type&quot;: &quot;boolean&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Timestamp when guest account should be disabled. Only include this timestamp if you are inviting a guest user and you want their account to expire on a certain date.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;guest_expiration_ts&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default success template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default error template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;admin.users:write&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;admin.users&quot;,
                    &quot;admin&quot;
                ]
            }
        },
        &quot;/admin.users.list&quot;: {
            &quot;get&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;List users on a workspace&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/admin.users.list&quot;
                },
                &quot;operationId&quot;: &quot;admin_users_list&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `admin.users:read`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The ID (`T1234`) of the workspace.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;team_id&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Set `cursor` to `next_cursor` returned by the previous call to list items in the next page.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;cursor&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Limit for how many users to be retrieved per page&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;limit&quot;,
                        &quot;type&quot;: &quot;integer&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default success template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default error template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;admin.users:read&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;admin.users&quot;,
                    &quot;admin&quot;
                ]
            }
        },
        &quot;/admin.users.remove&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Remove a user from a workspace.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/admin.users.remove&quot;
                },
                &quot;operationId&quot;: &quot;admin_users_remove&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `admin.users:write`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The ID (`T1234`) of the workspace.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;team_id&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The ID of the user to remove.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;user_id&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default success template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default error template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;admin.users:write&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;admin.users&quot;,
                    &quot;admin&quot;
                ]
            }
        },
        &quot;/admin.users.session.invalidate&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Invalidate a single session for a user by session_id&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/admin.users.session.invalidate&quot;
                },
                &quot;operationId&quot;: &quot;admin_users_session_invalidate&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `admin.users:write`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;ID of the team that the session belongs to&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;team_id&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;session_id&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;integer&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default success template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default error template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;admin.users:write&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;admin.users.session&quot;,
                    &quot;admin&quot;
                ]
            }
        },
        &quot;/admin.users.session.reset&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Wipes all valid sessions on all devices for a given user&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/admin.users.session.reset&quot;
                },
                &quot;operationId&quot;: &quot;admin_users_session_reset&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `admin.users:write`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The ID of the user to wipe sessions for&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;user_id&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Only expire mobile sessions (default: false)&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;mobile_only&quot;,
                        &quot;type&quot;: &quot;boolean&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Only expire web sessions (default: false)&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;web_only&quot;,
                        &quot;type&quot;: &quot;boolean&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default success template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default error template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;admin.users:write&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;admin.users.session&quot;,
                    &quot;admin&quot;
                ]
            }
        },
        &quot;/admin.users.setAdmin&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Set an existing guest, regular user, or owner to be an admin user.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/admin.users.setAdmin&quot;
                },
                &quot;operationId&quot;: &quot;admin_users_setAdmin&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `admin.users:write`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The ID (`T1234`) of the workspace.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;team_id&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The ID of the user to designate as an admin.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;user_id&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default success template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default error template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;admin.users:write&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;admin.users&quot;,
                    &quot;admin&quot;
                ]
            }
        },
        &quot;/admin.users.setExpiration&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Set an expiration for a guest user&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/admin.users.setExpiration&quot;
                },
                &quot;operationId&quot;: &quot;admin_users_setExpiration&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `admin.users:write`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The ID (`T1234`) of the workspace.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;team_id&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The ID of the user to set an expiration for.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;user_id&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Timestamp when guest account should be disabled.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;expiration_ts&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;integer&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default success template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default error template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;admin.users:write&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;admin.users&quot;,
                    &quot;admin&quot;
                ]
            }
        },
        &quot;/admin.users.setOwner&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Set an existing guest, regular user, or admin user to be a workspace owner.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/admin.users.setOwner&quot;
                },
                &quot;operationId&quot;: &quot;admin_users_setOwner&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `admin.users:write`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The ID (`T1234`) of the workspace.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;team_id&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Id of the user to promote to owner.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;user_id&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default success template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default error template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;admin.users:write&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;admin.users&quot;,
                    &quot;admin&quot;
                ]
            }
        },
        &quot;/admin.users.setRegular&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Set an existing guest user, admin user, or owner to be a regular user.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/admin.users.setRegular&quot;
                },
                &quot;operationId&quot;: &quot;admin_users_setRegular&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `admin.users:write`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The ID (`T1234`) of the workspace.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;team_id&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The ID of the user to designate as a regular user.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;user_id&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default success template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default error template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;admin.users:write&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;admin.users&quot;,
                    &quot;admin&quot;
                ]
            }
        },
        &quot;/api.test&quot;: {
            &quot;get&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Checks API calling code.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/api.test&quot;
                },
                &quot;operationId&quot;: &quot;api_test&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Error response to return&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;error&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;example property to return&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;foo&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Standard success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: {
                                &quot;type&quot;: &quot;object&quot;
                            },
                            &quot;description&quot;: &quot;Schema for successful response api.test method&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;api.test success schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Artificial error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: {
                                &quot;type&quot;: &quot;object&quot;
                            },
                            &quot;description&quot;: &quot;Schema for error response api.test method&quot;,
                            &quot;properties&quot;: {
                                &quot;error&quot;: {
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;api.test error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;none&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;api&quot;
                ]
            }
        },
        &quot;/apps.event.authorizations.list&quot;: {
            &quot;get&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Get a list of authorizations for the given event context. Each authorization represents an app installation that the event is visible to.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/apps.event.authorizations.list&quot;
                },
                &quot;operationId&quot;: &quot;apps_event_authorizations_list&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `authorizations:read`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;event_context&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;cursor&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;limit&quot;,
                        &quot;type&quot;: &quot;integer&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default success template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default error template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;authorizations:read&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;apps.event.authorizations&quot;,
                    &quot;apps&quot;
                ]
            }
        },
        &quot;/apps.permissions.info&quot;: {
            &quot;get&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;
                ],
                &quot;description&quot;: &quot;Returns list of permissions this app has on a team.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/apps.permissions.info&quot;
                },
                &quot;operationId&quot;: &quot;apps_permissions_info&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `none`&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Standard success response when used with a user token&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response from apps.permissions.info method&quot;,
                            &quot;properties&quot;: {
                                &quot;info&quot;: {
                                    &quot;properties&quot;: {
                                        &quot;app_home&quot;: {
                                            &quot;properties&quot;: {
                                                &quot;resources&quot;: {
                                                    &quot;$ref&quot;: &quot;#/definitions/objs_resources&quot;
                                                },
                                                &quot;scopes&quot;: {
                                                    &quot;$ref&quot;: &quot;#/definitions/objs_scopes&quot;
                                                }
                                            },
                                            &quot;type&quot;: &quot;object&quot;
                                        },
                                        &quot;channel&quot;: {
                                            &quot;properties&quot;: {
                                                &quot;resources&quot;: {
                                                    &quot;$ref&quot;: &quot;#/definitions/objs_resources&quot;
                                                },
                                                &quot;scopes&quot;: {
                                                    &quot;$ref&quot;: &quot;#/definitions/objs_scopes&quot;
                                                }
                                            },
                                            &quot;type&quot;: &quot;object&quot;
                                        },
                                        &quot;group&quot;: {
                                            &quot;properties&quot;: {
                                                &quot;resources&quot;: {
                                                    &quot;$ref&quot;: &quot;#/definitions/objs_resources&quot;
                                                },
                                                &quot;scopes&quot;: {
                                                    &quot;$ref&quot;: &quot;#/definitions/objs_scopes&quot;
                                                }
                                            },
                                            &quot;type&quot;: &quot;object&quot;
                                        },
                                        &quot;im&quot;: {
                                            &quot;properties&quot;: {
                                                &quot;resources&quot;: {
                                                    &quot;$ref&quot;: &quot;#/definitions/objs_resources&quot;
                                                },
                                                &quot;scopes&quot;: {
                                                    &quot;$ref&quot;: &quot;#/definitions/objs_scopes&quot;
                                                }
                                            },
                                            &quot;type&quot;: &quot;object&quot;
                                        },
                                        &quot;mpim&quot;: {
                                            &quot;properties&quot;: {
                                                &quot;resources&quot;: {
                                                    &quot;$ref&quot;: &quot;#/definitions/objs_resources&quot;
                                                },
                                                &quot;scopes&quot;: {
                                                    &quot;$ref&quot;: &quot;#/definitions/objs_scopes&quot;
                                                }
                                            },
                                            &quot;type&quot;: &quot;object&quot;
                                        },
                                        &quot;team&quot;: {
                                            &quot;properties&quot;: {
                                                &quot;resources&quot;: {
                                                    &quot;$ref&quot;: &quot;#/definitions/objs_resources&quot;
                                                },
                                                &quot;scopes&quot;: {
                                                    &quot;$ref&quot;: &quot;#/definitions/objs_scopes&quot;
                                                }
                                            },
                                            &quot;required&quot;: [
                                                &quot;scopes&quot;,
                                                &quot;resources&quot;
                                            ],
                                            &quot;type&quot;: &quot;object&quot;
                                        }
                                    },
                                    &quot;required&quot;: [
                                        &quot;team&quot;,
                                        &quot;channel&quot;,
                                        &quot;group&quot;,
                                        &quot;mpim&quot;,
                                        &quot;im&quot;,
                                        &quot;app_home&quot;
                                    ],
                                    &quot;type&quot;: &quot;object&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;info&quot;
                            ],
                            &quot;title&quot;: &quot;apps.permissions.info schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Standard failure response when used with an invalid token&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from apps.permissions.info method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;token_revoked&quot;,
                                        &quot;no_permission&quot;,
                                        &quot;org_login_required&quot;,
                                        &quot;user_is_bot&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_array_arg&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;team_added_to_org&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;upgrade_required&quot;,
                                        &quot;fatal_error&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;apps.permissions.info error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;none&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;apps.permissions&quot;,
                    &quot;apps&quot;
                ]
            }
        },
        &quot;/apps.permissions.request&quot;: {
            &quot;get&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;
                ],
                &quot;description&quot;: &quot;Allows an app to request additional scopes&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/apps.permissions.request&quot;
                },
                &quot;operationId&quot;: &quot;apps_permissions_request&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `none`&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;A comma separated list of scopes to request for&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;scopes&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Token used to trigger the permissions API&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;trigger_id&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Standard success response when used with a user token&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response from apps.permissions.request method&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;apps.permissions.request schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Standard failure response when trigger_id is invalid&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from apps.permissions.request method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;invalid_trigger&quot;,
                                        &quot;trigger_exchanged&quot;,
                                        &quot;invalid_scope&quot;,
                                        &quot;invalid_user&quot;,
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;token_revoked&quot;,
                                        &quot;no_permission&quot;,
                                        &quot;org_login_required&quot;,
                                        &quot;user_is_bot&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_array_arg&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;team_added_to_org&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;upgrade_required&quot;,
                                        &quot;fatal_error&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;apps.permissions.request error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;none&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;apps.permissions&quot;,
                    &quot;apps&quot;
                ]
            }
        },
        &quot;/apps.permissions.resources.list&quot;: {
            &quot;get&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;
                ],
                &quot;description&quot;: &quot;Returns list of resource grants this app has on a team.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/apps.permissions.resources.list&quot;
                },
                &quot;operationId&quot;: &quot;apps_permissions_resources_list&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `none`&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request&apos;s `response_metadata`. Default value fetches the first \&quot;page\&quot; of the collection. See [pagination](/docs/pagination) for more detail.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;cursor&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The maximum number of items to return.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;limit&quot;,
                        &quot;type&quot;: &quot;integer&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical successful paginated response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;Schema for successful response apps.permissions.resources.list method&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                },
                                &quot;resources&quot;: {
                                    &quot;items&quot;: {
                                        &quot;properties&quot;: {
                                            &quot;id&quot;: {
                                                &quot;title&quot;: &quot;An ID for a resource&quot;,
                                                &quot;type&quot;: &quot;string&quot;,
                                                &quot;x-examples&quot;: [
                                                    &quot;T0DES3UAN&quot;,
                                                    &quot;C0ABC1ABC&quot;
                                                ]
                                            },
                                            &quot;type&quot;: {
                                                &quot;title&quot;: &quot;The type of resource the `id` corresponds to&quot;,
                                                &quot;type&quot;: &quot;string&quot;,
                                                &quot;x-examples&quot;: [
                                                    &quot;team&quot;,
                                                    &quot;channel&quot;,
                                                    &quot;mpim&quot;
                                                ]
                                            }
                                        },
                                        &quot;type&quot;: &quot;object&quot;
                                    },
                                    &quot;type&quot;: &quot;array&quot;
                                },
                                &quot;response_metadata&quot;: {
                                    &quot;additionalProperties&quot;: false,
                                    &quot;properties&quot;: {
                                        &quot;next_cursor&quot;: {
                                            &quot;type&quot;: &quot;string&quot;,
                                            &quot;x-examples&quot;: [
                                                &quot;dGVhbTpDMUg5UkVTR0w=&quot;
                                            ]
                                        }
                                    },
                                    &quot;required&quot;: [
                                        &quot;next_cursor&quot;
                                    ],
                                    &quot;type&quot;: &quot;object&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;resources&quot;
                            ],
                            &quot;title&quot;: &quot;apps.permissions.resources.list success schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from apps.permissions.resources.list method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;invalid_cursor&quot;,
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;token_revoked&quot;,
                                        &quot;no_permission&quot;,
                                        &quot;org_login_required&quot;,
                                        &quot;user_is_bot&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_array_arg&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;team_added_to_org&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;upgrade_required&quot;,
                                        &quot;fatal_error&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;apps.permissions.resources.list error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;none&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;apps.permissions.resources&quot;,
                    &quot;apps&quot;
                ]
            }
        },
        &quot;/apps.permissions.scopes.list&quot;: {
            &quot;get&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;
                ],
                &quot;description&quot;: &quot;Returns list of scopes this app has on a team.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/apps.permissions.scopes.list&quot;
                },
                &quot;operationId&quot;: &quot;apps_permissions_scopes_list&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `none`&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical successful paginated response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;Schema for successful response api.permissions.scopes.list method&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                },
                                &quot;scopes&quot;: {
                                    &quot;additionalProperties&quot;: true,
                                    &quot;properties&quot;: {
                                        &quot;app_home&quot;: {
                                            &quot;$ref&quot;: &quot;#/definitions/objs_scopes&quot;
                                        },
                                        &quot;channel&quot;: {
                                            &quot;$ref&quot;: &quot;#/definitions/objs_scopes&quot;
                                        },
                                        &quot;group&quot;: {
                                            &quot;$ref&quot;: &quot;#/definitions/objs_scopes&quot;
                                        },
                                        &quot;im&quot;: {
                                            &quot;$ref&quot;: &quot;#/definitions/objs_scopes&quot;
                                        },
                                        &quot;mpim&quot;: {
                                            &quot;$ref&quot;: &quot;#/definitions/objs_scopes&quot;
                                        },
                                        &quot;team&quot;: {
                                            &quot;$ref&quot;: &quot;#/definitions/objs_scopes&quot;
                                        },
                                        &quot;user&quot;: {
                                            &quot;$ref&quot;: &quot;#/definitions/objs_scopes&quot;
                                        }
                                    },
                                    &quot;type&quot;: &quot;object&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;scopes&quot;
                            ],
                            &quot;title&quot;: &quot;api.permissions.scopes.list success schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from apps.permissions.scopes.list method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;token_revoked&quot;,
                                        &quot;no_permission&quot;,
                                        &quot;org_login_required&quot;,
                                        &quot;user_is_bot&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_array_arg&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;team_added_to_org&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;upgrade_required&quot;,
                                        &quot;fatal_error&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;apps.permissions.scopes.list error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;none&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;apps.permissions.scopes&quot;,
                    &quot;apps&quot;
                ]
            }
        },
        &quot;/apps.uninstall&quot;: {
            &quot;get&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;
                ],
                &quot;description&quot;: &quot;Uninstalls your app from a workspace.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/apps.uninstall&quot;
                },
                &quot;operationId&quot;: &quot;apps_uninstall&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `none`&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Issued when you created your application.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;client_id&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Issued when you created your application.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;client_secret&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response from apps.uninstall method&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;apps.uninstall schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from apps.uninstall method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;invalid_client_id&quot;,
                                        &quot;bad_client_secret&quot;,
                                        &quot;client_id_token_mismatch&quot;,
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;token_revoked&quot;,
                                        &quot;no_permission&quot;,
                                        &quot;org_login_required&quot;,
                                        &quot;user_is_bot&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_array_arg&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;team_added_to_org&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;upgrade_required&quot;,
                                        &quot;fatal_error&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;apps.uninstall error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;none&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;apps&quot;
                ]
            }
        },
        &quot;/auth.revoke&quot;: {
            &quot;get&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;
                ],
                &quot;description&quot;: &quot;Revokes a token.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/auth.revoke&quot;
                },
                &quot;operationId&quot;: &quot;auth_revoke&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `none`&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Setting this parameter to `1` triggers a _testing mode_ where the specified token will not actually be revoked.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;test&quot;,
                        &quot;type&quot;: &quot;boolean&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response from auth.revoke method&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                },
                                &quot;revoked&quot;: {
                                    &quot;type&quot;: &quot;boolean&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;revoked&quot;
                            ],
                            &quot;title&quot;: &quot;auth.revoke schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from auth.revoke method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;token_revoked&quot;,
                                        &quot;no_permission&quot;,
                                        &quot;org_login_required&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_array_arg&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;team_added_to_org&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;upgrade_required&quot;,
                                        &quot;fatal_error&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;auth.revoke error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;none&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;auth&quot;
                ]
            }
        },
        &quot;/auth.test&quot;: {
            &quot;get&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Checks authentication &amp; identity.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/auth.test&quot;
                },
                &quot;operationId&quot;: &quot;auth_test&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `none`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Standard success response when used with a user token&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response auth.test method&quot;,
                            &quot;properties&quot;: {
                                &quot;bot_id&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_bot_id&quot;
                                },
                                &quot;is_enterprise_install&quot;: {
                                    &quot;type&quot;: &quot;boolean&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                },
                                &quot;team&quot;: {
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;team_id&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_team&quot;
                                },
                                &quot;url&quot;: {
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;user&quot;: {
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;user_id&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_user_id&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;url&quot;,
                                &quot;team&quot;,
                                &quot;user&quot;,
                                &quot;team_id&quot;,
                                &quot;user_id&quot;
                            ],
                            &quot;title&quot;: &quot;auth.test success schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Standard failure response when used with an invalid token&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response auth.test method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;token_revoked&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_array_arg&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;upgrade_required&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;auth.test error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;none&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;auth&quot;
                ]
            }
        },
        &quot;/bots.info&quot;: {
            &quot;get&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;
                ],
                &quot;description&quot;: &quot;Gets information about a bot user.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/bots.info&quot;
                },
                &quot;operationId&quot;: &quot;bots_info&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `users:read`&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Bot user to get info on&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;bot&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;When successful, returns bot info by bot ID.&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response from bots.info method&quot;,
                            &quot;properties&quot;: {
                                &quot;bot&quot;: {
                                    &quot;additionalProperties&quot;: false,
                                    &quot;properties&quot;: {
                                        &quot;app_id&quot;: {
                                            &quot;$ref&quot;: &quot;#/definitions/defs_app_id&quot;
                                        },
                                        &quot;deleted&quot;: {
                                            &quot;type&quot;: &quot;boolean&quot;
                                        },
                                        &quot;icons&quot;: {
                                            &quot;additionalProperties&quot;: false,
                                            &quot;properties&quot;: {
                                                &quot;image_36&quot;: {
                                                    &quot;format&quot;: &quot;uri&quot;,
                                                    &quot;type&quot;: &quot;string&quot;
                                                },
                                                &quot;image_48&quot;: {
                                                    &quot;format&quot;: &quot;uri&quot;,
                                                    &quot;type&quot;: &quot;string&quot;
                                                },
                                                &quot;image_72&quot;: {
                                                    &quot;format&quot;: &quot;uri&quot;,
                                                    &quot;type&quot;: &quot;string&quot;
                                                }
                                            },
                                            &quot;required&quot;: [
                                                &quot;image_36&quot;,
                                                &quot;image_48&quot;,
                                                &quot;image_72&quot;
                                            ],
                                            &quot;type&quot;: &quot;object&quot;
                                        },
                                        &quot;id&quot;: {
                                            &quot;$ref&quot;: &quot;#/definitions/defs_bot_id&quot;
                                        },
                                        &quot;name&quot;: {
                                            &quot;type&quot;: &quot;string&quot;
                                        },
                                        &quot;updated&quot;: {
                                            &quot;type&quot;: &quot;integer&quot;
                                        },
                                        &quot;user_id&quot;: {
                                            &quot;$ref&quot;: &quot;#/definitions/defs_user_id&quot;
                                        }
                                    },
                                    &quot;required&quot;: [
                                        &quot;id&quot;,
                                        &quot;deleted&quot;,
                                        &quot;name&quot;,
                                        &quot;updated&quot;,
                                        &quot;app_id&quot;,
                                        &quot;icons&quot;
                                    ],
                                    &quot;type&quot;: &quot;object&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;bot&quot;
                            ],
                            &quot;title&quot;: &quot;bots.info schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;When no bot can be found, it returns an error.&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from bots.info method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;bot_not_found&quot;,
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;token_revoked&quot;,
                                        &quot;no_permission&quot;,
                                        &quot;org_login_required&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_array_arg&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;team_added_to_org&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;upgrade_required&quot;,
                                        &quot;fatal_error&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;bots.info error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;users:read&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;bots&quot;
                ]
            }
        },
        &quot;/calls.add&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Registers a new Call.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/calls.add&quot;
                },
                &quot;operationId&quot;: &quot;calls_add&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `calls:write`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;An ID supplied by the 3rd-party Call provider. It must be unique across all Calls from that service.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;external_unique_id&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;An optional, human-readable ID supplied by the 3rd-party Call provider. If supplied, this ID will be displayed in the Call object.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;external_display_id&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The URL required for a client to join the Call.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;join_url&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;When supplied, available Slack clients will attempt to directly launch the 3rd-party Call with this URL.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;desktop_app_join_url&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Call start time in UTC UNIX timestamp format&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;date_start&quot;,
                        &quot;type&quot;: &quot;integer&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The name of the Call.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;title&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The valid Slack user ID of the user who created this Call. When this method is called with a user token, the `created_by` field is optional and defaults to the authed user of the token. Otherwise, the field is required.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;created_by&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The list of users to register as participants in the Call. [Read more on how to specify users here](/apis/calls#users).&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;users&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default success template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default error template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;calls:write&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;calls&quot;
                ]
            }
        },
        &quot;/calls.end&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Ends a Call.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/calls.end&quot;
                },
                &quot;operationId&quot;: &quot;calls_end&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `calls:write`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;`id` returned when registering the call using the [`calls.add`](/methods/calls.add) method.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;id&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Call duration in seconds&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;duration&quot;,
                        &quot;type&quot;: &quot;integer&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default success template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default error template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;calls:write&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;calls&quot;
                ]
            }
        },
        &quot;/calls.info&quot;: {
            &quot;get&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Returns information about a Call.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/calls.info&quot;
                },
                &quot;operationId&quot;: &quot;calls_info&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `calls:read`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;`id` of the Call returned by the [`calls.add`](/methods/calls.add) method.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;id&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default success template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default error template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;calls:read&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;calls&quot;
                ]
            }
        },
        &quot;/calls.participants.add&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Registers new participants added to a Call.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/calls.participants.add&quot;
                },
                &quot;operationId&quot;: &quot;calls_participants_add&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `calls:write`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;`id` returned by the [`calls.add`](/methods/calls.add) method.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;id&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The list of users to add as participants in the Call. [Read more on how to specify users here](/apis/calls#users).&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;users&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default success template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default error template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;calls:write&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;calls.participants&quot;,
                    &quot;calls&quot;
                ]
            }
        },
        &quot;/calls.participants.remove&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Registers participants removed from a Call.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/calls.participants.remove&quot;
                },
                &quot;operationId&quot;: &quot;calls_participants_remove&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `calls:write`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;`id` returned by the [`calls.add`](/methods/calls.add) method.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;id&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The list of users to remove as participants in the Call. [Read more on how to specify users here](/apis/calls#users).&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;users&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default success template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default error template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;calls:write&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;calls.participants&quot;,
                    &quot;calls&quot;
                ]
            }
        },
        &quot;/calls.update&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Updates information about a Call.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/calls.update&quot;
                },
                &quot;operationId&quot;: &quot;calls_update&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `calls:write`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;`id` returned by the [`calls.add`](/methods/calls.add) method.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;id&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The name of the Call.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;title&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The URL required for a client to join the Call.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;join_url&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;When supplied, available Slack clients will attempt to directly launch the 3rd-party Call with this URL.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;desktop_app_join_url&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default success template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default error template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;calls:write&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;calls&quot;
                ]
            }
        },
        &quot;/chat.delete&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Deletes a message.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/chat.delete&quot;
                },
                &quot;operationId&quot;: &quot;chat_delete&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `chat:write`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Timestamp of the message to be deleted.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;ts&quot;,
                        &quot;type&quot;: &quot;number&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Channel containing the message to be deleted.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;channel&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Pass true to delete the message as the authed user with `chat:write:user` scope. [Bot users](/bot-users) in this context are considered authed users. If unused or false, the message will be deleted with `chat:write:bot` scope.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;as_user&quot;,
                        &quot;type&quot;: &quot;boolean&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response of chat.delete method&quot;,
                            &quot;properties&quot;: {
                                &quot;channel&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_channel&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                },
                                &quot;ts&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ts&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;channel&quot;,
                                &quot;ts&quot;
                            ],
                            &quot;title&quot;: &quot;chat.delete success schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from chat.delete method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;message_not_found&quot;,
                                        &quot;channel_not_found&quot;,
                                        &quot;cant_delete_message&quot;,
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;token_revoked&quot;,
                                        &quot;no_permission&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_array_arg&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;team_added_to_org&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;upgrade_required&quot;,
                                        &quot;fatal_error&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;chat.delete error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;chat:write:user&quot;,
                            &quot;chat:write:bot&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;chat&quot;
                ]
            }
        },
        &quot;/chat.deleteScheduledMessage&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Deletes a pending scheduled message from the queue.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/chat.deleteScheduledMessage&quot;
                },
                &quot;operationId&quot;: &quot;chat_deleteScheduledMessage&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `chat:write`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Pass true to delete the message as the authed user with `chat:write:user` scope. [Bot users](/bot-users) in this context are considered authed users. If unused or false, the message will be deleted with `chat:write:bot` scope.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;as_user&quot;,
                        &quot;type&quot;: &quot;boolean&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The channel the scheduled_message is posting to&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;channel&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;`scheduled_message_id` returned from call to chat.scheduleMessage&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;scheduled_message_id&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response from chat.deleteScheduledMessage method&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;chat.deleteScheduledMessage schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response if no message is found&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from chat.deleteScheduledMessage method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;invalid_scheduled_message_id&quot;,
                                        &quot;channel_not_found&quot;,
                                        &quot;bad_token&quot;,
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;token_revoked&quot;,
                                        &quot;no_permission&quot;,
                                        &quot;org_login_required&quot;,
                                        &quot;ekm_access_denied&quot;,
                                        &quot;missing_scope&quot;,
                                        &quot;invalid_arguments&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;team_added_to_org&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;upgrade_required&quot;,
                                        &quot;fatal_error&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;chat.deleteScheduledMessage error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;chat:write:user&quot;,
                            &quot;chat:write:bot&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;chat&quot;
                ]
            }
        },
        &quot;/chat.getPermalink&quot;: {
            &quot;get&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;
                ],
                &quot;description&quot;: &quot;Retrieve a permalink URL for a specific extant message&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/chat.getPermalink&quot;
                },
                &quot;operationId&quot;: &quot;chat_getPermalink&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `none`&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The ID of the conversation or channel containing the message&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;channel&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;A message&apos;s `ts` value, uniquely identifying it within a channel&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;message_ts&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Standard success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response chat.getPermalink&quot;,
                            &quot;properties&quot;: {
                                &quot;channel&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_channel&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                },
                                &quot;permalink&quot;: {
                                    &quot;format&quot;: &quot;uri&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;channel&quot;,
                                &quot;permalink&quot;
                            ],
                            &quot;title&quot;: &quot;chat.getPermalink success schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Error response when channel cannot be found&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from chat.getPermalink method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;channel_not_found&quot;,
                                        &quot;message_not_found&quot;,
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;token_revoked&quot;,
                                        &quot;no_permission&quot;,
                                        &quot;org_login_required&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_array_arg&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;team_added_to_org&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;upgrade_required&quot;,
                                        &quot;fatal_error&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;chat.getPermalink error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;none&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;chat&quot;
                ]
            }
        },
        &quot;/chat.meMessage&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Share a me message into a channel.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/chat.meMessage&quot;
                },
                &quot;operationId&quot;: &quot;chat_meMessage&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `chat:write`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Channel to send message to. Can be a public channel, private group or IM channel. Can be an encoded ID, or a name.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;channel&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Text of the message to send.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;text&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response from chat.meMessage method&quot;,
                            &quot;properties&quot;: {
                                &quot;channel&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_channel&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                },
                                &quot;ts&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ts&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;chat.meMessage schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from chat.meMessage method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;channel_not_found&quot;,
                                        &quot;not_in_channel&quot;,
                                        &quot;is_archived&quot;,
                                        &quot;msg_too_long&quot;,
                                        &quot;no_text&quot;,
                                        &quot;rate_limited&quot;,
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;token_revoked&quot;,
                                        &quot;no_permission&quot;,
                                        &quot;org_login_required&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_array_arg&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;team_added_to_org&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;upgrade_required&quot;,
                                        &quot;fatal_error&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;chat.meMessage error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;chat:write:user&quot;,
                            &quot;chat:write:bot&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;chat&quot;
                ]
            }
        },
        &quot;/chat.postEphemeral&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Sends an ephemeral message to a user in a channel.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/chat.postEphemeral&quot;
                },
                &quot;operationId&quot;: &quot;chat_postEphemeral&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `chat:write`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Pass true to post the message as the authed user. Defaults to true if the chat:write:bot scope is not included. Otherwise, defaults to false.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;as_user&quot;,
                        &quot;type&quot;: &quot;boolean&quot;
                    },
                    {
                        &quot;description&quot;: &quot;A JSON-based array of structured attachments, presented as a URL-encoded string.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;attachments&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;A JSON-based array of structured blocks, presented as a URL-encoded string.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;blocks&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;channel&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Emoji to use as the icon for this message. Overrides `icon_url`. Must be used in conjunction with `as_user` set to `false`, otherwise ignored. See [authorship](#authorship) below.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;icon_emoji&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;URL to an image to use as the icon for this message. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;icon_url&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Find and link channel names and usernames.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;link_names&quot;,
                        &quot;type&quot;: &quot;boolean&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Change how messages are treated. Defaults to `none`. See [below](#formatting).&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;parse&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;text&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Provide another message&apos;s `ts` value to post this message in a thread. Avoid using a reply&apos;s `ts` value; use its parent&apos;s value instead. Ephemeral messages in threads are only shown if there is already an active thread.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;thread_ts&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;`id` of the user who will receive the ephemeral message. The user should be in the channel specified by the `channel` argument.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;user&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Set your bot&apos;s user name. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;username&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response from chat.postEphemeral method&quot;,
                            &quot;properties&quot;: {
                                &quot;message_ts&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ts&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;message_ts&quot;
                            ],
                            &quot;title&quot;: &quot;chat.postEphemeral success schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from chat.postEphemeral method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;channel_not_found&quot;,
                                        &quot;is_archived&quot;,
                                        &quot;msg_too_long&quot;,
                                        &quot;no_text&quot;,
                                        &quot;restricted_action&quot;,
                                        &quot;too_many_attachments&quot;,
                                        &quot;user_not_in_channel&quot;,
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;token_revoked&quot;,
                                        &quot;no_permission&quot;,
                                        &quot;org_login_required&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_array_arg&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;team_added_to_org&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;upgrade_required&quot;,
                                        &quot;fatal_error&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;chat.postEphemeral error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;chat:write:user&quot;,
                            &quot;chat:write:bot&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;chat&quot;
                ]
            }
        },
        &quot;/chat.postMessage&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Sends a message to a channel.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/chat.postMessage&quot;
                },
                &quot;operationId&quot;: &quot;chat_postMessage&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `chat:write`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [authorship](#authorship) below.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;as_user&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;A JSON-based array of structured attachments, presented as a URL-encoded string.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;attachments&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;A JSON-based array of structured blocks, presented as a URL-encoded string.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;blocks&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name. See [below](#channels) for more details.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;channel&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Emoji to use as the icon for this message. Overrides `icon_url`. Must be used in conjunction with `as_user` set to `false`, otherwise ignored. See [authorship](#authorship) below.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;icon_emoji&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;URL to an image to use as the icon for this message. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;icon_url&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Find and link channel names and usernames.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;link_names&quot;,
                        &quot;type&quot;: &quot;boolean&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Disable Slack markup parsing by setting to `false`. Enabled by default.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;mrkdwn&quot;,
                        &quot;type&quot;: &quot;boolean&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Change how messages are treated. Defaults to `none`. See [below](#formatting).&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;parse&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Used in conjunction with `thread_ts` and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to `false`.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;reply_broadcast&quot;,
                        &quot;type&quot;: &quot;boolean&quot;
                    },
                    {
                        &quot;description&quot;: &quot;How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;text&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Provide another message&apos;s `ts` value to make this message a reply. Avoid using a reply&apos;s `ts` value; use its parent instead.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;thread_ts&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Pass true to enable unfurling of primarily text-based content.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;unfurl_links&quot;,
                        &quot;type&quot;: &quot;boolean&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Pass false to disable unfurling of media content.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;unfurl_media&quot;,
                        &quot;type&quot;: &quot;boolean&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Set your bot&apos;s user name. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;username&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response of chat.postMessage method&quot;,
                            &quot;properties&quot;: {
                                &quot;channel&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_channel&quot;
                                },
                                &quot;message&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/objs_message&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                },
                                &quot;ts&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ts&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;channel&quot;,
                                &quot;ts&quot;,
                                &quot;message&quot;
                            ],
                            &quot;title&quot;: &quot;chat.postMessage success schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response if too many attachments are included&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response chat.postMessage method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;channel_not_found&quot;,
                                        &quot;not_in_channel&quot;,
                                        &quot;is_archived&quot;,
                                        &quot;msg_too_long&quot;,
                                        &quot;no_text&quot;,
                                        &quot;too_many_attachments&quot;,
                                        &quot;rate_limited&quot;,
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_array_arg&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;chat.postMessage error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;chat:write:user&quot;,
                            &quot;chat:write:bot&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;chat&quot;
                ]
            }
        },
        &quot;/chat.scheduleMessage&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Schedules a message to be sent to a channel.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/chat.scheduleMessage&quot;
                },
                &quot;operationId&quot;: &quot;chat_scheduleMessage&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `chat:write`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Channel, private group, or DM channel to send message to. Can be an encoded ID, or a name. See [below](#channels) for more details.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;channel&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;text&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Unix EPOCH timestamp of time in future to send the message.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;post_at&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Change how messages are treated. Defaults to `none`. See [chat.postMessage](chat.postMessage#formatting).&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;parse&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [chat.postMessage](chat.postMessage#authorship).&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;as_user&quot;,
                        &quot;type&quot;: &quot;boolean&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Find and link channel names and usernames.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;link_names&quot;,
                        &quot;type&quot;: &quot;boolean&quot;
                    },
                    {
                        &quot;description&quot;: &quot;A JSON-based array of structured attachments, presented as a URL-encoded string.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;attachments&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;A JSON-based array of structured blocks, presented as a URL-encoded string.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;blocks&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Pass true to enable unfurling of primarily text-based content.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;unfurl_links&quot;,
                        &quot;type&quot;: &quot;boolean&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Pass false to disable unfurling of media content.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;unfurl_media&quot;,
                        &quot;type&quot;: &quot;boolean&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Provide another message&apos;s `ts` value to make this message a reply. Avoid using a reply&apos;s `ts` value; use its parent instead.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;thread_ts&quot;,
                        &quot;type&quot;: &quot;number&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Used in conjunction with `thread_ts` and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to `false`.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;reply_broadcast&quot;,
                        &quot;type&quot;: &quot;boolean&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response of chat.scheduleMessage method&quot;,
                            &quot;properties&quot;: {
                                &quot;channel&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_channel&quot;
                                },
                                &quot;message&quot;: {
                                    &quot;additionalProperties&quot;: false,
                                    &quot;properties&quot;: {
                                        &quot;bot_id&quot;: {
                                            &quot;$ref&quot;: &quot;#/definitions/defs_bot_id&quot;
                                        },
                                        &quot;bot_profile&quot;: {
                                            &quot;$ref&quot;: &quot;#/definitions/objs_bot_profile&quot;
                                        },
                                        &quot;team&quot;: {
                                            &quot;$ref&quot;: &quot;#/definitions/defs_team&quot;
                                        },
                                        &quot;text&quot;: {
                                            &quot;type&quot;: &quot;string&quot;
                                        },
                                        &quot;type&quot;: {
                                            &quot;type&quot;: &quot;string&quot;
                                        },
                                        &quot;user&quot;: {
                                            &quot;$ref&quot;: &quot;#/definitions/defs_user_id&quot;
                                        },
                                        &quot;username&quot;: {
                                            &quot;type&quot;: &quot;string&quot;
                                        }
                                    },
                                    &quot;required&quot;: [
                                        &quot;type&quot;,
                                        &quot;text&quot;,
                                        &quot;bot_id&quot;,
                                        &quot;user&quot;,
                                        &quot;team&quot;
                                    ],
                                    &quot;type&quot;: &quot;object&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                },
                                &quot;post_at&quot;: {
                                    &quot;pattern&quot;: &quot;^\\d{10}$&quot;,
                                    &quot;type&quot;: &quot;integer&quot;
                                },
                                &quot;scheduled_message_id&quot;: {
                                    &quot;pattern&quot;: &quot;^[Q][A-Z0-9]{8,}$&quot;,
                                    &quot;title&quot;: &quot;Scheduled Message ID&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;channel&quot;,
                                &quot;post_at&quot;,
                                &quot;scheduled_message_id&quot;,
                                &quot;message&quot;
                            ],
                            &quot;title&quot;: &quot;chat.scheduleMessage success schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response if the `post_at` is invalid (ex. in the past or too far into the future)&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response chat.scheduleMessage method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;invalid_time&quot;,
                                        &quot;time_in_past&quot;,
                                        &quot;time_too_far&quot;,
                                        &quot;channel_not_found&quot;,
                                        &quot;not_in_channel&quot;,
                                        &quot;is_archived&quot;,
                                        &quot;msg_too_long&quot;,
                                        &quot;no_text&quot;,
                                        &quot;restricted_action&quot;,
                                        &quot;restricted_action_read_only_channel&quot;,
                                        &quot;restricted_action_thread_only_channel&quot;,
                                        &quot;restricted_action_non_threadable_channel&quot;,
                                        &quot;too_many_attachments&quot;,
                                        &quot;rate_limited&quot;,
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;token_revoked&quot;,
                                        &quot;no_permission&quot;,
                                        &quot;org_login_required&quot;,
                                        &quot;ekm_access_denied&quot;,
                                        &quot;missing_scope&quot;,
                                        &quot;invalid_arguments&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;team_added_to_org&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;upgrade_required&quot;,
                                        &quot;fatal_error&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;chat.scheduleMessage error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;chat:write:user&quot;,
                            &quot;chat:write:bot&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;chat&quot;
                ]
            }
        },
        &quot;/chat.scheduledMessages.list&quot;: {
            &quot;get&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Returns a list of scheduled messages.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/chat.scheduledMessages.list&quot;
                },
                &quot;operationId&quot;: &quot;chat_scheduledMessages_list&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `none`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The channel of the scheduled messages&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;channel&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;A UNIX timestamp of the latest value in the time range&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;latest&quot;,
                        &quot;type&quot;: &quot;number&quot;
                    },
                    {
                        &quot;description&quot;: &quot;A UNIX timestamp of the oldest value in the time range&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;oldest&quot;,
                        &quot;type&quot;: &quot;number&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Maximum number of original entries to return.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;limit&quot;,
                        &quot;type&quot;: &quot;integer&quot;
                    },
                    {
                        &quot;description&quot;: &quot;For pagination purposes, this is the `cursor` value returned from a previous call to `chat.scheduledmessages.list` indicating where you want to start this call from.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;cursor&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response from chat.scheduledMessages.list method&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                },
                                &quot;response_metadata&quot;: {
                                    &quot;additionalProperties&quot;: false,
                                    &quot;properties&quot;: {
                                        &quot;next_cursor&quot;: {
                                            &quot;type&quot;: &quot;string&quot;
                                        }
                                    },
                                    &quot;required&quot;: [
                                        &quot;next_cursor&quot;
                                    ],
                                    &quot;type&quot;: &quot;object&quot;
                                },
                                &quot;scheduled_messages&quot;: {
                                    &quot;items&quot;: {
                                        &quot;additionalProperties&quot;: false,
                                        &quot;properties&quot;: {
                                            &quot;channel_id&quot;: {
                                                &quot;$ref&quot;: &quot;#/definitions/defs_channel_id&quot;
                                            },
                                            &quot;date_created&quot;: {
                                                &quot;pattern&quot;: &quot;^\\d{10}$&quot;,
                                                &quot;type&quot;: &quot;integer&quot;
                                            },
                                            &quot;id&quot;: {
                                                &quot;pattern&quot;: &quot;^[Q][A-Z0-9]{8,}$&quot;,
                                                &quot;type&quot;: &quot;string&quot;
                                            },
                                            &quot;post_at&quot;: {
                                                &quot;pattern&quot;: &quot;^\\d{10}$&quot;,
                                                &quot;type&quot;: &quot;integer&quot;
                                            },
                                            &quot;text&quot;: {
                                                &quot;type&quot;: &quot;string&quot;
                                            }
                                        },
                                        &quot;required&quot;: [
                                            &quot;id&quot;,
                                            &quot;channel_id&quot;,
                                            &quot;post_at&quot;,
                                            &quot;date_created&quot;
                                        ],
                                        &quot;type&quot;: &quot;object&quot;
                                    },
                                    &quot;type&quot;: &quot;array&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;scheduled_messages&quot;,
                                &quot;response_metadata&quot;
                            ],
                            &quot;title&quot;: &quot;chat.scheduledMessages.list schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response if the channel passed is invalid&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from chat.scheduledMessages.list method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;invalid_channel&quot;,
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;token_revoked&quot;,
                                        &quot;no_permission&quot;,
                                        &quot;org_login_required&quot;,
                                        &quot;ekm_access_denied&quot;,
                                        &quot;missing_scope&quot;,
                                        &quot;invalid_arguments&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;team_added_to_org&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;upgrade_required&quot;,
                                        &quot;fatal_error&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;chat.scheduledMessages.list error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;none&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;chat.scheduledMessages&quot;,
                    &quot;chat&quot;
                ]
            }
        },
        &quot;/chat.unfurl&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Provide custom unfurl behavior for user-posted URLs&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/chat.unfurl&quot;
                },
                &quot;operationId&quot;: &quot;chat_unfurl&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `links:write`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Channel ID of the message&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;channel&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Timestamp of the message to add unfurl behavior to.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;ts&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;URL-encoded JSON map with keys set to URLs featured in the the message, pointing to their unfurl blocks or message attachments.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;unfurls&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Provide a simply-formatted string to send as an ephemeral message to the user as invitation to authenticate further and enable full unfurling behavior&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;user_auth_message&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Set to `true` or `1` to indicate the user must install your Slack app to trigger unfurls for this domain&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;user_auth_required&quot;,
                        &quot;type&quot;: &quot;boolean&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Send users to this custom URL where they will complete authentication in your app to fully trigger unfurling. Value should be properly URL-encoded.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;user_auth_url&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical, minimal success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response from chat.unfurl method&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;chat.unfurl success schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from chat.unfurl method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;cannot_unfurl_url&quot;,
                                        &quot;cannot_find_service&quot;,
                                        &quot;missing_unfurls&quot;,
                                        &quot;cannot_prompt&quot;,
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;token_revoked&quot;,
                                        &quot;no_permission&quot;,
                                        &quot;org_login_required&quot;,
                                        &quot;user_is_bot&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_array_arg&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;team_added_to_org&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;upgrade_required&quot;,
                                        &quot;fatal_error&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;chat.unfurl error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;links:write&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;chat&quot;
                ]
            }
        },
        &quot;/chat.update&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Updates a message.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/chat.update&quot;
                },
                &quot;operationId&quot;: &quot;chat_update&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `chat:write`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Pass true to update the message as the authed user. [Bot users](/bot-users) in this context are considered authed users.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;as_user&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;A JSON-based array of structured attachments, presented as a URL-encoded string. This field is required when not presenting `text`. If you don&apos;t include this field, the message&apos;s previous `attachments` will be retained. To remove previous `attachments`, include an empty array for this field.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;attachments&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;A JSON-based array of [structured blocks](/block-kit/building), presented as a URL-encoded string. If you don&apos;t include this field, the message&apos;s previous `blocks` will be retained. To remove previous `blocks`, include an empty array for this field.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;blocks&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Channel containing the message to be updated.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;channel&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Find and link channel names and usernames. Defaults to `none`. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, `none`.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;link_names&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Change how messages are treated. Defaults to `client`, unlike `chat.postMessage`. Accepts either `none` or `full`. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, `client`.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;parse&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;New text for the message, using the [default formatting rules](/reference/surfaces/formatting). It&apos;s not required when presenting `blocks` or `attachments`.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;text&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Timestamp of the message to be updated.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;ts&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response of chat.update method&quot;,
                            &quot;properties&quot;: {
                                &quot;channel&quot;: {
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;message&quot;: {
                                    &quot;properties&quot;: {
                                        &quot;attachments&quot;: {
                                            &quot;items&quot;: {
                                                &quot;type&quot;: &quot;object&quot;
                                            },
                                            &quot;type&quot;: &quot;array&quot;
                                        },
                                        &quot;blocks&quot;: {
                                            &quot;type&quot;: &quot;object&quot;
                                        },
                                        &quot;text&quot;: {
                                            &quot;type&quot;: &quot;string&quot;
                                        }
                                    },
                                    &quot;required&quot;: [
                                        &quot;text&quot;
                                    ],
                                    &quot;title&quot;: &quot;Message object&quot;,
                                    &quot;type&quot;: &quot;object&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                },
                                &quot;text&quot;: {
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ts&quot;: {
                                    &quot;type&quot;: &quot;string&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;channel&quot;,
                                &quot;ts&quot;,
                                &quot;text&quot;,
                                &quot;message&quot;
                            ],
                            &quot;title&quot;: &quot;chat.update success schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response chat.update method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;message_not_found&quot;,
                                        &quot;cant_update_message&quot;,
                                        &quot;channel_not_found&quot;,
                                        &quot;edit_window_closed&quot;,
                                        &quot;msg_too_long&quot;,
                                        &quot;too_many_attachments&quot;,
                                        &quot;rate_limited&quot;,
                                        &quot;no_text&quot;,
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;token_revoked&quot;,
                                        &quot;no_permission&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_array_arg&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;upgrade_required&quot;,
                                        &quot;fatal_error&quot;,
                                        &quot;is_inactive&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;chat.update error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;chat:write:user&quot;,
                            &quot;chat:write:bot&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;chat&quot;
                ]
            }
        },
        &quot;/conversations.archive&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Archives a conversation.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/conversations.archive&quot;
                },
                &quot;operationId&quot;: &quot;conversations_archive&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `conversations:write`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;ID of conversation to archive&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;channel&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response conversations.archive method&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;conversations.archive success schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from conversations.archive method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;method_not_supported_for_channel_type&quot;,
                                        &quot;missing_scope&quot;,
                                        &quot;not_supported&quot;,
                                        &quot;channel_not_found&quot;,
                                        &quot;already_archived&quot;,
                                        &quot;cant_archive_general&quot;,
                                        &quot;restricted_action&quot;,
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;user_is_bot&quot;,
                                        &quot;user_is_restricted&quot;,
                                        &quot;user_is_ultra_restricted&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_array_arg&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;upgrade_required&quot;,
                                        &quot;team_added_to_org&quot;,
                                        &quot;missing_charset&quot;,
                                        &quot;superfluous_charset&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;needed&quot;: {
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                },
                                &quot;provided&quot;: {
                                    &quot;type&quot;: &quot;string&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;conversations.archive error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;channels:write&quot;,
                            &quot;groups:write&quot;,
                            &quot;im:write&quot;,
                            &quot;mpim:write&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;conversations&quot;
                ]
            }
        },
        &quot;/conversations.close&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Closes a direct message or multi-person direct message.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/conversations.close&quot;
                },
                &quot;operationId&quot;: &quot;conversations_close&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `conversations:write`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Conversation to close.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;channel&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response conversations.close method&quot;,
                            &quot;properties&quot;: {
                                &quot;already_closed&quot;: {
                                    &quot;type&quot;: &quot;boolean&quot;
                                },
                                &quot;no_op&quot;: {
                                    &quot;type&quot;: &quot;boolean&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;conversations.close success schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from conversations.close method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;method_not_supported_for_channel_type&quot;,
                                        &quot;channel_not_found&quot;,
                                        &quot;user_does_not_own_channel&quot;,
                                        &quot;missing_scope&quot;,
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_array_arg&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;team_added_to_org&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;upgrade_required&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;needed&quot;: {
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                },
                                &quot;provided&quot;: {
                                    &quot;type&quot;: &quot;string&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;conversations.close error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;channels:write&quot;,
                            &quot;groups:write&quot;,
                            &quot;im:write&quot;,
                            &quot;mpim:write&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;conversations&quot;
                ]
            }
        },
        &quot;/conversations.create&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Initiates a public or private channel-based conversation&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/conversations.create&quot;
                },
                &quot;operationId&quot;: &quot;conversations_create&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `conversations:write`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Name of the public or private channel to create&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;name&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Create a private channel instead of a public one&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;is_private&quot;,
                        &quot;type&quot;: &quot;boolean&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;If successful, the command returns a rather stark [conversation object](/types/conversation)&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response conversations.create method&quot;,
                            &quot;properties&quot;: {
                                &quot;channel&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/objs_conversation&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;channel&quot;
                            ],
                            &quot;title&quot;: &quot;conversations.create success schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response when name already in use&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from conversations.create method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;detail&quot;: {
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;method_not_supported_for_channel_type&quot;,
                                        &quot;missing_scope&quot;,
                                        &quot;name_taken&quot;,
                                        &quot;restricted_action&quot;,
                                        &quot;no_channel&quot;,
                                        &quot;invalid_name_required&quot;,
                                        &quot;invalid_name_punctuation&quot;,
                                        &quot;invalid_name_maxlength&quot;,
                                        &quot;invalid_name_specials&quot;,
                                        &quot;invalid_name&quot;,
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;user_is_bot&quot;,
                                        &quot;user_is_restricted&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_array_arg&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;team_added_to_org&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;upgrade_required&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;needed&quot;: {
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                },
                                &quot;provided&quot;: {
                                    &quot;type&quot;: &quot;string&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;conversations.create error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;channels:write&quot;,
                            &quot;groups:write&quot;,
                            &quot;im:write&quot;,
                            &quot;mpim:write&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;conversations&quot;
                ]
            }
        },
        &quot;/conversations.history&quot;: {
            &quot;get&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;
                ],
                &quot;description&quot;: &quot;Fetches a conversation&apos;s history of messages and events.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/conversations.history&quot;
                },
                &quot;operationId&quot;: &quot;conversations_history&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `conversations:history`&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Conversation ID to fetch history for.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;channel&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;End of time range of messages to include in results.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;latest&quot;,
                        &quot;type&quot;: &quot;number&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Start of time range of messages to include in results.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;oldest&quot;,
                        &quot;type&quot;: &quot;number&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Include messages with latest or oldest timestamp in results only when either timestamp is specified.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;inclusive&quot;,
                        &quot;type&quot;: &quot;boolean&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn&apos;t been reached.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;limit&quot;,
                        &quot;type&quot;: &quot;integer&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request&apos;s `response_metadata`. Default value fetches the first \&quot;page\&quot; of the collection. See [pagination](/docs/pagination) for more detail.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;cursor&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response containing a channel&apos;s messages&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response from conversations.history method&quot;,
                            &quot;properties&quot;: {
                                &quot;channel_actions_count&quot;: {
                                    &quot;type&quot;: &quot;integer&quot;
                                },
                                &quot;channel_actions_ts&quot;: {
                                    &quot;items&quot;: [
                                        {
                                            &quot;type&quot;: &quot;integer&quot;
                                        },
                                        {
                                            &quot;type&quot;: &quot;null&quot;
                                        }
                                    ]
                                },
                                &quot;has_more&quot;: {
                                    &quot;type&quot;: &quot;boolean&quot;
                                },
                                &quot;messages&quot;: {
                                    &quot;items&quot;: {
                                        &quot;$ref&quot;: &quot;#/definitions/objs_message&quot;
                                    },
                                    &quot;minItems&quot;: 1,
                                    &quot;type&quot;: &quot;array&quot;,
                                    &quot;uniqueItems&quot;: true
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                },
                                &quot;pin_count&quot;: {
                                    &quot;type&quot;: &quot;integer&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;messages&quot;,
                                &quot;has_more&quot;,
                                &quot;pin_count&quot;,
                                &quot;channel_actions_ts&quot;,
                                &quot;channel_actions_count&quot;
                            ],
                            &quot;title&quot;: &quot;conversations.history success schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from conversations.history method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;missing_scope&quot;,
                                        &quot;channel_not_found&quot;,
                                        &quot;invalid_ts_latest&quot;,
                                        &quot;invalid_ts_oldest&quot;,
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_array_arg&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;upgrade_required&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;needed&quot;: {
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                },
                                &quot;provided&quot;: {
                                    &quot;type&quot;: &quot;string&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;conversations.history error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;channels:history&quot;,
                            &quot;groups:history&quot;,
                            &quot;im:history&quot;,
                            &quot;mpim:history&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;conversations&quot;
                ]
            }
        },
        &quot;/conversations.info&quot;: {
            &quot;get&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;
                ],
                &quot;description&quot;: &quot;Retrieve information about a conversation.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/conversations.info&quot;
                },
                &quot;operationId&quot;: &quot;conversations_info&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `conversations:read`&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Conversation ID to learn more about&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;channel&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Set this to `true` to receive the locale for this conversation. Defaults to `false`&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;include_locale&quot;,
                        &quot;type&quot;: &quot;boolean&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Set to `true` to include the member count for the specified conversation. Defaults to `false`&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;include_num_members&quot;,
                        &quot;type&quot;: &quot;boolean&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response for a public channel. (Also, a response from a private channel and a multi-party IM is very similar to this example.)&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response conversations.info&quot;,
                            &quot;properties&quot;: {
                                &quot;channel&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/objs_conversation&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;channel&quot;
                            ],
                            &quot;title&quot;: &quot;conversations.info success schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response when a channel cannot be found&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from conversations.info method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;missing_scope&quot;,
                                        &quot;channel_not_found&quot;,
                                        &quot;team_added_to_org&quot;,
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_array_arg&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;upgrade_required&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;needed&quot;: {
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                },
                                &quot;provided&quot;: {
                                    &quot;type&quot;: &quot;string&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;conversations.info error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;channels:read&quot;,
                            &quot;groups:read&quot;,
                            &quot;im:read&quot;,
                            &quot;mpim:read&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;conversations&quot;
                ]
            }
        },
        &quot;/conversations.invite&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Invites users to a channel.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/conversations.invite&quot;
                },
                &quot;operationId&quot;: &quot;conversations_invite&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `conversations:write`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The ID of the public or private channel to invite user(s) to.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;channel&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;A comma separated list of user IDs. Up to 1000 users may be listed.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;users&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response when an invitation is extended&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response from conversations.invite method&quot;,
                            &quot;properties&quot;: {
                                &quot;channel&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/objs_conversation&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;channel&quot;
                            ],
                            &quot;title&quot;: &quot;conversations.invite error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response when an invite is attempted on a conversation type that does not support it&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from conversations.invite method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;method_not_supported_for_channel_type&quot;,
                                        &quot;missing_scope&quot;,
                                        &quot;channel_not_found&quot;,
                                        &quot;user_not_found&quot;,
                                        &quot;no_user&quot;,
                                        &quot;cant_invite_self&quot;,
                                        &quot;not_in_channel&quot;,
                                        &quot;already_in_channel&quot;,
                                        &quot;is_archived&quot;,
                                        &quot;cant_invite&quot;,
                                        &quot;too_many_users&quot;,
                                        &quot;ura_max_channels&quot;,
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;user_is_bot&quot;,
                                        &quot;user_is_restricted&quot;,
                                        &quot;user_is_ultra_restricted&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_array_arg&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;upgrade_required&quot;,
                                        &quot;team_added_to_org&quot;,
                                        &quot;missing_charset&quot;,
                                        &quot;superfluous_charset&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;errors&quot;: {
                                    &quot;items&quot;: {
                                        &quot;additionalProperties&quot;: false,
                                        &quot;properties&quot;: {
                                            &quot;error&quot;: {
                                                &quot;enum&quot;: [
                                                    &quot;method_not_supported_for_channel_type&quot;,
                                                    &quot;missing_scope&quot;,
                                                    &quot;channel_not_found&quot;,
                                                    &quot;user_not_found&quot;,
                                                    &quot;no_user&quot;,
                                                    &quot;cant_invite_self&quot;,
                                                    &quot;not_in_channel&quot;,
                                                    &quot;already_in_channel&quot;,
                                                    &quot;is_archived&quot;,
                                                    &quot;cant_invite&quot;,
                                                    &quot;too_many_users&quot;,
                                                    &quot;ura_max_channels&quot;,
                                                    &quot;not_authed&quot;,
                                                    &quot;invalid_auth&quot;,
                                                    &quot;account_inactive&quot;,
                                                    &quot;user_is_bot&quot;,
                                                    &quot;user_is_restricted&quot;,
                                                    &quot;user_is_ultra_restricted&quot;,
                                                    &quot;invalid_arg_name&quot;,
                                                    &quot;invalid_array_arg&quot;,
                                                    &quot;invalid_charset&quot;,
                                                    &quot;invalid_form_data&quot;,
                                                    &quot;invalid_post_type&quot;,
                                                    &quot;missing_post_type&quot;,
                                                    &quot;invalid_json&quot;,
                                                    &quot;json_not_object&quot;,
                                                    &quot;request_timeout&quot;,
                                                    &quot;upgrade_required&quot;,
                                                    &quot;team_added_to_org&quot;,
                                                    &quot;missing_charset&quot;,
                                                    &quot;superfluous_charset&quot;
                                                ],
                                                &quot;type&quot;: &quot;string&quot;
                                            },
                                            &quot;ok&quot;: {
                                                &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                            },
                                            &quot;user&quot;: {
                                                &quot;$ref&quot;: &quot;#/definitions/defs_user_id&quot;
                                            }
                                        },
                                        &quot;required&quot;: [
                                            &quot;ok&quot;,
                                            &quot;error&quot;
                                        ],
                                        &quot;type&quot;: &quot;object&quot;
                                    },
                                    &quot;minItems&quot;: 1,
                                    &quot;title&quot;: &quot;errors is returned when an error associates an user&quot;,
                                    &quot;type&quot;: &quot;array&quot;,
                                    &quot;uniqueItems&quot;: true
                                },
                                &quot;needed&quot;: {
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                },
                                &quot;provided&quot;: {
                                    &quot;type&quot;: &quot;string&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;conversations.invite error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;channels:write&quot;,
                            &quot;groups:write&quot;,
                            &quot;im:write&quot;,
                            &quot;mpim:write&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;conversations&quot;
                ]
            }
        },
        &quot;/conversations.join&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Joins an existing conversation.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/conversations.join&quot;
                },
                &quot;operationId&quot;: &quot;conversations_join&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `channels:write`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;ID of conversation to join&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;channel&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response from conversations.join method&quot;,
                            &quot;properties&quot;: {
                                &quot;channel&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/objs_conversation&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                },
                                &quot;response_metadata&quot;: {
                                    &quot;properties&quot;: {
                                        &quot;warnings&quot;: {
                                            &quot;items&quot;: {
                                                &quot;type&quot;: &quot;string&quot;
                                            },
                                            &quot;minItems&quot;: 1,
                                            &quot;type&quot;: &quot;array&quot;,
                                            &quot;uniqueItems&quot;: true
                                        }
                                    },
                                    &quot;title&quot;: &quot;Response metadata&quot;,
                                    &quot;type&quot;: &quot;object&quot;
                                },
                                &quot;warning&quot;: {
                                    &quot;type&quot;: &quot;string&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;channel&quot;
                            ],
                            &quot;title&quot;: &quot;conversations.join success schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response if the conversation is archived and cannot be joined&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from conversations.join method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;method_not_supported_for_channel_type&quot;,
                                        &quot;missing_scope&quot;,
                                        &quot;channel_not_found&quot;,
                                        &quot;is_archived&quot;,
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;user_is_bot&quot;,
                                        &quot;user_is_restricted&quot;,
                                        &quot;user_is_ultra_restricted&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_array_arg&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;upgrade_required&quot;,
                                        &quot;team_added_to_org&quot;,
                                        &quot;missing_charset&quot;,
                                        &quot;superfluous_charset&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;needed&quot;: {
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                },
                                &quot;provided&quot;: {
                                    &quot;type&quot;: &quot;string&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;conversations.join error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;channels:write&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;conversations&quot;
                ]
            }
        },
        &quot;/conversations.kick&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Removes a user from a conversation.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/conversations.kick&quot;
                },
                &quot;operationId&quot;: &quot;conversations_kick&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `conversations:write`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;ID of conversation to remove user from.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;channel&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;User ID to be removed.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;user&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response conversations.kick method&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;conversations.kick success schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response when you attempt to kick yourself from a channel&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response conversations.kick method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;method_not_supported_for_channel_type&quot;,
                                        &quot;missing_scope&quot;,
                                        &quot;channel_not_found&quot;,
                                        &quot;user_not_found&quot;,
                                        &quot;cant_kick_self&quot;,
                                        &quot;not_in_channel&quot;,
                                        &quot;cant_kick_from_general&quot;,
                                        &quot;restricted_action&quot;,
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;user_is_bot&quot;,
                                        &quot;user_is_restricted&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_array_arg&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;upgrade_required&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;needed&quot;: {
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                },
                                &quot;provided&quot;: {
                                    &quot;type&quot;: &quot;string&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;conversations.kick error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;channels:write&quot;,
                            &quot;groups:write&quot;,
                            &quot;im:write&quot;,
                            &quot;mpim:write&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;conversations&quot;
                ]
            }
        },
        &quot;/conversations.leave&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Leaves a conversation.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/conversations.leave&quot;
                },
                &quot;operationId&quot;: &quot;conversations_leave&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `conversations:write`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Conversation to leave&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;channel&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response from conversations.leave method&quot;,
                            &quot;properties&quot;: {
                                &quot;not_in_channel&quot;: {
                                    &quot;enum&quot;: [
                                        true
                                    ],
                                    &quot;type&quot;: &quot;boolean&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;conversations.leave success schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response when attempting to leave a workspace&apos;s \&quot;general\&quot; channel&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from conversations.leave method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;method_not_supported_for_channel_type&quot;,
                                        &quot;last_member&quot;,
                                        &quot;missing_scope&quot;,
                                        &quot;channel_not_found&quot;,
                                        &quot;is_archived&quot;,
                                        &quot;cant_leave_general&quot;,
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;user_is_bot&quot;,
                                        &quot;user_is_restricted&quot;,
                                        &quot;user_is_ultra_restricted&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_array_arg&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;upgrade_required&quot;,
                                        &quot;team_added_to_org&quot;,
                                        &quot;missing_charset&quot;,
                                        &quot;superfluous_charset&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;needed&quot;: {
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                },
                                &quot;provided&quot;: {
                                    &quot;type&quot;: &quot;string&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;conversations.leave error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;channels:write&quot;,
                            &quot;groups:write&quot;,
                            &quot;im:write&quot;,
                            &quot;mpim:write&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;conversations&quot;
                ]
            }
        },
        &quot;/conversations.list&quot;: {
            &quot;get&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;
                ],
                &quot;description&quot;: &quot;Lists all channels in a Slack team.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/conversations.list&quot;
                },
                &quot;operationId&quot;: &quot;conversations_list&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `conversations:read`&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Set to `true` to exclude archived channels from the list&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;exclude_archived&quot;,
                        &quot;type&quot;: &quot;boolean&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Mix and match channel types by providing a comma-separated list of any combination of `public_channel`, `private_channel`, `mpim`, `im`&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;types&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn&apos;t been reached. Must be an integer no larger than 1000.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;limit&quot;,
                        &quot;type&quot;: &quot;integer&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request&apos;s `response_metadata`. Default value fetches the first \&quot;page\&quot; of the collection. See [pagination](/docs/pagination) for more detail.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;cursor&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response with only public channels&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response from conversations.list method&quot;,
                            &quot;properties&quot;: {
                                &quot;channels&quot;: {
                                    &quot;items&quot;: {
                                        &quot;$ref&quot;: &quot;#/definitions/objs_conversation&quot;
                                    },
                                    &quot;type&quot;: &quot;array&quot;,
                                    &quot;uniqueItems&quot;: true
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                },
                                &quot;response_metadata&quot;: {
                                    &quot;additionalProperties&quot;: false,
                                    &quot;properties&quot;: {
                                        &quot;next_cursor&quot;: {
                                            &quot;type&quot;: &quot;string&quot;
                                        }
                                    },
                                    &quot;required&quot;: [
                                        &quot;next_cursor&quot;
                                    ],
                                    &quot;type&quot;: &quot;object&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;channels&quot;
                            ],
                            &quot;title&quot;: &quot;conversations.list success schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from conversations.list method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;missing_scope&quot;,
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_array_arg&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;upgrade_required&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;needed&quot;: {
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                },
                                &quot;provided&quot;: {
                                    &quot;type&quot;: &quot;string&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;conversations.list error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;channels:read&quot;,
                            &quot;groups:read&quot;,
                            &quot;im:read&quot;,
                            &quot;mpim:read&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;conversations&quot;
                ]
            }
        },
        &quot;/conversations.mark&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Sets the read cursor in a channel.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/conversations.mark&quot;
                },
                &quot;operationId&quot;: &quot;conversations_mark&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `conversations:write`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Channel or conversation to set the read cursor for.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;channel&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Unique identifier of message you want marked as most recently seen in this conversation.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;ts&quot;,
                        &quot;type&quot;: &quot;number&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response conversations.mark method&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;conversations.mark success schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from conversations.mark method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;method_not_supported_for_channel_type&quot;,
                                        &quot;missing_scope&quot;,
                                        &quot;channel_not_found&quot;,
                                        &quot;invalid_timestamp&quot;,
                                        &quot;not_in_channel&quot;,
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_array_arg&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;upgrade_required&quot;,
                                        &quot;not_allowed_token_type&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;needed&quot;: {
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                },
                                &quot;provided&quot;: {
                                    &quot;type&quot;: &quot;string&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;conversations.mark error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;channels:write&quot;,
                            &quot;groups:write&quot;,
                            &quot;im:write&quot;,
                            &quot;mpim:write&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;conversations&quot;
                ]
            }
        },
        &quot;/conversations.members&quot;: {
            &quot;get&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;
                ],
                &quot;description&quot;: &quot;Retrieve members of a conversation.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/conversations.members&quot;
                },
                &quot;operationId&quot;: &quot;conversations_members&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `conversations:read`&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;ID of the conversation to retrieve members for&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;channel&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn&apos;t been reached.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;limit&quot;,
                        &quot;type&quot;: &quot;integer&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request&apos;s `response_metadata`. Default value fetches the first \&quot;page\&quot; of the collection. See [pagination](/docs/pagination) for more detail.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;cursor&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical paginated success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response conversations.members method&quot;,
                            &quot;properties&quot;: {
                                &quot;members&quot;: {
                                    &quot;items&quot;: {
                                        &quot;$ref&quot;: &quot;#/definitions/defs_user_id&quot;
                                    },
                                    &quot;minItems&quot;: 1,
                                    &quot;type&quot;: &quot;array&quot;,
                                    &quot;uniqueItems&quot;: true
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                },
                                &quot;response_metadata&quot;: {
                                    &quot;additionalProperties&quot;: false,
                                    &quot;properties&quot;: {
                                        &quot;next_cursor&quot;: {
                                            &quot;type&quot;: &quot;string&quot;
                                        }
                                    },
                                    &quot;required&quot;: [
                                        &quot;next_cursor&quot;
                                    ],
                                    &quot;type&quot;: &quot;object&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;members&quot;,
                                &quot;response_metadata&quot;
                            ],
                            &quot;title&quot;: &quot;conversations.members success schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response when an invalid cursor is provided&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response conversations.members method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;channel_not_found&quot;,
                                        &quot;invalid_limit&quot;,
                                        &quot;invalid_cursor&quot;,
                                        &quot;fetch_members_failed&quot;,
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_array_arg&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;team_added_to_org&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;upgrade_required&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;conversations.members error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;channels:read&quot;,
                            &quot;groups:read&quot;,
                            &quot;im:read&quot;,
                            &quot;mpim:read&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;conversations&quot;
                ]
            }
        },
        &quot;/conversations.open&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Opens or resumes a direct message or multi-person direct message.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/conversations.open&quot;
                },
                &quot;operationId&quot;: &quot;conversations_open&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `conversations:write`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Resume a conversation by supplying an `im` or `mpim`&apos;s ID. Or provide the `users` field instead.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;channel&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Comma separated lists of users. If only one user is included, this creates a 1:1 DM.  The ordering of the users is preserved whenever a multi-person direct message is returned. Supply a `channel` when not supplying `users`.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;users&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Boolean, indicates you want the full IM channel definition in the response.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;return_im&quot;,
                        &quot;type&quot;: &quot;boolean&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response from conversations.open method when opening channels, ims, mpims&quot;,
                            &quot;properties&quot;: {
                                &quot;already_open&quot;: {
                                    &quot;type&quot;: &quot;boolean&quot;
                                },
                                &quot;channel&quot;: {
                                    &quot;items&quot;: [
                                        {
                                            &quot;$ref&quot;: &quot;#/definitions/objs_conversation&quot;
                                        },
                                        {
                                            &quot;additionalProperties&quot;: false,
                                            &quot;properties&quot;: {
                                                &quot;created&quot;: {
                                                    &quot;type&quot;: &quot;string&quot;
                                                },
                                                &quot;id&quot;: {
                                                    &quot;$ref&quot;: &quot;#/definitions/defs_dm_id&quot;
                                                },
                                                &quot;is_im&quot;: {
                                                    &quot;type&quot;: &quot;boolean&quot;
                                                },
                                                &quot;is_open&quot;: {
                                                    &quot;type&quot;: &quot;boolean&quot;
                                                },
                                                &quot;last_read&quot;: {
                                                    &quot;$ref&quot;: &quot;#/definitions/defs_ts&quot;
                                                },
                                                &quot;latest&quot;: {
                                                    &quot;$ref&quot;: &quot;#/definitions/objs_message&quot;
                                                },
                                                &quot;unread_count&quot;: {
                                                    &quot;type&quot;: &quot;number&quot;
                                                },
                                                &quot;unread_count_display&quot;: {
                                                    &quot;type&quot;: &quot;number&quot;
                                                },
                                                &quot;user&quot;: {
                                                    &quot;$ref&quot;: &quot;#/definitions/defs_user_id&quot;
                                                }
                                            },
                                            &quot;required&quot;: [
                                                &quot;id&quot;
                                            ],
                                            &quot;type&quot;: &quot;object&quot;
                                        }
                                    ]
                                },
                                &quot;no_op&quot;: {
                                    &quot;type&quot;: &quot;boolean&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;channel&quot;
                            ],
                            &quot;title&quot;: &quot;conversations.open success schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from conversations.open method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;method_not_supported_for_channel_type&quot;,
                                        &quot;user_not_found&quot;,
                                        &quot;user_not_visible&quot;,
                                        &quot;user_disabled&quot;,
                                        &quot;users_list_not_supplied&quot;,
                                        &quot;not_enough_users&quot;,
                                        &quot;too_many_users&quot;,
                                        &quot;invalid_user_combination&quot;,
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_array_arg&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;team_added_to_org&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;upgrade_required&quot;,
                                        &quot;channel_not_found&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;conversations.open error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;channels:write&quot;,
                            &quot;groups:write&quot;,
                            &quot;im:write&quot;,
                            &quot;mpim:write&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;conversations&quot;
                ]
            }
        },
        &quot;/conversations.rename&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Renames a conversation.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/conversations.rename&quot;
                },
                &quot;operationId&quot;: &quot;conversations_rename&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `conversations:write`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;ID of conversation to rename&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;channel&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;New name for conversation.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;name&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response from conversations.rename method&quot;,
                            &quot;properties&quot;: {
                                &quot;channel&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/objs_conversation&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;channel&quot;
                            ],
                            &quot;title&quot;: &quot;conversations.rename success schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response when the calling user is not a member of the conversation&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from conversations.rename method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;user_is_restricted&quot;,
                                        &quot;method_not_supported_for_channel_type&quot;,
                                        &quot;missing_scope&quot;,
                                        &quot;channel_not_found&quot;,
                                        &quot;not_in_channel&quot;,
                                        &quot;not_authorized&quot;,
                                        &quot;invalid_name&quot;,
                                        &quot;name_taken&quot;,
                                        &quot;invalid_name_required&quot;,
                                        &quot;invalid_name_punctuation&quot;,
                                        &quot;invalid_name_maxlength&quot;,
                                        &quot;invalid_name_specials&quot;,
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_array_arg&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;upgrade_required&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;needed&quot;: {
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                },
                                &quot;provided&quot;: {
                                    &quot;type&quot;: &quot;string&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;conversations.rename error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;channels:write&quot;,
                            &quot;groups:write&quot;,
                            &quot;im:write&quot;,
                            &quot;mpim:write&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;conversations&quot;
                ]
            }
        },
        &quot;/conversations.replies&quot;: {
            &quot;get&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;
                ],
                &quot;description&quot;: &quot;Retrieve a thread of messages posted to a conversation&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/conversations.replies&quot;
                },
                &quot;operationId&quot;: &quot;conversations_replies&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `conversations:history`&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Conversation ID to fetch thread from.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;channel&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Unique identifier of a thread&apos;s parent message. `ts` must be the timestamp of an existing message with 0 or more replies. If there are no replies then just the single message referenced by `ts` will return - it is just an ordinary, unthreaded message.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;ts&quot;,
                        &quot;type&quot;: &quot;number&quot;
                    },
                    {
                        &quot;description&quot;: &quot;End of time range of messages to include in results.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;latest&quot;,
                        &quot;type&quot;: &quot;number&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Start of time range of messages to include in results.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;oldest&quot;,
                        &quot;type&quot;: &quot;number&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Include messages with latest or oldest timestamp in results only when either timestamp is specified.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;inclusive&quot;,
                        &quot;type&quot;: &quot;boolean&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn&apos;t been reached.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;limit&quot;,
                        &quot;type&quot;: &quot;integer&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request&apos;s `response_metadata`. Default value fetches the first \&quot;page\&quot; of the collection. See [pagination](/docs/pagination) for more detail.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;cursor&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response from conversations.replies method&quot;,
                            &quot;properties&quot;: {
                                &quot;has_more&quot;: {
                                    &quot;type&quot;: &quot;boolean&quot;
                                },
                                &quot;messages&quot;: {
                                    &quot;items&quot;: {
                                        &quot;items&quot;: [
                                            {
                                                &quot;additionalProperties&quot;: false,
                                                &quot;properties&quot;: {
                                                    &quot;last_read&quot;: {
                                                        &quot;$ref&quot;: &quot;#/definitions/defs_ts&quot;
                                                    },
                                                    &quot;latest_reply&quot;: {
                                                        &quot;$ref&quot;: &quot;#/definitions/defs_ts&quot;
                                                    },
                                                    &quot;reply_count&quot;: {
                                                        &quot;type&quot;: &quot;integer&quot;
                                                    },
                                                    &quot;reply_users&quot;: {
                                                        &quot;items&quot;: {
                                                            &quot;$ref&quot;: &quot;#/definitions/defs_user_id&quot;
                                                        },
                                                        &quot;type&quot;: &quot;array&quot;,
                                                        &quot;uniqueItems&quot;: true
                                                    },
                                                    &quot;reply_users_count&quot;: {
                                                        &quot;type&quot;: &quot;integer&quot;
                                                    },
                                                    &quot;source_team&quot;: {
                                                        &quot;$ref&quot;: &quot;#/definitions/defs_team&quot;
                                                    },
                                                    &quot;subscribed&quot;: {
                                                        &quot;type&quot;: &quot;boolean&quot;
                                                    },
                                                    &quot;team&quot;: {
                                                        &quot;$ref&quot;: &quot;#/definitions/defs_team&quot;
                                                    },
                                                    &quot;text&quot;: {
                                                        &quot;type&quot;: &quot;string&quot;
                                                    },
                                                    &quot;thread_ts&quot;: {
                                                        &quot;$ref&quot;: &quot;#/definitions/defs_ts&quot;
                                                    },
                                                    &quot;ts&quot;: {
                                                        &quot;$ref&quot;: &quot;#/definitions/defs_ts&quot;
                                                    },
                                                    &quot;type&quot;: {
                                                        &quot;type&quot;: &quot;string&quot;
                                                    },
                                                    &quot;unread_count&quot;: {
                                                        &quot;type&quot;: &quot;integer&quot;
                                                    },
                                                    &quot;user&quot;: {
                                                        &quot;$ref&quot;: &quot;#/definitions/defs_user_id&quot;
                                                    },
                                                    &quot;user_profile&quot;: {
                                                        &quot;$ref&quot;: &quot;#/definitions/objs_user_profile_short&quot;
                                                    },
                                                    &quot;user_team&quot;: {
                                                        &quot;$ref&quot;: &quot;#/definitions/defs_team&quot;
                                                    }
                                                },
                                                &quot;required&quot;: [
                                                    &quot;type&quot;,
                                                    &quot;user&quot;,
                                                    &quot;text&quot;,
                                                    &quot;thread_ts&quot;,
                                                    &quot;reply_count&quot;,
                                                    &quot;subscribed&quot;,
                                                    &quot;ts&quot;
                                                ],
                                                &quot;type&quot;: &quot;object&quot;
                                            },
                                            {
                                                &quot;additionalProperties&quot;: false,
                                                &quot;properties&quot;: {
                                                    &quot;is_starred&quot;: {
                                                        &quot;type&quot;: &quot;boolean&quot;
                                                    },
                                                    &quot;parent_user_id&quot;: {
                                                        &quot;$ref&quot;: &quot;#/definitions/defs_user_id&quot;
                                                    },
                                                    &quot;source_team&quot;: {
                                                        &quot;$ref&quot;: &quot;#/definitions/defs_team&quot;
                                                    },
                                                    &quot;team&quot;: {
                                                        &quot;$ref&quot;: &quot;#/definitions/defs_team&quot;
                                                    },
                                                    &quot;text&quot;: {
                                                        &quot;type&quot;: &quot;string&quot;
                                                    },
                                                    &quot;thread_ts&quot;: {
                                                        &quot;$ref&quot;: &quot;#/definitions/defs_ts&quot;
                                                    },
                                                    &quot;ts&quot;: {
                                                        &quot;$ref&quot;: &quot;#/definitions/defs_ts&quot;
                                                    },
                                                    &quot;type&quot;: {
                                                        &quot;type&quot;: &quot;string&quot;
                                                    },
                                                    &quot;user&quot;: {
                                                        &quot;$ref&quot;: &quot;#/definitions/defs_user_id&quot;
                                                    },
                                                    &quot;user_profile&quot;: {
                                                        &quot;$ref&quot;: &quot;#/definitions/objs_user_profile_short&quot;
                                                    },
                                                    &quot;user_team&quot;: {
                                                        &quot;$ref&quot;: &quot;#/definitions/defs_team&quot;
                                                    }
                                                },
                                                &quot;required&quot;: [
                                                    &quot;type&quot;,
                                                    &quot;user&quot;,
                                                    &quot;text&quot;,
                                                    &quot;thread_ts&quot;,
                                                    &quot;parent_user_id&quot;,
                                                    &quot;ts&quot;
                                                ],
                                                &quot;type&quot;: &quot;object&quot;
                                            }
                                        ]
                                    },
                                    &quot;type&quot;: &quot;array&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;messages&quot;
                            ],
                            &quot;title&quot;: &quot;conversations.replies success schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from conversations.replies method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;missing_scope&quot;,
                                        &quot;channel_not_found&quot;,
                                        &quot;thread_not_found&quot;,
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_array_arg&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;team_added_to_org&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;upgrade_required&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;needed&quot;: {
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                },
                                &quot;provided&quot;: {
                                    &quot;type&quot;: &quot;string&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;conversations.replies error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;channels:history&quot;,
                            &quot;groups:history&quot;,
                            &quot;im:history&quot;,
                            &quot;mpim:history&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;conversations&quot;
                ]
            }
        },
        &quot;/conversations.setPurpose&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Sets the purpose for a conversation.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/conversations.setPurpose&quot;
                },
                &quot;operationId&quot;: &quot;conversations_setPurpose&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `conversations:write`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Conversation to set the purpose of&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;channel&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;A new, specialer purpose&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;purpose&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response from conversations.setPurpose method&quot;,
                            &quot;properties&quot;: {
                                &quot;channel&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/objs_conversation&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;channel&quot;
                            ],
                            &quot;title&quot;: &quot;conversations.setPurpose success schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from conversations.setPurpose method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;method_not_supported_for_channel_type&quot;,
                                        &quot;missing_scope&quot;,
                                        &quot;channel_not_found&quot;,
                                        &quot;not_in_channel&quot;,
                                        &quot;is_archived&quot;,
                                        &quot;too_long&quot;,
                                        &quot;user_is_restricted&quot;,
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_array_arg&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;team_added_to_org&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;upgrade_required&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;needed&quot;: {
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                },
                                &quot;provided&quot;: {
                                    &quot;type&quot;: &quot;string&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;conversations.setPurpose error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;channels:write&quot;,
                            &quot;groups:write&quot;,
                            &quot;im:write&quot;,
                            &quot;mpim:write&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;conversations&quot;
                ]
            }
        },
        &quot;/conversations.setTopic&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Sets the topic for a conversation.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/conversations.setTopic&quot;
                },
                &quot;operationId&quot;: &quot;conversations_setTopic&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `conversations:write`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Conversation to set the topic of&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;channel&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The new topic string. Does not support formatting or linkification.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;topic&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response from conversations.setTopic method&quot;,
                            &quot;properties&quot;: {
                                &quot;channel&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/objs_conversation&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;channel&quot;
                            ],
                            &quot;title&quot;: &quot;conversations.setTopic success schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from conversations.setTopic method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;method_not_supported_for_channel_type&quot;,
                                        &quot;missing_scope&quot;,
                                        &quot;channel_not_found&quot;,
                                        &quot;not_in_channel&quot;,
                                        &quot;is_archived&quot;,
                                        &quot;too_long&quot;,
                                        &quot;user_is_restricted&quot;,
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_array_arg&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;team_added_to_org&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;upgrade_required&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;needed&quot;: {
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                },
                                &quot;provided&quot;: {
                                    &quot;type&quot;: &quot;string&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;conversations.setTopic error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;channels:write&quot;,
                            &quot;groups:write&quot;,
                            &quot;im:write&quot;,
                            &quot;mpim:write&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;conversations&quot;
                ]
            }
        },
        &quot;/conversations.unarchive&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Reverses conversation archival.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/conversations.unarchive&quot;
                },
                &quot;operationId&quot;: &quot;conversations_unarchive&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `conversations:write`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;ID of conversation to unarchive&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;channel&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response from conversations.unarchive method&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;conversations.unarchive success schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from conversations.unarchive method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;method_not_supported_for_channel_type&quot;,
                                        &quot;missing_scope&quot;,
                                        &quot;channel_not_found&quot;,
                                        &quot;not_archived&quot;,
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;user_is_bot&quot;,
                                        &quot;user_is_restricted&quot;,
                                        &quot;user_is_ultra_restricted&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_array_arg&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;upgrade_required&quot;,
                                        &quot;team_added_to_org&quot;,
                                        &quot;missing_charset&quot;,
                                        &quot;superfluous_charset&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;needed&quot;: {
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                },
                                &quot;provided&quot;: {
                                    &quot;type&quot;: &quot;string&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;conversations.unarchive error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;channels:write&quot;,
                            &quot;groups:write&quot;,
                            &quot;im:write&quot;,
                            &quot;mpim:write&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;conversations&quot;
                ]
            }
        },
        &quot;/dialog.open&quot;: {
            &quot;get&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Open a dialog with a user&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/dialog.open&quot;
                },
                &quot;operationId&quot;: &quot;dialog_open&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `none`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The dialog definition. This must be a JSON-encoded string.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;dialog&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Exchange a trigger to post to the user.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;trigger_id&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response is quite minimal.&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response from dialog.open method&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;dialog.open schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response, before getting to any possible validation errors.&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from dialog.open method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;validation_errors&quot;,
                                        &quot;missing_trigger&quot;,
                                        &quot;missing_dialog&quot;,
                                        &quot;trigger_exchanged&quot;,
                                        &quot;trigger_expired&quot;,
                                        &quot;invalid_trigger&quot;,
                                        &quot;app_missing_action_url&quot;,
                                        &quot;cannot_create_dialog&quot;,
                                        &quot;failed_sending_dialog&quot;,
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;token_revoked&quot;,
                                        &quot;no_permission&quot;,
                                        &quot;org_login_required&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_array_arg&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;team_added_to_org&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;upgrade_required&quot;,
                                        &quot;fatal_error&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;dialog.open error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;none&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;dialog&quot;
                ]
            }
        },
        &quot;/dnd.endDnd&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Ends the current user&apos;s Do Not Disturb session immediately.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/dnd.endDnd&quot;
                },
                &quot;operationId&quot;: &quot;dnd_endDnd&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `dnd:write`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response from dnd.endDnd method&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;dnd.endDnd schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from dnd.endDnd method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;unknown_error&quot;,
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;token_revoked&quot;,
                                        &quot;no_permission&quot;,
                                        &quot;org_login_required&quot;,
                                        &quot;user_is_bot&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_array_arg&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;team_added_to_org&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;upgrade_required&quot;,
                                        &quot;fatal_error&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;dnd.endDnd error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;dnd:write&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;dnd&quot;
                ]
            }
        },
        &quot;/dnd.endSnooze&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Ends the current user&apos;s snooze mode immediately.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/dnd.endSnooze&quot;
                },
                &quot;operationId&quot;: &quot;dnd_endSnooze&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `dnd:write`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response from dnd.endSnooze method&quot;,
                            &quot;properties&quot;: {
                                &quot;dnd_enabled&quot;: {
                                    &quot;type&quot;: &quot;boolean&quot;
                                },
                                &quot;next_dnd_end_ts&quot;: {
                                    &quot;type&quot;: &quot;integer&quot;
                                },
                                &quot;next_dnd_start_ts&quot;: {
                                    &quot;type&quot;: &quot;integer&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                },
                                &quot;snooze_enabled&quot;: {
                                    &quot;type&quot;: &quot;boolean&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;dnd_enabled&quot;,
                                &quot;next_dnd_start_ts&quot;,
                                &quot;next_dnd_end_ts&quot;,
                                &quot;snooze_enabled&quot;
                            ],
                            &quot;title&quot;: &quot;dnd.endSnooze schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from dnd.endSnooze method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;snooze_not_active&quot;,
                                        &quot;snooze_end_failed&quot;,
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;token_revoked&quot;,
                                        &quot;no_permission&quot;,
                                        &quot;org_login_required&quot;,
                                        &quot;user_is_bot&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_array_arg&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;team_added_to_org&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;upgrade_required&quot;,
                                        &quot;fatal_error&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;dnd.endSnooze error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;dnd:write&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;dnd&quot;
                ]
            }
        },
        &quot;/dnd.info&quot;: {
            &quot;get&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;
                ],
                &quot;description&quot;: &quot;Retrieves a user&apos;s current Do Not Disturb status.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/dnd.info&quot;
                },
                &quot;operationId&quot;: &quot;dnd_info&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `dnd:read`&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;User to fetch status for (defaults to current user)&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;user&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response from dnd.info method&quot;,
                            &quot;properties&quot;: {
                                &quot;dnd_enabled&quot;: {
                                    &quot;type&quot;: &quot;boolean&quot;
                                },
                                &quot;next_dnd_end_ts&quot;: {
                                    &quot;type&quot;: &quot;integer&quot;
                                },
                                &quot;next_dnd_start_ts&quot;: {
                                    &quot;type&quot;: &quot;integer&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                },
                                &quot;snooze_enabled&quot;: {
                                    &quot;type&quot;: &quot;boolean&quot;
                                },
                                &quot;snooze_endtime&quot;: {
                                    &quot;type&quot;: &quot;integer&quot;
                                },
                                &quot;snooze_remaining&quot;: {
                                    &quot;type&quot;: &quot;integer&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;dnd_enabled&quot;,
                                &quot;next_dnd_start_ts&quot;,
                                &quot;next_dnd_end_ts&quot;
                            ],
                            &quot;title&quot;: &quot;dnd.info schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from dnd.info method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;user_not_found&quot;,
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;token_revoked&quot;,
                                        &quot;no_permission&quot;,
                                        &quot;org_login_required&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_array_arg&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;team_added_to_org&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;upgrade_required&quot;,
                                        &quot;fatal_error&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;dnd.info error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;dnd:read&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;dnd&quot;
                ]
            }
        },
        &quot;/dnd.setSnooze&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;
                ],
                &quot;description&quot;: &quot;Turns on Do Not Disturb mode for the current user, or changes its duration.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/dnd.setSnooze&quot;
                },
                &quot;operationId&quot;: &quot;dnd_setSnooze&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `dnd:write`&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Number of minutes, from now, to snooze until.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;num_minutes&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response from dnd.setSnooze method&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                },
                                &quot;snooze_enabled&quot;: {
                                    &quot;type&quot;: &quot;boolean&quot;
                                },
                                &quot;snooze_endtime&quot;: {
                                    &quot;type&quot;: &quot;integer&quot;
                                },
                                &quot;snooze_remaining&quot;: {
                                    &quot;type&quot;: &quot;integer&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;snooze_enabled&quot;,
                                &quot;snooze_endtime&quot;,
                                &quot;snooze_remaining&quot;
                            ],
                            &quot;title&quot;: &quot;dnd.setSnooze schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from dnd.setSnooze method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;missing_duration&quot;,
                                        &quot;snooze_failed&quot;,
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;token_revoked&quot;,
                                        &quot;no_permission&quot;,
                                        &quot;org_login_required&quot;,
                                        &quot;user_is_bot&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_array_arg&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;team_added_to_org&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;upgrade_required&quot;,
                                        &quot;too_long&quot;,
                                        &quot;fatal_error&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;dnd.setSnooze error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;dnd:write&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;dnd&quot;
                ]
            }
        },
        &quot;/dnd.teamInfo&quot;: {
            &quot;get&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;
                ],
                &quot;description&quot;: &quot;Retrieves the Do Not Disturb status for up to 50 users on a team.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/dnd.teamInfo&quot;
                },
                &quot;operationId&quot;: &quot;dnd_teamInfo&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `dnd:read`&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Comma-separated list of users to fetch Do Not Disturb status for&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;users&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default success template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default error template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;dnd:read&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;dnd&quot;
                ]
            }
        },
        &quot;/emoji.list&quot;: {
            &quot;get&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;
                ],
                &quot;description&quot;: &quot;Lists custom emoji for a team.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/emoji.list&quot;
                },
                &quot;operationId&quot;: &quot;emoji_list&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `emoji:read`&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default success template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default error template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;emoji:read&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;emoji&quot;
                ]
            }
        },
        &quot;/files.comments.delete&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Deletes an existing comment on a file.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/files.comments.delete&quot;
                },
                &quot;operationId&quot;: &quot;files_comments_delete&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `files:write:user`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;File to delete a comment from.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;file&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The comment to delete.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;id&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Standard success response is very simple&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response files.comments.delete method&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;files.comments.delete schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Standard failure response when used with an invalid token&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response files.comments.delete method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;cant_delete&quot;,
                                        &quot;comment_not_found&quot;,
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;no_permission&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_array_arg&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;upgrade_required&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;files.comments.delete error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;files:write:user&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;files.comments&quot;,
                    &quot;files&quot;
                ]
            }
        },
        &quot;/files.delete&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Deletes a file.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/files.delete&quot;
                },
                &quot;operationId&quot;: &quot;files_delete&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `files:write:user`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;ID of file to delete.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;file&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response files.delete method&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;files.delete schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response files.delete method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;file_not_found&quot;,
                                        &quot;file_deleted&quot;,
                                        &quot;cant_delete_file&quot;,
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;no_permission&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_array_arg&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;team_added_to_org&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;upgrade_required&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;files.delete error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;files:write:user&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;files&quot;
                ]
            }
        },
        &quot;/files.info&quot;: {
            &quot;get&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;
                ],
                &quot;description&quot;: &quot;Gets information about a file.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/files.info&quot;
                },
                &quot;operationId&quot;: &quot;files_info&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `files:read`&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Specify a file by providing its ID.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;file&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;count&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;page&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn&apos;t been reached.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;limit&quot;,
                        &quot;type&quot;: &quot;integer&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Parameter for pagination. File comments are paginated for a single file. Set `cursor` equal to the `next_cursor` attribute returned by the previous request&apos;s `response_metadata`. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \&quot;page\&quot; of the collection of comments. See [pagination](/docs/pagination) for more details.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;cursor&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response from files.info method&quot;,
                            &quot;properties&quot;: {
                                &quot;comments&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/objs_comments&quot;
                                },
                                &quot;content_html&quot;: {
                                    &quot;type&quot;: &quot;null&quot;
                                },
                                &quot;editor&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_user_id&quot;
                                },
                                &quot;file&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/objs_file&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                },
                                &quot;paging&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/objs_paging&quot;
                                },
                                &quot;response_metadata&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/objs_response_metadata&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;file&quot;,
                                &quot;comments&quot;
                            ],
                            &quot;title&quot;: &quot;files.info schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from files.info method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;file_not_found&quot;,
                                        &quot;file_deleted&quot;,
                                        &quot;timezone_count_failed&quot;,
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;no_permission&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_array_arg&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;team_added_to_org&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;upgrade_required&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;files.info error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;files:read&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;files&quot;
                ]
            }
        },
        &quot;/files.list&quot;: {
            &quot;get&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;
                ],
                &quot;description&quot;: &quot;List for a team, in a channel, or from a user with applied filters.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/files.list&quot;
                },
                &quot;operationId&quot;: &quot;files_list&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `files:read`&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Filter files created by a single user.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;user&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Filter files appearing in a specific channel, indicated by its ID.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;channel&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Filter files created after this timestamp (inclusive).&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;ts_from&quot;,
                        &quot;type&quot;: &quot;number&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Filter files created before this timestamp (inclusive).&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;ts_to&quot;,
                        &quot;type&quot;: &quot;number&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Filter files by type ([see below](#file_types)). You can pass multiple values in the types argument, like `types=spaces,snippets`.The default value is `all`, which does not filter the list.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;types&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;count&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;page&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Show truncated file info for files hidden due to being too old, and the team who owns the file being over the file limit.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;show_files_hidden_by_limit&quot;,
                        &quot;type&quot;: &quot;boolean&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response from files.list method&quot;,
                            &quot;properties&quot;: {
                                &quot;files&quot;: {
                                    &quot;items&quot;: {
                                        &quot;$ref&quot;: &quot;#/definitions/objs_file&quot;
                                    },
                                    &quot;minItems&quot;: 0,
                                    &quot;type&quot;: &quot;array&quot;,
                                    &quot;uniqueItems&quot;: true
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                },
                                &quot;paging&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/objs_paging&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;files&quot;,
                                &quot;paging&quot;
                            ],
                            &quot;title&quot;: &quot;files.list schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from files.list method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;user_not_found&quot;,
                                        &quot;unknown_type&quot;,
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;no_permission&quot;,
                                        &quot;user_is_bot&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_array_arg&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;team_added_to_org&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;upgrade_required&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;files.list error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;files:read&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;files&quot;
                ]
            }
        },
        &quot;/files.remote.add&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;
                ],
                &quot;description&quot;: &quot;Adds a file from a remote service&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/files.remote.add&quot;
                },
                &quot;operationId&quot;: &quot;files_remote_add&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `remote_files:write`&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Creator defined GUID for the file.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;external_id&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Title of the file being shared.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;title&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;type of file&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;filetype&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;URL of the remote file.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;external_url&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Preview of the document via `multipart/form-data`.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;preview_image&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;A text file (txt, pdf, doc, etc.) containing textual search terms that are used to improve discovery of the remote file.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;indexable_file_contents&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default success template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default error template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;remote_files:write&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;files.remote&quot;,
                    &quot;files&quot;
                ]
            }
        },
        &quot;/files.remote.info&quot;: {
            &quot;get&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;
                ],
                &quot;description&quot;: &quot;Retrieve information about a remote file added to Slack&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/files.remote.info&quot;
                },
                &quot;operationId&quot;: &quot;files_remote_info&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `remote_files:read`&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Specify a file by providing its ID.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;file&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Creator defined GUID for the file.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;external_id&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default success template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default error template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;remote_files:read&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;files.remote&quot;,
                    &quot;files&quot;
                ]
            }
        },
        &quot;/files.remote.list&quot;: {
            &quot;get&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;
                ],
                &quot;description&quot;: &quot;Retrieve information about a remote file added to Slack&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/files.remote.list&quot;
                },
                &quot;operationId&quot;: &quot;files_remote_list&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `remote_files:read`&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Filter files appearing in a specific channel, indicated by its ID.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;channel&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Filter files created after this timestamp (inclusive).&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;ts_from&quot;,
                        &quot;type&quot;: &quot;number&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Filter files created before this timestamp (inclusive).&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;ts_to&quot;,
                        &quot;type&quot;: &quot;number&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The maximum number of items to return.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;limit&quot;,
                        &quot;type&quot;: &quot;integer&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request&apos;s `response_metadata`. Default value fetches the first \&quot;page\&quot; of the collection. See [pagination](/docs/pagination) for more detail.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;cursor&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default success template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default error template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;remote_files:read&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;files.remote&quot;,
                    &quot;files&quot;
                ]
            }
        },
        &quot;/files.remote.remove&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;
                ],
                &quot;description&quot;: &quot;Remove a remote file.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/files.remote.remove&quot;
                },
                &quot;operationId&quot;: &quot;files_remote_remove&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `remote_files:write`&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Specify a file by providing its ID.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;file&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Creator defined GUID for the file.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;external_id&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default success template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default error template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;remote_files:write&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;files.remote&quot;,
                    &quot;files&quot;
                ]
            }
        },
        &quot;/files.remote.share&quot;: {
            &quot;get&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;
                ],
                &quot;description&quot;: &quot;Share a remote file into a channel.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/files.remote.share&quot;
                },
                &quot;operationId&quot;: &quot;files_remote_share&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `remote_files:share`&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Specify a file registered with Slack by providing its ID. Either this field or `external_id` or both are required.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;file&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The globally unique identifier (GUID) for the file, as set by the app registering the file with Slack.  Either this field or `file` or both are required.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;external_id&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Comma-separated list of channel IDs where the file will be shared.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;channels&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default success template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default error template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;remote_files:share&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;files.remote&quot;,
                    &quot;files&quot;
                ]
            }
        },
        &quot;/files.remote.update&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;
                ],
                &quot;description&quot;: &quot;Updates an existing remote file.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/files.remote.update&quot;
                },
                &quot;operationId&quot;: &quot;files_remote_update&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `remote_files:write`&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Specify a file by providing its ID.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;file&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Creator defined GUID for the file.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;external_id&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Title of the file being shared.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;title&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;type of file&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;filetype&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;URL of the remote file.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;external_url&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Preview of the document via `multipart/form-data`.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;preview_image&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;File containing contents that can be used to improve searchability for the remote file.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;indexable_file_contents&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default success template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default error template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;remote_files:write&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;files.remote&quot;,
                    &quot;files&quot;
                ]
            }
        },
        &quot;/files.revokePublicURL&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Revokes public/external sharing access for a file&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/files.revokePublicURL&quot;
                },
                &quot;operationId&quot;: &quot;files_revokePublicURL&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `files:write:user`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;File to revoke&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;file&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response from files.revokePublicURL method&quot;,
                            &quot;properties&quot;: {
                                &quot;file&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/objs_file&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;file&quot;
                            ],
                            &quot;title&quot;: &quot;files.revokePublicURL schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from files.revokePublicURL method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;file_not_found&quot;,
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;token_revoked&quot;,
                                        &quot;no_permission&quot;,
                                        &quot;org_login_required&quot;,
                                        &quot;user_is_bot&quot;,
                                        &quot;user_is_restricted&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_array_arg&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;team_added_to_org&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;upgrade_required&quot;,
                                        &quot;fatal_error&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;files.revokePublicURL error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;files:write:user&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;files&quot;
                ]
            }
        },
        &quot;/files.sharedPublicURL&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Enables a file for public/external sharing.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/files.sharedPublicURL&quot;
                },
                &quot;operationId&quot;: &quot;files_sharedPublicURL&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `files:write:user`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;File to share&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;file&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response from files.sharedPublicURL method&quot;,
                            &quot;properties&quot;: {
                                &quot;file&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/objs_file&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;file&quot;
                            ],
                            &quot;title&quot;: &quot;files.sharedPublicURL schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from files.sharedPublicURL method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;file_not_found&quot;,
                                        &quot;not_allowed&quot;,
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;token_revoked&quot;,
                                        &quot;no_permission&quot;,
                                        &quot;org_login_required&quot;,
                                        &quot;user_is_bot&quot;,
                                        &quot;user_is_restricted&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_array_arg&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;team_added_to_org&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;upgrade_required&quot;,
                                        &quot;fatal_error&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;files.sharedPublicURL error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;files:write:user&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;files&quot;
                ]
            }
        },
        &quot;/files.upload&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;
                ],
                &quot;description&quot;: &quot;Uploads or creates a file.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/files.upload&quot;
                },
                &quot;operationId&quot;: &quot;files_upload&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `files:write:user`&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;File contents via `multipart/form-data`. If omitting this parameter, you must submit `content`.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;file&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;File contents via a POST variable. If omitting this parameter, you must provide a `file`.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;content&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;A [file type](/types/file#file_types) identifier.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;filetype&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Filename of file.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;filename&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Title of file.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;title&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The message text introducing the file in specified `channels`.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;initial_comment&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Comma-separated list of channel names or IDs where the file will be shared.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;channels&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Provide another message&apos;s `ts` value to upload this file as a reply. Never use a reply&apos;s `ts` value; use its parent instead.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;thread_ts&quot;,
                        &quot;type&quot;: &quot;number&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Success response after uploading a file to a channel with an initial message&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response files.upload method&quot;,
                            &quot;properties&quot;: {
                                &quot;file&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/objs_file&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;file&quot;
                            ],
                            &quot;title&quot;: &quot;files.upload schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response files.upload method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;posting_to_general_channel_denied&quot;,
                                        &quot;invalid_channel&quot;,
                                        &quot;file_uploads_disabled&quot;,
                                        &quot;file_upload_size_restricted&quot;,
                                        &quot;file_uploads_except_images_disabled&quot;,
                                        &quot;storage_limit_reached&quot;,
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;no_permission&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_array_arg&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;team_added_to_org&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;upgrade_required&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;files.upload error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;files:write:user&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;files&quot;
                ]
            }
        },
        &quot;/migration.exchange&quot;: {
            &quot;get&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;
                ],
                &quot;description&quot;: &quot;For Enterprise Grid workspaces, map local user IDs to global user IDs&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/migration.exchange&quot;
                },
                &quot;operationId&quot;: &quot;migration_exchange&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `tokens.basic`&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;A comma-separated list of user ids, up to 400 per request&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;users&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Specify team_id starts with `T` in case of Org Token&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;team_id&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Specify `true` to convert `W` global user IDs to workspace-specific `U` IDs. Defaults to `false`.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;to_old&quot;,
                        &quot;type&quot;: &quot;boolean&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response when mappings exist for the specified user IDs&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;Schema for successful response from migration.exchange method&quot;,
                            &quot;properties&quot;: {
                                &quot;enterprise_id&quot;: {
                                    &quot;title&quot;: &quot;The enterprise grid organization ID containing the workspace/team.&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;invalid_user_ids&quot;: {
                                    &quot;items&quot;: {
                                        &quot;type&quot;: &quot;string&quot;
                                    },
                                    &quot;title&quot;: &quot;A list of User IDs that cannot be mapped or found&quot;,
                                    &quot;type&quot;: &quot;array&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                },
                                &quot;team_id&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_team&quot;
                                },
                                &quot;user_id_map&quot;: {
                                    &quot;additionalProperties&quot;: true,
                                    &quot;title&quot;: &quot;A mapping of provided user IDs with mapped user IDs&quot;,
                                    &quot;type&quot;: &quot;object&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;team_id&quot;,
                                &quot;enterprise_id&quot;
                            ],
                            &quot;title&quot;: &quot;migration.exchange success schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response when there are no mappings to provide&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from migration.exchange method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;not_enterprise_team&quot;,
                                        &quot;too_many_users&quot;,
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;token_revoked&quot;,
                                        &quot;no_permission&quot;,
                                        &quot;org_login_required&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_array_arg&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;team_added_to_org&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;upgrade_required&quot;,
                                        &quot;fatal_error&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;migration.exchange error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;tokens.basic&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;migration&quot;
                ]
            }
        },
        &quot;/oauth.access&quot;: {
            &quot;get&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;
                ],
                &quot;description&quot;: &quot;Exchanges a temporary OAuth verifier code for an access token.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/oauth.access&quot;
                },
                &quot;operationId&quot;: &quot;oauth_access&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Issued when you created your application.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;client_id&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Issued when you created your application.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;client_secret&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The `code` param returned via the OAuth callback.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;code&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;This must match the originally submitted URI (if one was sent).&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;redirect_uri&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Request the user to add your app only to a single channel. Only valid with a [legacy workspace app](https://api.slack.com/legacy-workspace-apps).&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;single_channel&quot;,
                        &quot;type&quot;: &quot;boolean&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Successful user token negotiation for a single scope&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default success template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default error template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;none&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;oauth&quot;
                ]
            }
        },
        &quot;/oauth.token&quot;: {
            &quot;get&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;
                ],
                &quot;description&quot;: &quot;Exchanges a temporary OAuth verifier code for a workspace token.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/oauth.token&quot;
                },
                &quot;operationId&quot;: &quot;oauth_token&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Issued when you created your application.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;client_id&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Issued when you created your application.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;client_secret&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The `code` param returned via the OAuth callback.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;code&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;This must match the originally submitted URI (if one was sent).&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;redirect_uri&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Request the user to add your app only to a single channel.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;single_channel&quot;,
                        &quot;type&quot;: &quot;boolean&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Success example using a workspace app produces a very different kind of response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default success template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default error template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;none&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;oauth&quot;
                ]
            }
        },
        &quot;/oauth.v2.access&quot;: {
            &quot;get&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;
                ],
                &quot;description&quot;: &quot;Exchanges a temporary OAuth verifier code for an access token.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/oauth.v2.access&quot;
                },
                &quot;operationId&quot;: &quot;oauth_v2_access&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Issued when you created your application.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;client_id&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Issued when you created your application.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;client_secret&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The `code` param returned via the OAuth callback.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;code&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;This must match the originally submitted URI (if one was sent).&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;redirect_uri&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Successful token request with scopes for both a bot user and a user token&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default success template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default error template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;none&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;oauth.v2&quot;,
                    &quot;oauth&quot;
                ]
            }
        },
        &quot;/pins.add&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Pins an item to a channel.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/pins.add&quot;
                },
                &quot;operationId&quot;: &quot;pins_add&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `pins:write`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Channel to pin the item in.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;channel&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Timestamp of the message to pin.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;timestamp&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response from pins.add method&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;pins.add schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from pins.add method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;bad_timestamp&quot;,
                                        &quot;message_not_found&quot;,
                                        &quot;channel_not_found&quot;,
                                        &quot;no_item_specified&quot;,
                                        &quot;already_pinned&quot;,
                                        &quot;permission_denied&quot;,
                                        &quot;file_not_shared&quot;,
                                        &quot;not_pinnable&quot;,
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;no_permission&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_array_arg&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;team_added_to_org&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;upgrade_required&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;pins.add error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;pins:write&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;pins&quot;
                ]
            }
        },
        &quot;/pins.list&quot;: {
            &quot;get&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;
                ],
                &quot;description&quot;: &quot;Lists items pinned to a channel.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/pins.list&quot;
                },
                &quot;operationId&quot;: &quot;pins_list&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `pins:read`&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Channel to get pinned items for.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;channel&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;description&quot;: &quot;Schema for successful response from pins.list method&quot;,
                            &quot;items&quot;: [
                                {
                                    &quot;additionalProperties&quot;: false,
                                    &quot;properties&quot;: {
                                        &quot;items&quot;: {
                                            &quot;items&quot;: [
                                                {
                                                    &quot;additionalProperties&quot;: false,
                                                    &quot;properties&quot;: {
                                                        &quot;created&quot;: {
                                                            &quot;type&quot;: &quot;integer&quot;
                                                        },
                                                        &quot;created_by&quot;: {
                                                            &quot;$ref&quot;: &quot;#/definitions/defs_user_id&quot;
                                                        },
                                                        &quot;file&quot;: {
                                                            &quot;$ref&quot;: &quot;#/definitions/objs_file&quot;
                                                        },
                                                        &quot;type&quot;: {
                                                            &quot;enum&quot;: [
                                                                &quot;file&quot;
                                                            ],
                                                            &quot;type&quot;: &quot;string&quot;
                                                        }
                                                    },
                                                    &quot;title&quot;: &quot;File Pin&quot;,
                                                    &quot;type&quot;: &quot;object&quot;
                                                },
                                                {
                                                    &quot;additionalProperties&quot;: false,
                                                    &quot;properties&quot;: {
                                                        &quot;channel&quot;: {
                                                            &quot;$ref&quot;: &quot;#/definitions/defs_channel&quot;
                                                        },
                                                        &quot;created&quot;: {
                                                            &quot;type&quot;: &quot;integer&quot;
                                                        },
                                                        &quot;created_by&quot;: {
                                                            &quot;$ref&quot;: &quot;#/definitions/defs_user_id&quot;
                                                        },
                                                        &quot;message&quot;: {
                                                            &quot;$ref&quot;: &quot;#/definitions/objs_message&quot;
                                                        },
                                                        &quot;type&quot;: {
                                                            &quot;enum&quot;: [
                                                                &quot;message&quot;
                                                            ],
                                                            &quot;type&quot;: &quot;string&quot;
                                                        }
                                                    },
                                                    &quot;title&quot;: &quot;Message Pin&quot;,
                                                    &quot;type&quot;: &quot;object&quot;
                                                }
                                            ],
                                            &quot;type&quot;: &quot;array&quot;,
                                            &quot;uniqueItems&quot;: true
                                        },
                                        &quot;ok&quot;: {
                                            &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                        }
                                    },
                                    &quot;required&quot;: [
                                        &quot;ok&quot;,
                                        &quot;items&quot;
                                    ],
                                    &quot;type&quot;: &quot;object&quot;
                                },
                                {
                                    &quot;additionalProperties&quot;: false,
                                    &quot;properties&quot;: {
                                        &quot;count&quot;: {
                                            &quot;type&quot;: &quot;integer&quot;
                                        },
                                        &quot;ok&quot;: {
                                            &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                        }
                                    },
                                    &quot;required&quot;: [
                                        &quot;ok&quot;,
                                        &quot;count&quot;
                                    ],
                                    &quot;type&quot;: &quot;object&quot;
                                }
                            ],
                            &quot;title&quot;: &quot;pins.list success schema&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from pins.list method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;channel_not_found&quot;,
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;no_permission&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_array_arg&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;team_added_to_org&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;upgrade_required&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;pins.list error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;pins:read&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;pins&quot;
                ]
            }
        },
        &quot;/pins.remove&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Un-pins an item from a channel.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/pins.remove&quot;
                },
                &quot;operationId&quot;: &quot;pins_remove&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `pins:write`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Channel where the item is pinned to.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;channel&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Timestamp of the message to un-pin.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;timestamp&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response from pins.remove method&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;pins.remove schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from pins.remove method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;bad_timestamp&quot;,
                                        &quot;file_not_found&quot;,
                                        &quot;file_comment_not_found&quot;,
                                        &quot;message_not_found&quot;,
                                        &quot;no_item_specified&quot;,
                                        &quot;not_pinned&quot;,
                                        &quot;permission_denied&quot;,
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;no_permission&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_array_arg&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_typ&quot;,
                                        &quot;missing_post_typ&quot;,
                                        &quot;team_added_to_org&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeou&quot;,
                                        &quot;upgrade_required&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;pins.remove error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;pins:write&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;pins&quot;
                ]
            }
        },
        &quot;/reactions.add&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Adds a reaction to an item.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/reactions.add&quot;
                },
                &quot;operationId&quot;: &quot;reactions_add&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Channel where the message to add reaction to was posted.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;channel&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Reaction (emoji) name.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;name&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Timestamp of the message to add reaction to.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;timestamp&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `reactions:write`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response from reactions.add method&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;reactions.add schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from reactions.add method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;bad_timestamp&quot;,
                                        &quot;message_not_found&quot;,
                                        &quot;no_item_specified&quot;,
                                        &quot;invalid_name&quot;,
                                        &quot;already_reacted&quot;,
                                        &quot;too_many_emoji&quot;,
                                        &quot;too_many_reactions&quot;,
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;no_permission&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_array_arg&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;team_added_to_org&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;upgrade_required&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;reactions.add error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;reactions:write&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;reactions&quot;
                ]
            }
        },
        &quot;/reactions.get&quot;: {
            &quot;get&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;
                ],
                &quot;description&quot;: &quot;Gets reactions for an item.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/reactions.get&quot;
                },
                &quot;operationId&quot;: &quot;reactions_get&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `reactions:read`&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Channel where the message to get reactions for was posted.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;channel&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;File to get reactions for.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;file&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;File comment to get reactions for.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;file_comment&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;If true always return the complete reaction list.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;full&quot;,
                        &quot;type&quot;: &quot;boolean&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Timestamp of the message to get reactions for.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;timestamp&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;description&quot;: &quot;Schema for successful response from reactions.get method&quot;,
                            &quot;items&quot;: [
                                {
                                    &quot;additionalProperties&quot;: false,
                                    &quot;properties&quot;: {
                                        &quot;channel&quot;: {
                                            &quot;$ref&quot;: &quot;#/definitions/defs_channel&quot;
                                        },
                                        &quot;message&quot;: {
                                            &quot;$ref&quot;: &quot;#/definitions/objs_message&quot;
                                        },
                                        &quot;ok&quot;: {
                                            &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                        },
                                        &quot;type&quot;: {
                                            &quot;enum&quot;: [
                                                &quot;message&quot;
                                            ],
                                            &quot;type&quot;: &quot;string&quot;
                                        }
                                    },
                                    &quot;required&quot;: [
                                        &quot;ok&quot;,
                                        &quot;type&quot;,
                                        &quot;channel&quot;,
                                        &quot;message&quot;
                                    ]
                                },
                                {
                                    &quot;additionalProperties&quot;: false,
                                    &quot;properties&quot;: {
                                        &quot;file&quot;: {
                                            &quot;$ref&quot;: &quot;#/definitions/objs_file&quot;
                                        },
                                        &quot;ok&quot;: {
                                            &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                        },
                                        &quot;type&quot;: {
                                            &quot;enum&quot;: [
                                                &quot;file&quot;
                                            ],
                                            &quot;type&quot;: &quot;string&quot;
                                        }
                                    },
                                    &quot;required&quot;: [
                                        &quot;ok&quot;,
                                        &quot;type&quot;,
                                        &quot;file&quot;
                                    ]
                                },
                                {
                                    &quot;additionalProperties&quot;: false,
                                    &quot;properties&quot;: {
                                        &quot;comment&quot;: {
                                            &quot;$ref&quot;: &quot;#/definitions/objs_comment&quot;
                                        },
                                        &quot;file&quot;: {
                                            &quot;$ref&quot;: &quot;#/definitions/objs_file&quot;
                                        },
                                        &quot;ok&quot;: {
                                            &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                        },
                                        &quot;type&quot;: {
                                            &quot;enum&quot;: [
                                                &quot;file_comment&quot;
                                            ],
                                            &quot;type&quot;: &quot;string&quot;
                                        }
                                    },
                                    &quot;required&quot;: [
                                        &quot;ok&quot;,
                                        &quot;type&quot;,
                                        &quot;file&quot;,
                                        &quot;comment&quot;
                                    ]
                                }
                            ],
                            &quot;title&quot;: &quot;reactions.get success schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from reactions.get method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;bad_timestamp&quot;,
                                        &quot;file_not_found&quot;,
                                        &quot;file_comment_not_found&quot;,
                                        &quot;message_not_found&quot;,
                                        &quot;no_item_specified&quot;,
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;no_permission&quot;,
                                        &quot;invalid_array_arg&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;team_added_to_org&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;upgrade_required&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;reactions.get error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;reactions:read&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;reactions&quot;
                ]
            }
        },
        &quot;/reactions.list&quot;: {
            &quot;get&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;
                ],
                &quot;description&quot;: &quot;Lists reactions made by a user.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/reactions.list&quot;
                },
                &quot;operationId&quot;: &quot;reactions_list&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `reactions:read`&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Show reactions made by this user. Defaults to the authed user.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;user&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;If true always return the complete reaction list.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;full&quot;,
                        &quot;type&quot;: &quot;boolean&quot;
                    },
                    {
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;count&quot;,
                        &quot;type&quot;: &quot;integer&quot;
                    },
                    {
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;page&quot;,
                        &quot;type&quot;: &quot;integer&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Parameter for pagination. Set `cursor` equal to the `next_cursor` attribute returned by the previous request&apos;s `response_metadata`. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \&quot;page\&quot; of the collection. See [pagination](/docs/pagination) for more details.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;cursor&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn&apos;t been reached.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;limit&quot;,
                        &quot;type&quot;: &quot;integer&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response from reactions.list method&quot;,
                            &quot;properties&quot;: {
                                &quot;items&quot;: {
                                    &quot;items&quot;: {
                                        &quot;items&quot;: [
                                            {
                                                &quot;additionalProperties&quot;: false,
                                                &quot;properties&quot;: {
                                                    &quot;channel&quot;: {
                                                        &quot;$ref&quot;: &quot;#/definitions/defs_channel&quot;
                                                    },
                                                    &quot;message&quot;: {
                                                        &quot;$ref&quot;: &quot;#/definitions/objs_message&quot;
                                                    },
                                                    &quot;type&quot;: {
                                                        &quot;enum&quot;: [
                                                            &quot;message&quot;
                                                        ],
                                                        &quot;type&quot;: &quot;string&quot;
                                                    }
                                                },
                                                &quot;required&quot;: [
                                                    &quot;type&quot;,
                                                    &quot;channel&quot;,
                                                    &quot;message&quot;
                                                ],
                                                &quot;type&quot;: &quot;object&quot;
                                            },
                                            {
                                                &quot;additionalProperties&quot;: false,
                                                &quot;properties&quot;: {
                                                    &quot;file&quot;: {
                                                        &quot;$ref&quot;: &quot;#/definitions/objs_file&quot;
                                                    },
                                                    &quot;type&quot;: {
                                                        &quot;enum&quot;: [
                                                            &quot;file&quot;
                                                        ],
                                                        &quot;type&quot;: &quot;string&quot;
                                                    }
                                                },
                                                &quot;required&quot;: [
                                                    &quot;type&quot;,
                                                    &quot;file&quot;
                                                ],
                                                &quot;type&quot;: &quot;object&quot;
                                            },
                                            {
                                                &quot;additionalProperties&quot;: false,
                                                &quot;properties&quot;: {
                                                    &quot;comment&quot;: {
                                                        &quot;$ref&quot;: &quot;#/definitions/objs_comment&quot;
                                                    },
                                                    &quot;file&quot;: {
                                                        &quot;$ref&quot;: &quot;#/definitions/objs_file&quot;
                                                    },
                                                    &quot;type&quot;: {
                                                        &quot;enum&quot;: [
                                                            &quot;file_comment&quot;
                                                        ],
                                                        &quot;type&quot;: &quot;string&quot;
                                                    }
                                                },
                                                &quot;required&quot;: [
                                                    &quot;type&quot;,
                                                    &quot;file&quot;,
                                                    &quot;comment&quot;
                                                ],
                                                &quot;type&quot;: &quot;object&quot;
                                            }
                                        ]
                                    },
                                    &quot;type&quot;: &quot;array&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                },
                                &quot;paging&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/objs_paging&quot;
                                },
                                &quot;response_metadata&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/objs_response_metadata&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;items&quot;
                            ],
                            &quot;title&quot;: &quot;reactions.list schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from reactions.list method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;user_not_found&quot;,
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactiv&quot;,
                                        &quot;no_permission&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_array_arg&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;team_added_to_org&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;upgrade_required&quot;,
                                        &quot;fatal_error&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;reactions.list error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;reactions:read&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;reactions&quot;
                ]
            }
        },
        &quot;/reactions.remove&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Removes a reaction from an item.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/reactions.remove&quot;
                },
                &quot;operationId&quot;: &quot;reactions_remove&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `reactions:write`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Reaction (emoji) name.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;name&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;File to remove reaction from.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;file&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;File comment to remove reaction from.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;file_comment&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Channel where the message to remove reaction from was posted.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;channel&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Timestamp of the message to remove reaction from.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;timestamp&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response from reactions.remove method&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;reactions.remove schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from reactions.remove method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;bad_timestamp&quot;,
                                        &quot;file_not_found&quot;,
                                        &quot;file_comment_not_found&quot;,
                                        &quot;message_not_found&quot;,
                                        &quot;no_item_specified&quot;,
                                        &quot;invalid_name&quot;,
                                        &quot;no_reaction&quot;,
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;no_permission&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_array_arg&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;team_added_to_org&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;upgrade_required&quot;,
                                        &quot;fatal_error&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;reactions.remove error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;reactions:write&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;reactions&quot;
                ]
            }
        },
        &quot;/reminders.add&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Creates a reminder.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/reminders.add&quot;
                },
                &quot;operationId&quot;: &quot;reminders_add&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `reminders:write`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The content of the reminder&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;text&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;When this reminder should happen: the Unix timestamp (up to five years from now), the number of seconds until the reminder (if within 24 hours), or a natural language description (Ex. \&quot;in 15 minutes,\&quot; or \&quot;every Thursday\&quot;)&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;time&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The user who will receive the reminder. If no user is specified, the reminder will go to user who created it.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;user&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response from reminders.add method&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                },
                                &quot;reminder&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/objs_reminder&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;reminder&quot;
                            ],
                            &quot;title&quot;: &quot;reminders.add schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from reminders.add method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;cannot_parse&quot;,
                                        &quot;user_not_found&quot;,
                                        &quot;cannot_add_bot&quot;,
                                        &quot;cannot_add_slackbot&quot;,
                                        &quot;cannot_add_others&quot;,
                                        &quot;cannot_add_others_recurring&quot;,
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;token_revoked&quot;,
                                        &quot;no_permission&quot;,
                                        &quot;org_login_required&quot;,
                                        &quot;user_is_bot&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_array_arg&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;team_added_to_org&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;upgrade_required&quot;,
                                        &quot;fatal_error&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;reminders.add error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;reminders:write&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;reminders&quot;
                ]
            }
        },
        &quot;/reminders.complete&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Marks a reminder as complete.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/reminders.complete&quot;
                },
                &quot;operationId&quot;: &quot;reminders_complete&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `reminders:write`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The ID of the reminder to be marked as complete&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;reminder&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response from reminders.complete method&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;reminders.complete schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from reminders.complete method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;not_found&quot;,
                                        &quot;cannot_complete_recurring&quot;,
                                        &quot;cannot_complete_others&quot;,
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;token_revoked&quot;,
                                        &quot;no_permission&quot;,
                                        &quot;org_login_required&quot;,
                                        &quot;user_is_bot&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_array_arg&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;team_added_to_org&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;upgrade_required&quot;,
                                        &quot;fatal_error&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;reminders.complete error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;reminders:write&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;reminders&quot;
                ]
            }
        },
        &quot;/reminders.delete&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Deletes a reminder.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/reminders.delete&quot;
                },
                &quot;operationId&quot;: &quot;reminders_delete&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `reminders:write`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The ID of the reminder&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;reminder&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response from reminders.delete method&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;reminders.delete schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from reminders.delete method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;not_found&quot;,
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;token_revoked&quot;,
                                        &quot;no_permission&quot;,
                                        &quot;org_login_required&quot;,
                                        &quot;user_is_bot&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_array_arg&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;team_added_to_org&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;upgrade_required&quot;,
                                        &quot;fatal_error&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;reminders.delete error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;reminders:write&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;reminders&quot;
                ]
            }
        },
        &quot;/reminders.info&quot;: {
            &quot;get&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;
                ],
                &quot;description&quot;: &quot;Gets information about a reminder.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/reminders.info&quot;
                },
                &quot;operationId&quot;: &quot;reminders_info&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `reminders:read`&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The ID of the reminder&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;reminder&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response from reminders.info method&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                },
                                &quot;reminder&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/objs_reminder&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;reminder&quot;
                            ],
                            &quot;title&quot;: &quot;reminders.info schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from reminders.info method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;not_found&quot;,
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;token_revoked&quot;,
                                        &quot;no_permission&quot;,
                                        &quot;org_login_required&quot;,
                                        &quot;user_is_bot&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_array_arg&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;team_added_to_org&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;upgrade_required&quot;,
                                        &quot;fatal_error&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;reminders.info error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;reminders:read&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;reminders&quot;
                ]
            }
        },
        &quot;/reminders.list&quot;: {
            &quot;get&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;
                ],
                &quot;description&quot;: &quot;Lists all reminders created by or for a given user.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/reminders.list&quot;
                },
                &quot;operationId&quot;: &quot;reminders_list&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `reminders:read`&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response from reminders.list method&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                },
                                &quot;reminders&quot;: {
                                    &quot;items&quot;: {
                                        &quot;$ref&quot;: &quot;#/definitions/objs_reminder&quot;
                                    },
                                    &quot;type&quot;: &quot;array&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;reminders&quot;
                            ],
                            &quot;title&quot;: &quot;reminders.list schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from reminders.list method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;token_revoked&quot;,
                                        &quot;no_permission&quot;,
                                        &quot;org_login_required&quot;,
                                        &quot;user_is_bot&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_array_arg&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;team_added_to_org&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;upgrade_required&quot;,
                                        &quot;fatal_error&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;reminders.list error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;reminders:read&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;reminders&quot;
                ]
            }
        },
        &quot;/rtm.connect&quot;: {
            &quot;get&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;
                ],
                &quot;description&quot;: &quot;Starts a Real Time Messaging session.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/rtm.connect&quot;
                },
                &quot;operationId&quot;: &quot;rtm_connect&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `rtm:stream`&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Batch presence deliveries via subscription. Enabling changes the shape of `presence_change` events. See [batch presence](/docs/presence-and-status#batching).&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;batch_presence_aware&quot;,
                        &quot;type&quot;: &quot;boolean&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Only deliver presence events when requested by subscription. See [presence subscriptions](/docs/presence-and-status#subscriptions).&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;presence_sub&quot;,
                        &quot;type&quot;: &quot;boolean&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response from rtm.connect method&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                },
                                &quot;self&quot;: {
                                    &quot;additionalProperties&quot;: false,
                                    &quot;properties&quot;: {
                                        &quot;id&quot;: {
                                            &quot;$ref&quot;: &quot;#/definitions/defs_user_id&quot;
                                        },
                                        &quot;name&quot;: {
                                            &quot;type&quot;: &quot;string&quot;
                                        }
                                    },
                                    &quot;required&quot;: [
                                        &quot;id&quot;,
                                        &quot;name&quot;
                                    ],
                                    &quot;type&quot;: &quot;object&quot;
                                },
                                &quot;team&quot;: {
                                    &quot;additionalProperties&quot;: false,
                                    &quot;properties&quot;: {
                                        &quot;domain&quot;: {
                                            &quot;type&quot;: &quot;string&quot;
                                        },
                                        &quot;id&quot;: {
                                            &quot;$ref&quot;: &quot;#/definitions/defs_team&quot;
                                        },
                                        &quot;name&quot;: {
                                            &quot;type&quot;: &quot;string&quot;
                                        }
                                    },
                                    &quot;required&quot;: [
                                        &quot;id&quot;,
                                        &quot;name&quot;,
                                        &quot;domain&quot;
                                    ],
                                    &quot;type&quot;: &quot;object&quot;
                                },
                                &quot;url&quot;: {
                                    &quot;format&quot;: &quot;uri&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;url&quot;,
                                &quot;team&quot;,
                                &quot;self&quot;
                            ],
                            &quot;title&quot;: &quot;rtm.connect schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from rtm.connect method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;token_revoked&quot;,
                                        &quot;no_permission&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_array_arg&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;team_added_to_org&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;upgrade_required&quot;,
                                        &quot;fatal_error&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;rtm.connect error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;rtm:stream&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;rtm&quot;
                ]
            }
        },
        &quot;/search.messages&quot;: {
            &quot;get&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;
                ],
                &quot;description&quot;: &quot;Searches for messages matching a query.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/search.messages&quot;
                },
                &quot;operationId&quot;: &quot;search_messages&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `search:read`&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Pass the number of results you want per \&quot;page\&quot;. Maximum of `100`.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;count&quot;,
                        &quot;type&quot;: &quot;integer&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Pass a value of `true` to enable query highlight markers (see below).&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;highlight&quot;,
                        &quot;type&quot;: &quot;boolean&quot;
                    },
                    {
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;page&quot;,
                        &quot;type&quot;: &quot;integer&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Search query.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;query&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Return matches sorted by either `score` or `timestamp`.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;sort&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Change sort direction to ascending (`asc`) or descending (`desc`).&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;sort_dir&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default success template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default error template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;search:read&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;search&quot;
                ]
            }
        },
        &quot;/stars.add&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Adds a star to an item.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/stars.add&quot;
                },
                &quot;operationId&quot;: &quot;stars_add&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `stars:write`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Channel to add star to, or channel where the message to add star to was posted (used with `timestamp`).&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;channel&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;File to add star to.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;file&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;File comment to add star to.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;file_comment&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Timestamp of the message to add star to.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;timestamp&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response from stars.add method&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;stars.add schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from stars.add method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;bad_timestamp&quot;,
                                        &quot;message_not_found&quot;,
                                        &quot;file_not_found&quot;,
                                        &quot;file_comment_not_found&quot;,
                                        &quot;channel_not_found&quot;,
                                        &quot;no_item_specified&quot;,
                                        &quot;already_starred&quot;,
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;token_revoked&quot;,
                                        &quot;no_permission&quot;,
                                        &quot;org_login_required&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_array_arg&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;team_added_to_org&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;upgrade_required&quot;,
                                        &quot;fatal_error&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;stars.add error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;stars:write&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;stars&quot;
                ]
            }
        },
        &quot;/stars.list&quot;: {
            &quot;get&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;
                ],
                &quot;description&quot;: &quot;Lists stars for a user.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/stars.list&quot;
                },
                &quot;operationId&quot;: &quot;stars_list&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `stars:read`&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;count&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;page&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Parameter for pagination. Set `cursor` equal to the `next_cursor` attribute returned by the previous request&apos;s `response_metadata`. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \&quot;page\&quot; of the collection. See [pagination](/docs/pagination) for more details.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;cursor&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn&apos;t been reached.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;limit&quot;,
                        &quot;type&quot;: &quot;integer&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response from stars.list method&quot;,
                            &quot;properties&quot;: {
                                &quot;items&quot;: {
                                    &quot;items&quot;: {
                                        &quot;items&quot;: [
                                            {
                                                &quot;additionalProperties&quot;: false,
                                                &quot;properties&quot;: {
                                                    &quot;channel&quot;: {
                                                        &quot;$ref&quot;: &quot;#/definitions/defs_channel&quot;
                                                    },
                                                    &quot;date_create&quot;: {
                                                        &quot;type&quot;: &quot;integer&quot;
                                                    },
                                                    &quot;message&quot;: {
                                                        &quot;$ref&quot;: &quot;#/definitions/objs_message&quot;
                                                    },
                                                    &quot;type&quot;: {
                                                        &quot;enum&quot;: [
                                                            &quot;message&quot;
                                                        ],
                                                        &quot;type&quot;: &quot;string&quot;
                                                    }
                                                },
                                                &quot;required&quot;: [
                                                    &quot;type&quot;,
                                                    &quot;channel&quot;,
                                                    &quot;message&quot;,
                                                    &quot;date_create&quot;
                                                ],
                                                &quot;type&quot;: &quot;object&quot;
                                            },
                                            {
                                                &quot;additionalProperties&quot;: false,
                                                &quot;properties&quot;: {
                                                    &quot;date_create&quot;: {
                                                        &quot;type&quot;: &quot;integer&quot;
                                                    },
                                                    &quot;file&quot;: {
                                                        &quot;$ref&quot;: &quot;#/definitions/objs_file&quot;
                                                    },
                                                    &quot;type&quot;: {
                                                        &quot;enum&quot;: [
                                                            &quot;file&quot;
                                                        ],
                                                        &quot;type&quot;: &quot;string&quot;
                                                    }
                                                },
                                                &quot;required&quot;: [
                                                    &quot;type&quot;,
                                                    &quot;file&quot;,
                                                    &quot;date_create&quot;
                                                ],
                                                &quot;type&quot;: &quot;object&quot;
                                            },
                                            {
                                                &quot;additionalProperties&quot;: false,
                                                &quot;properties&quot;: {
                                                    &quot;comment&quot;: {
                                                        &quot;$ref&quot;: &quot;#/definitions/objs_comment&quot;
                                                    },
                                                    &quot;date_create&quot;: {
                                                        &quot;type&quot;: &quot;integer&quot;
                                                    },
                                                    &quot;file&quot;: {
                                                        &quot;$ref&quot;: &quot;#/definitions/objs_file&quot;
                                                    },
                                                    &quot;type&quot;: {
                                                        &quot;enum&quot;: [
                                                            &quot;file_comment&quot;
                                                        ],
                                                        &quot;type&quot;: &quot;string&quot;
                                                    }
                                                },
                                                &quot;required&quot;: [
                                                    &quot;type&quot;,
                                                    &quot;file&quot;,
                                                    &quot;comment&quot;,
                                                    &quot;date_create&quot;
                                                ],
                                                &quot;type&quot;: &quot;object&quot;
                                            },
                                            {
                                                &quot;additionalProperties&quot;: false,
                                                &quot;properties&quot;: {
                                                    &quot;channel&quot;: {
                                                        &quot;$ref&quot;: &quot;#/definitions/defs_channel&quot;
                                                    },
                                                    &quot;date_create&quot;: {
                                                        &quot;type&quot;: &quot;integer&quot;
                                                    },
                                                    &quot;type&quot;: {
                                                        &quot;enum&quot;: [
                                                            &quot;channel&quot;
                                                        ],
                                                        &quot;type&quot;: &quot;string&quot;
                                                    }
                                                },
                                                &quot;required&quot;: [
                                                    &quot;type&quot;,
                                                    &quot;channel&quot;,
                                                    &quot;date_create&quot;
                                                ],
                                                &quot;type&quot;: &quot;object&quot;
                                            },
                                            {
                                                &quot;additionalProperties&quot;: false,
                                                &quot;properties&quot;: {
                                                    &quot;channel&quot;: {
                                                        &quot;$ref&quot;: &quot;#/definitions/defs_dm_id&quot;
                                                    },
                                                    &quot;date_create&quot;: {
                                                        &quot;type&quot;: &quot;integer&quot;
                                                    },
                                                    &quot;type&quot;: {
                                                        &quot;enum&quot;: [
                                                            &quot;im&quot;
                                                        ],
                                                        &quot;type&quot;: &quot;string&quot;
                                                    }
                                                },
                                                &quot;required&quot;: [
                                                    &quot;type&quot;,
                                                    &quot;channel&quot;,
                                                    &quot;date_create&quot;
                                                ],
                                                &quot;type&quot;: &quot;object&quot;
                                            },
                                            {
                                                &quot;additionalProperties&quot;: false,
                                                &quot;properties&quot;: {
                                                    &quot;channel&quot;: {
                                                        &quot;$ref&quot;: &quot;#/definitions/defs_group_id&quot;
                                                    },
                                                    &quot;date_create&quot;: {
                                                        &quot;type&quot;: &quot;integer&quot;
                                                    },
                                                    &quot;type&quot;: {
                                                        &quot;enum&quot;: [
                                                            &quot;group&quot;
                                                        ],
                                                        &quot;type&quot;: &quot;string&quot;
                                                    }
                                                },
                                                &quot;required&quot;: [
                                                    &quot;type&quot;,
                                                    &quot;channel&quot;,
                                                    &quot;date_create&quot;
                                                ],
                                                &quot;type&quot;: &quot;object&quot;
                                            }
                                        ]
                                    },
                                    &quot;type&quot;: &quot;array&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                },
                                &quot;paging&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/objs_paging&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;items&quot;
                            ],
                            &quot;title&quot;: &quot;stars.list schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from stars.list method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;token_revoked&quot;,
                                        &quot;no_permission&quot;,
                                        &quot;org_login_required&quot;,
                                        &quot;user_is_bot&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_array_arg&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;team_added_to_org&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;upgrade_required&quot;,
                                        &quot;fatal_error&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;stars.list error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;stars:read&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;stars&quot;
                ]
            }
        },
        &quot;/stars.remove&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Removes a star from an item.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/stars.remove&quot;
                },
                &quot;operationId&quot;: &quot;stars_remove&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `stars:write`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Channel to remove star from, or channel where the message to remove star from was posted (used with `timestamp`).&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;channel&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;File to remove star from.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;file&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;File comment to remove star from.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;file_comment&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Timestamp of the message to remove star from.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;timestamp&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response from stars.remove method&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;stars.remove schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from stars.remove method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;bad_timestamp&quot;,
                                        &quot;message_not_found&quot;,
                                        &quot;file_not_found&quot;,
                                        &quot;file_comment_not_found&quot;,
                                        &quot;channel_not_found&quot;,
                                        &quot;no_item_specified&quot;,
                                        &quot;not_starred&quot;,
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;token_revoked&quot;,
                                        &quot;no_permission&quot;,
                                        &quot;org_login_required&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_array_arg&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;team_added_to_org&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;upgrade_required&quot;,
                                        &quot;fatal_error&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;stars.remove error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;stars:write&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;stars&quot;
                ]
            }
        },
        &quot;/team.accessLogs&quot;: {
            &quot;get&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;
                ],
                &quot;description&quot;: &quot;Gets the access logs for the current team.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/team.accessLogs&quot;
                },
                &quot;operationId&quot;: &quot;team_accessLogs&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `admin`&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;End of time range of logs to include in results (inclusive).&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;before&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;count&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;page&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;This response demonstrates pagination and two access log entries.&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response from team.accessLogs method&quot;,
                            &quot;properties&quot;: {
                                &quot;logins&quot;: {
                                    &quot;items&quot;: {
                                        &quot;additionalProperties&quot;: false,
                                        &quot;properties&quot;: {
                                            &quot;count&quot;: {
                                                &quot;type&quot;: &quot;integer&quot;
                                            },
                                            &quot;country&quot;: {
                                                &quot;type&quot;: [
                                                    &quot;string&quot;,
                                                    &quot;null&quot;
                                                ]
                                            },
                                            &quot;date_first&quot;: {
                                                &quot;type&quot;: &quot;integer&quot;
                                            },
                                            &quot;date_last&quot;: {
                                                &quot;type&quot;: &quot;integer&quot;
                                            },
                                            &quot;ip&quot;: {
                                                &quot;type&quot;: [
                                                    &quot;string&quot;,
                                                    &quot;null&quot;
                                                ]
                                            },
                                            &quot;isp&quot;: {
                                                &quot;type&quot;: [
                                                    &quot;string&quot;,
                                                    &quot;null&quot;
                                                ]
                                            },
                                            &quot;region&quot;: {
                                                &quot;type&quot;: [
                                                    &quot;string&quot;,
                                                    &quot;null&quot;
                                                ]
                                            },
                                            &quot;user_agent&quot;: {
                                                &quot;type&quot;: &quot;string&quot;
                                            },
                                            &quot;user_id&quot;: {
                                                &quot;$ref&quot;: &quot;#/definitions/defs_user_id&quot;
                                            },
                                            &quot;username&quot;: {
                                                &quot;type&quot;: &quot;string&quot;
                                            }
                                        },
                                        &quot;required&quot;: [
                                            &quot;user_id&quot;,
                                            &quot;username&quot;,
                                            &quot;date_first&quot;,
                                            &quot;date_last&quot;,
                                            &quot;count&quot;,
                                            &quot;ip&quot;,
                                            &quot;user_agent&quot;,
                                            &quot;isp&quot;,
                                            &quot;country&quot;,
                                            &quot;region&quot;
                                        ],
                                        &quot;type&quot;: &quot;object&quot;
                                    },
                                    &quot;minItems&quot;: 1,
                                    &quot;type&quot;: &quot;array&quot;,
                                    &quot;uniqueItems&quot;: true
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                },
                                &quot;paging&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/objs_paging&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;logins&quot;,
                                &quot;paging&quot;
                            ],
                            &quot;title&quot;: &quot;team.accessLogs schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;A workspace must be on a paid plan to use this method, otherwise the `paid_only` error is thrown:&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from team.accessLogs method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;paid_only&quot;,
                                        &quot;over_pagination_limit&quot;,
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;token_revoked&quot;,
                                        &quot;no_permission&quot;,
                                        &quot;org_login_required&quot;,
                                        &quot;user_is_bot&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_array_arg&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;team_added_to_org&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;upgrade_required&quot;,
                                        &quot;fatal_error&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;team.accessLogs error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;admin&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;team&quot;
                ]
            }
        },
        &quot;/team.billableInfo&quot;: {
            &quot;get&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;
                ],
                &quot;description&quot;: &quot;Gets billable users information for the current team.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/team.billableInfo&quot;
                },
                &quot;operationId&quot;: &quot;team_billableInfo&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `admin`&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;A user to retrieve the billable information for. Defaults to all users.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;user&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default success template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default error template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;admin&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;team&quot;
                ]
            }
        },
        &quot;/team.info&quot;: {
            &quot;get&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;
                ],
                &quot;description&quot;: &quot;Gets information about the current team.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/team.info&quot;
                },
                &quot;operationId&quot;: &quot;team_info&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `team:read`&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Team to get info on, if omitted, will return information about the current team. Will only return team that the authenticated token is allowed to see through external shared channels&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;team&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response from team.info method&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                },
                                &quot;team&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/objs_team&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;team&quot;
                            ],
                            &quot;title&quot;: &quot;team.info schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from team.info method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;token_revoked&quot;,
                                        &quot;no_permission&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_array_arg&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;team_added_to_org&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;upgrade_required&quot;,
                                        &quot;fatal_error&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;team.info error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;team:read&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;team&quot;
                ]
            }
        },
        &quot;/team.integrationLogs&quot;: {
            &quot;get&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;
                ],
                &quot;description&quot;: &quot;Gets the integration logs for the current team.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/team.integrationLogs&quot;
                },
                &quot;operationId&quot;: &quot;team_integrationLogs&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `admin`&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Filter logs to this Slack app. Defaults to all logs.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;app_id&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Filter logs with this change type. Defaults to all logs.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;change_type&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;count&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;page&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Filter logs to this service. Defaults to all logs.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;service_id&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Filter logs generated by this user\u2019s actions. Defaults to all logs.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;user&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response from team.integrationLogs method&quot;,
                            &quot;properties&quot;: {
                                &quot;logs&quot;: {
                                    &quot;items&quot;: {
                                        &quot;additionalProperties&quot;: false,
                                        &quot;properties&quot;: {
                                            &quot;admin_app_id&quot;: {
                                                &quot;$ref&quot;: &quot;#/definitions/defs_app_id&quot;
                                            },
                                            &quot;app_id&quot;: {
                                                &quot;$ref&quot;: &quot;#/definitions/defs_app_id&quot;
                                            },
                                            &quot;app_type&quot;: {
                                                &quot;type&quot;: &quot;string&quot;
                                            },
                                            &quot;change_type&quot;: {
                                                &quot;type&quot;: &quot;string&quot;
                                            },
                                            &quot;channel&quot;: {
                                                &quot;$ref&quot;: &quot;#/definitions/defs_channel&quot;
                                            },
                                            &quot;date&quot;: {
                                                &quot;type&quot;: &quot;string&quot;
                                            },
                                            &quot;scope&quot;: {
                                                &quot;type&quot;: &quot;string&quot;
                                            },
                                            &quot;service_id&quot;: {
                                                &quot;type&quot;: &quot;string&quot;
                                            },
                                            &quot;service_type&quot;: {
                                                &quot;type&quot;: &quot;string&quot;
                                            },
                                            &quot;user_id&quot;: {
                                                &quot;$ref&quot;: &quot;#/definitions/defs_user_id&quot;
                                            },
                                            &quot;user_name&quot;: {
                                                &quot;type&quot;: &quot;string&quot;
                                            }
                                        },
                                        &quot;required&quot;: [
                                            &quot;user_id&quot;,
                                            &quot;user_name&quot;,
                                            &quot;date&quot;,
                                            &quot;change_type&quot;,
                                            &quot;app_type&quot;,
                                            &quot;app_id&quot;,
                                            &quot;scope&quot;
                                        ],
                                        &quot;type&quot;: &quot;object&quot;
                                    },
                                    &quot;minItems&quot;: 1,
                                    &quot;type&quot;: &quot;array&quot;,
                                    &quot;uniqueItems&quot;: true
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                },
                                &quot;paging&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/objs_paging&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;logs&quot;,
                                &quot;paging&quot;
                            ],
                            &quot;title&quot;: &quot;team.integrationLogs schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from team.integrationLogs method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;token_revoked&quot;,
                                        &quot;no_permission&quot;,
                                        &quot;org_login_required&quot;,
                                        &quot;user_is_bot&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_array_arg&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;team_added_to_org&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;upgrade_required&quot;,
                                        &quot;fatal_error&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;team.integrationLogs error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;admin&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;team&quot;
                ]
            }
        },
        &quot;/team.profile.get&quot;: {
            &quot;get&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;
                ],
                &quot;description&quot;: &quot;Retrieve a team&apos;s profile.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/team.profile.get&quot;
                },
                &quot;operationId&quot;: &quot;team_profile_get&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `users.profile:read`&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Filter by visibility.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;visibility&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response from team.profile.get method&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                },
                                &quot;profile&quot;: {
                                    &quot;additionalProperties&quot;: false,
                                    &quot;properties&quot;: {
                                        &quot;fields&quot;: {
                                            &quot;items&quot;: {
                                                &quot;$ref&quot;: &quot;#/definitions/objs_team_profile_field&quot;
                                            },
                                            &quot;type&quot;: &quot;array&quot;,
                                            &quot;uniqueItems&quot;: true
                                        }
                                    },
                                    &quot;required&quot;: [
                                        &quot;fields&quot;
                                    ],
                                    &quot;type&quot;: &quot;object&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;profile&quot;
                            ],
                            &quot;title&quot;: &quot;team.profile.get success schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from team.profile.get method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;no_permission&quot;,
                                        &quot;user_is_bot&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_array_arg&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_typ&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;team_added_to_org&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeou&quot;,
                                        &quot;upgrade_required&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;team.profile.get error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;users.profile:read&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;team.profile&quot;,
                    &quot;team&quot;
                ]
            }
        },
        &quot;/usergroups.create&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Create a User Group&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/usergroups.create&quot;
                },
                &quot;operationId&quot;: &quot;usergroups_create&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `usergroups:write`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;A comma separated string of encoded channel IDs for which the User Group uses as a default.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;channels&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;A short description of the User Group.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;description&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;A mention handle. Must be unique among channels, users and User Groups.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;handle&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Include the number of users in each User Group.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;include_count&quot;,
                        &quot;type&quot;: &quot;boolean&quot;
                    },
                    {
                        &quot;description&quot;: &quot;A name for the User Group. Must be unique among User Groups.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;name&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response from usergroups.create method&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                },
                                &quot;usergroup&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/objs_subteam&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;usergroup&quot;
                            ],
                            &quot;title&quot;: &quot;usergroups.create schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from usergroups.create method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;permission_denied&quot;,
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;token_revoked&quot;,
                                        &quot;no_permission&quot;,
                                        &quot;org_login_required&quot;,
                                        &quot;user_is_bot&quot;,
                                        &quot;user_is_restricted&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_array_arg&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;team_added_to_org&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;upgrade_required&quot;,
                                        &quot;fatal_error&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;usergroups.create error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;usergroups:write&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;usergroups&quot;
                ]
            }
        },
        &quot;/usergroups.disable&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Disable an existing User Group&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/usergroups.disable&quot;
                },
                &quot;operationId&quot;: &quot;usergroups_disable&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `usergroups:write`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Include the number of users in the User Group.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;include_count&quot;,
                        &quot;type&quot;: &quot;boolean&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The encoded ID of the User Group to disable.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;usergroup&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response from usergroups.disable method&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                },
                                &quot;usergroup&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/objs_subteam&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;usergroup&quot;
                            ],
                            &quot;title&quot;: &quot;usergroups.disable schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from usergroups.disable method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;permission_denied&quot;,
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;token_revoked&quot;,
                                        &quot;no_permission&quot;,
                                        &quot;org_login_required&quot;,
                                        &quot;user_is_bot&quot;,
                                        &quot;user_is_restricted&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_array_arg&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;team_added_to_org&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;upgrade_required&quot;,
                                        &quot;fatal_error&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;usergroups.disable error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;usergroups:write&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;usergroups&quot;
                ]
            }
        },
        &quot;/usergroups.enable&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Enable a User Group&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/usergroups.enable&quot;
                },
                &quot;operationId&quot;: &quot;usergroups_enable&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `usergroups:write`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Include the number of users in the User Group.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;include_count&quot;,
                        &quot;type&quot;: &quot;boolean&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The encoded ID of the User Group to enable.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;usergroup&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response from usergroups.enable method&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                },
                                &quot;usergroup&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/objs_subteam&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;usergroup&quot;
                            ],
                            &quot;title&quot;: &quot;usergroups.enable schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from usergroups.enable method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;token_revoked&quot;,
                                        &quot;no_permission&quot;,
                                        &quot;org_login_required&quot;,
                                        &quot;user_is_bot&quot;,
                                        &quot;user_is_restricted&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_array_arg&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;team_added_to_org&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;upgrade_require&quot;,
                                        &quot;fatal_error&quot;,
                                        &quot;missing_charset&quot;,
                                        &quot;superfluous_charset&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;usergroups.enable error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;usergroups:write&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;usergroups&quot;
                ]
            }
        },
        &quot;/usergroups.list&quot;: {
            &quot;get&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;
                ],
                &quot;description&quot;: &quot;List all User Groups for a team&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/usergroups.list&quot;
                },
                &quot;operationId&quot;: &quot;usergroups_list&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Include the list of users for each User Group.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;include_users&quot;,
                        &quot;type&quot;: &quot;boolean&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `usergroups:read`&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Include the number of users in each User Group.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;include_count&quot;,
                        &quot;type&quot;: &quot;boolean&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Include disabled User Groups.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;include_disabled&quot;,
                        &quot;type&quot;: &quot;boolean&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response from usergroups.list method&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                },
                                &quot;usergroups&quot;: {
                                    &quot;items&quot;: {
                                        &quot;$ref&quot;: &quot;#/definitions/objs_subteam&quot;
                                    },
                                    &quot;type&quot;: &quot;array&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;usergroups&quot;
                            ],
                            &quot;title&quot;: &quot;usergroups.list schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from usergroups.list method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;token_revoked&quot;,
                                        &quot;no_permission&quot;,
                                        &quot;org_login_required&quot;,
                                        &quot;user_is_bot&quot;,
                                        &quot;user_is_restricted&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_array_arg&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;team_added_to_org&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;upgrade_require&quot;,
                                        &quot;fatal_error&quot;,
                                        &quot;missing_charset&quot;,
                                        &quot;superfluous_charset&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;usergroups.list error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;usergroups:read&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;usergroups&quot;
                ]
            }
        },
        &quot;/usergroups.update&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Update an existing User Group&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/usergroups.update&quot;
                },
                &quot;operationId&quot;: &quot;usergroups_update&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;A mention handle. Must be unique among channels, users and User Groups.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;handle&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;A short description of the User Group.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;description&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;A comma separated string of encoded channel IDs for which the User Group uses as a default.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;channels&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `usergroups:write`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Include the number of users in the User Group.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;include_count&quot;,
                        &quot;type&quot;: &quot;boolean&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The encoded ID of the User Group to update.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;usergroup&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;A name for the User Group. Must be unique among User Groups.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;name&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response from usergroups.update method&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                },
                                &quot;usergroup&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/objs_subteam&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;usergroup&quot;
                            ],
                            &quot;title&quot;: &quot;usergroups.update schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from usergroups.update method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;permission_denied&quot;,
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;token_revoked&quot;,
                                        &quot;no_permission&quot;,
                                        &quot;org_login_required&quot;,
                                        &quot;user_is_bot&quot;,
                                        &quot;user_is_restricted&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_array_arg&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;team_added_to_org&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;upgrade_require&quot;,
                                        &quot;fatal_error&quot;,
                                        &quot;missing_charset&quot;,
                                        &quot;superfluous_charset&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;usergroups.update error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;usergroups:write&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;usergroups&quot;
                ]
            }
        },
        &quot;/usergroups.users.list&quot;: {
            &quot;get&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;
                ],
                &quot;description&quot;: &quot;List all users in a User Group&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/usergroups.users.list&quot;
                },
                &quot;operationId&quot;: &quot;usergroups_users_list&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `usergroups:read`&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Allow results that involve disabled User Groups.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;include_disabled&quot;,
                        &quot;type&quot;: &quot;boolean&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The encoded ID of the User Group to update.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;usergroup&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Standard success response when used with a user token&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response from usergroups.users.list method&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                },
                                &quot;users&quot;: {
                                    &quot;items&quot;: {
                                        &quot;$ref&quot;: &quot;#/definitions/defs_user_id&quot;
                                    },
                                    &quot;type&quot;: &quot;array&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;users&quot;
                            ],
                            &quot;title&quot;: &quot;usergroups.users.list schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Standard failure response when used with an invalid token&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from usergroups.users.list method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;token_revoked&quot;,
                                        &quot;no_permission&quot;,
                                        &quot;org_login_required&quot;,
                                        &quot;user_is_bot&quot;,
                                        &quot;user_is_restricted&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_array_arg&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;team_added_to_org&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;upgrade_require&quot;,
                                        &quot;fatal_error&quot;,
                                        &quot;missing_charset&quot;,
                                        &quot;superfluous_charset&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;usergroups.users.list error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;usergroups:read&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;usergroups.users&quot;,
                    &quot;usergroups&quot;
                ]
            }
        },
        &quot;/usergroups.users.update&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Update the list of users for a User Group&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/usergroups.users.update&quot;
                },
                &quot;operationId&quot;: &quot;usergroups_users_update&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `usergroups:write`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Include the number of users in the User Group.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;include_count&quot;,
                        &quot;type&quot;: &quot;boolean&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The encoded ID of the User Group to update.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;usergroup&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;A comma separated string of encoded user IDs that represent the entire list of users for the User Group.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;users&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response from usergroups.users.update method&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                },
                                &quot;usergroup&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/objs_subteam&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;usergroup&quot;
                            ],
                            &quot;title&quot;: &quot;usergroups.users.update schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from usergroups.users.update method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;permission_denied&quot;,
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;token_revoked&quot;,
                                        &quot;no_permission&quot;,
                                        &quot;org_login_required&quot;,
                                        &quot;user_is_bot&quot;,
                                        &quot;user_is_restricted&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_array_arg&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;team_added_to_org&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;upgrade_require&quot;,
                                        &quot;fatal_error&quot;,
                                        &quot;missing_charset&quot;,
                                        &quot;superfluous_charset&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;usergroups.users.update error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;usergroups:write&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;usergroups.users&quot;,
                    &quot;usergroups&quot;
                ]
            }
        },
        &quot;/users.conversations&quot;: {
            &quot;get&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;
                ],
                &quot;description&quot;: &quot;List conversations the calling user may access.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/users.conversations&quot;
                },
                &quot;operationId&quot;: &quot;users_conversations&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `conversations:read`&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Browse conversations by a specific user ID&apos;s membership. Non-public channels are restricted to those where the calling user shares membership.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;user&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Mix and match channel types by providing a comma-separated list of any combination of `public_channel`, `private_channel`, `mpim`, `im`&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;types&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Set to `true` to exclude archived channels from the list&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;exclude_archived&quot;,
                        &quot;type&quot;: &quot;boolean&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn&apos;t been reached. Must be an integer no larger than 1000.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;limit&quot;,
                        &quot;type&quot;: &quot;integer&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request&apos;s `response_metadata`. Default value fetches the first \&quot;page\&quot; of the collection. See [pagination](/docs/pagination) for more detail.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;cursor&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response with only public channels. Note how `num_members` and `is_member` are not returned like typical `conversations` objects.&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;Schema for successful response from users.conversations method. Returned conversation objects do not include `num_members` or `is_member`&quot;,
                            &quot;properties&quot;: {
                                &quot;channels&quot;: {
                                    &quot;items&quot;: {
                                        &quot;$ref&quot;: &quot;#/definitions/objs_conversation&quot;
                                    },
                                    &quot;type&quot;: &quot;array&quot;,
                                    &quot;uniqueItems&quot;: true
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                },
                                &quot;response_metadata&quot;: {
                                    &quot;additionalProperties&quot;: false,
                                    &quot;properties&quot;: {
                                        &quot;next_cursor&quot;: {
                                            &quot;type&quot;: &quot;string&quot;
                                        }
                                    },
                                    &quot;required&quot;: [
                                        &quot;next_cursor&quot;
                                    ],
                                    &quot;type&quot;: &quot;object&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;channels&quot;
                            ],
                            &quot;title&quot;: &quot;users.conversations success schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from users.conversations method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;method_not_supported_for_channel_type&quot;,
                                        &quot;missing_scope&quot;,
                                        &quot;invalid_types&quot;,
                                        &quot;invalid_cursor&quot;,
                                        &quot;invalid_limit&quot;,
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;token_revoked&quot;,
                                        &quot;no_permission&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_array_arg&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;team_added_to_org&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;upgrade_required&quot;,
                                        &quot;fatal_error&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;users.conversations error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;channels:read&quot;,
                            &quot;groups:read&quot;,
                            &quot;im:read&quot;,
                            &quot;mpim:read&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;users&quot;
                ]
            }
        },
        &quot;/users.deletePhoto&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;
                ],
                &quot;description&quot;: &quot;Delete the user profile photo&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/users.deletePhoto&quot;
                },
                &quot;operationId&quot;: &quot;users_deletePhoto&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `users.profile:write`&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response from users.deletePhoto method&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;users.deletePhoto schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from users.deletePhoto method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;token_revoked&quot;,
                                        &quot;no_permission&quot;,
                                        &quot;org_login_required&quot;,
                                        &quot;user_is_bot&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_array_arg&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;team_added_to_org&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;upgrade_required&quot;,
                                        &quot;fatal_error&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;users.deletePhoto error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;users.profile:write&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;users&quot;
                ]
            }
        },
        &quot;/users.getPresence&quot;: {
            &quot;get&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;
                ],
                &quot;description&quot;: &quot;Gets user presence information.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/users.getPresence&quot;
                },
                &quot;operationId&quot;: &quot;users_getPresence&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `users:read`&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;User to get presence info on. Defaults to the authed user.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;user&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;When requesting information for a different user, this method just returns the current presence (either `active` or `away`).&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;Generated from users.getPresence with shasum e7251aec575d8863f9e0eb38663ae9dc26655f65&quot;,
                            &quot;properties&quot;: {
                                &quot;auto_away&quot;: {
                                    &quot;type&quot;: &quot;boolean&quot;
                                },
                                &quot;connection_count&quot;: {
                                    &quot;type&quot;: &quot;integer&quot;
                                },
                                &quot;last_activity&quot;: {
                                    &quot;type&quot;: &quot;integer&quot;
                                },
                                &quot;manual_away&quot;: {
                                    &quot;type&quot;: &quot;boolean&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                },
                                &quot;online&quot;: {
                                    &quot;type&quot;: &quot;boolean&quot;
                                },
                                &quot;presence&quot;: {
                                    &quot;type&quot;: &quot;string&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;presence&quot;
                            ],
                            &quot;title&quot;: &quot;API method: users.getPresence&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: {
                                &quot;type&quot;: &quot;object&quot;
                            },
                            &quot;description&quot;: &quot;Schema for error response users.getPresence method&quot;,
                            &quot;properties&quot;: {
                                &quot;error&quot;: {
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;users.counts error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;users:read&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;users&quot;
                ]
            }
        },
        &quot;/users.identity&quot;: {
            &quot;get&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;
                ],
                &quot;description&quot;: &quot;Get a user&apos;s identity.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/users.identity&quot;
                },
                &quot;operationId&quot;: &quot;users_identity&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `identity.basic`&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;You will receive at a minimum the following information:&quot;,
                        &quot;schema&quot;: {
                            &quot;description&quot;: &quot;Schema for successful response from users.identity method&quot;,
                            &quot;items&quot;: [
                                {
                                    &quot;additionalProperties&quot;: false,
                                    &quot;description&quot;: &quot;Schema for &apos;identity.basic&apos; scope&quot;,
                                    &quot;properties&quot;: {
                                        &quot;ok&quot;: {
                                            &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                        },
                                        &quot;team&quot;: {
                                            &quot;additionalProperties&quot;: false,
                                            &quot;properties&quot;: {
                                                &quot;id&quot;: {
                                                    &quot;$ref&quot;: &quot;#/definitions/defs_team&quot;
                                                }
                                            },
                                            &quot;required&quot;: [
                                                &quot;id&quot;
                                            ],
                                            &quot;type&quot;: &quot;object&quot;
                                        },
                                        &quot;user&quot;: {
                                            &quot;additionalProperties&quot;: false,
                                            &quot;properties&quot;: {
                                                &quot;id&quot;: {
                                                    &quot;$ref&quot;: &quot;#/definitions/defs_user_id&quot;
                                                },
                                                &quot;name&quot;: {
                                                    &quot;type&quot;: &quot;string&quot;
                                                }
                                            },
                                            &quot;required&quot;: [
                                                &quot;name&quot;,
                                                &quot;id&quot;
                                            ],
                                            &quot;type&quot;: &quot;object&quot;
                                        }
                                    },
                                    &quot;required&quot;: [
                                        &quot;ok&quot;,
                                        &quot;user&quot;,
                                        &quot;team&quot;
                                    ],
                                    &quot;type&quot;: &quot;object&quot;
                                },
                                {
                                    &quot;additionalProperties&quot;: false,
                                    &quot;description&quot;: &quot;Schema for &apos;identity.basic,identity.email&apos; scopes&quot;,
                                    &quot;properties&quot;: {
                                        &quot;ok&quot;: {
                                            &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                        },
                                        &quot;team&quot;: {
                                            &quot;additionalProperties&quot;: false,
                                            &quot;properties&quot;: {
                                                &quot;id&quot;: {
                                                    &quot;$ref&quot;: &quot;#/definitions/defs_team&quot;
                                                }
                                            },
                                            &quot;required&quot;: [
                                                &quot;id&quot;
                                            ],
                                            &quot;type&quot;: &quot;object&quot;
                                        },
                                        &quot;user&quot;: {
                                            &quot;additionalProperties&quot;: false,
                                            &quot;properties&quot;: {
                                                &quot;email&quot;: {
                                                    &quot;format&quot;: &quot;email&quot;,
                                                    &quot;type&quot;: &quot;string&quot;
                                                },
                                                &quot;id&quot;: {
                                                    &quot;$ref&quot;: &quot;#/definitions/defs_user_id&quot;
                                                },
                                                &quot;name&quot;: {
                                                    &quot;type&quot;: &quot;string&quot;
                                                }
                                            },
                                            &quot;required&quot;: [
                                                &quot;name&quot;,
                                                &quot;id&quot;,
                                                &quot;email&quot;
                                            ],
                                            &quot;type&quot;: &quot;object&quot;
                                        }
                                    },
                                    &quot;required&quot;: [
                                        &quot;ok&quot;,
                                        &quot;user&quot;,
                                        &quot;team&quot;
                                    ],
                                    &quot;type&quot;: &quot;object&quot;
                                },
                                {
                                    &quot;additionalProperties&quot;: false,
                                    &quot;description&quot;: &quot;Schema for &apos;identity.basic,identity.avatar&apos; scopes&quot;,
                                    &quot;properties&quot;: {
                                        &quot;ok&quot;: {
                                            &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                        },
                                        &quot;team&quot;: {
                                            &quot;additionalProperties&quot;: false,
                                            &quot;properties&quot;: {
                                                &quot;id&quot;: {
                                                    &quot;$ref&quot;: &quot;#/definitions/defs_team&quot;
                                                }
                                            },
                                            &quot;required&quot;: [
                                                &quot;id&quot;
                                            ],
                                            &quot;type&quot;: &quot;object&quot;
                                        },
                                        &quot;user&quot;: {
                                            &quot;additionalProperties&quot;: false,
                                            &quot;properties&quot;: {
                                                &quot;id&quot;: {
                                                    &quot;$ref&quot;: &quot;#/definitions/defs_user_id&quot;
                                                },
                                                &quot;image_192&quot;: {
                                                    &quot;format&quot;: &quot;url&quot;,
                                                    &quot;type&quot;: &quot;string&quot;
                                                },
                                                &quot;image_24&quot;: {
                                                    &quot;format&quot;: &quot;url&quot;,
                                                    &quot;type&quot;: &quot;string&quot;
                                                },
                                                &quot;image_32&quot;: {
                                                    &quot;format&quot;: &quot;url&quot;,
                                                    &quot;type&quot;: &quot;string&quot;
                                                },
                                                &quot;image_48&quot;: {
                                                    &quot;format&quot;: &quot;url&quot;,
                                                    &quot;type&quot;: &quot;string&quot;
                                                },
                                                &quot;image_512&quot;: {
                                                    &quot;format&quot;: &quot;url&quot;,
                                                    &quot;type&quot;: &quot;string&quot;
                                                },
                                                &quot;image_72&quot;: {
                                                    &quot;format&quot;: &quot;url&quot;,
                                                    &quot;type&quot;: &quot;string&quot;
                                                },
                                                &quot;name&quot;: {
                                                    &quot;type&quot;: &quot;string&quot;
                                                }
                                            },
                                            &quot;required&quot;: [
                                                &quot;name&quot;,
                                                &quot;id&quot;,
                                                &quot;image_24&quot;,
                                                &quot;image_32&quot;,
                                                &quot;image_48&quot;,
                                                &quot;image_72&quot;,
                                                &quot;image_192&quot;,
                                                &quot;image_512&quot;
                                            ],
                                            &quot;type&quot;: &quot;object&quot;
                                        }
                                    },
                                    &quot;required&quot;: [
                                        &quot;ok&quot;,
                                        &quot;user&quot;,
                                        &quot;team&quot;
                                    ],
                                    &quot;type&quot;: &quot;object&quot;
                                },
                                {
                                    &quot;additionalProperties&quot;: false,
                                    &quot;description&quot;: &quot;Schema for &apos;identity.basic,identity.team&apos; scopes&quot;,
                                    &quot;properties&quot;: {
                                        &quot;ok&quot;: {
                                            &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                        },
                                        &quot;team&quot;: {
                                            &quot;additionalProperties&quot;: false,
                                            &quot;properties&quot;: {
                                                &quot;domain&quot;: {
                                                    &quot;type&quot;: &quot;string&quot;
                                                },
                                                &quot;id&quot;: {
                                                    &quot;$ref&quot;: &quot;#/definitions/defs_team&quot;
                                                },
                                                &quot;image_102&quot;: {
                                                    &quot;format&quot;: &quot;url&quot;,
                                                    &quot;type&quot;: &quot;string&quot;
                                                },
                                                &quot;image_132&quot;: {
                                                    &quot;format&quot;: &quot;url&quot;,
                                                    &quot;type&quot;: &quot;string&quot;
                                                },
                                                &quot;image_230&quot;: {
                                                    &quot;format&quot;: &quot;url&quot;,
                                                    &quot;type&quot;: &quot;string&quot;
                                                },
                                                &quot;image_34&quot;: {
                                                    &quot;format&quot;: &quot;url&quot;,
                                                    &quot;type&quot;: &quot;string&quot;
                                                },
                                                &quot;image_44&quot;: {
                                                    &quot;format&quot;: &quot;url&quot;,
                                                    &quot;type&quot;: &quot;string&quot;
                                                },
                                                &quot;image_68&quot;: {
                                                    &quot;format&quot;: &quot;url&quot;,
                                                    &quot;type&quot;: &quot;string&quot;
                                                },
                                                &quot;image_88&quot;: {
                                                    &quot;format&quot;: &quot;url&quot;,
                                                    &quot;type&quot;: &quot;string&quot;
                                                },
                                                &quot;image_default&quot;: {
                                                    &quot;type&quot;: &quot;boolean&quot;
                                                },
                                                &quot;name&quot;: {
                                                    &quot;type&quot;: &quot;string&quot;
                                                }
                                            },
                                            &quot;required&quot;: [
                                                &quot;id&quot;,
                                                &quot;name&quot;,
                                                &quot;domain&quot;,
                                                &quot;image_34&quot;,
                                                &quot;image_44&quot;,
                                                &quot;image_68&quot;,
                                                &quot;image_88&quot;,
                                                &quot;image_102&quot;,
                                                &quot;image_132&quot;,
                                                &quot;image_230&quot;,
                                                &quot;image_default&quot;
                                            ],
                                            &quot;type&quot;: &quot;object&quot;
                                        },
                                        &quot;user&quot;: {
                                            &quot;additionalProperties&quot;: false,
                                            &quot;properties&quot;: {
                                                &quot;id&quot;: {
                                                    &quot;$ref&quot;: &quot;#/definitions/defs_user_id&quot;
                                                },
                                                &quot;name&quot;: {
                                                    &quot;type&quot;: &quot;string&quot;
                                                }
                                            },
                                            &quot;required&quot;: [
                                                &quot;name&quot;,
                                                &quot;id&quot;
                                            ],
                                            &quot;type&quot;: &quot;object&quot;
                                        }
                                    },
                                    &quot;required&quot;: [
                                        &quot;ok&quot;,
                                        &quot;user&quot;,
                                        &quot;team&quot;
                                    ],
                                    &quot;type&quot;: &quot;object&quot;
                                }
                            ],
                            &quot;title&quot;: &quot;users.identity schema&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from users.identity method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;token_revoked&quot;,
                                        &quot;no_permission&quot;,
                                        &quot;org_login_required&quot;,
                                        &quot;user_is_bot&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_array_arg&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;team_added_to_org&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;upgrade_required&quot;,
                                        &quot;fatal_error&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;users.identity error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;identity.basic&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;users&quot;
                ]
            }
        },
        &quot;/users.info&quot;: {
            &quot;get&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;
                ],
                &quot;description&quot;: &quot;Gets information about a user.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/users.info&quot;
                },
                &quot;operationId&quot;: &quot;users_info&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `users:read`&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Set this to `true` to receive the locale for this user. Defaults to `false`&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;include_locale&quot;,
                        &quot;type&quot;: &quot;boolean&quot;
                    },
                    {
                        &quot;description&quot;: &quot;User to get info on&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;user&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;Schema for successful response from users.info method&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                },
                                &quot;user&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/objs_user&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;user&quot;
                            ],
                            &quot;title&quot;: &quot;users.info success schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from users.info method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;user_not_found&quot;,
                                        &quot;user_not_visible&quot;,
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_array_arg&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;team_added_to_org&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;upgrade_required&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;users.info error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;users:read&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;users&quot;
                ]
            }
        },
        &quot;/users.list&quot;: {
            &quot;get&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;
                ],
                &quot;description&quot;: &quot;Lists all users in a Slack team.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/users.list&quot;
                },
                &quot;operationId&quot;: &quot;users_list&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `users:read`&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn&apos;t been reached. Providing no `limit` value will result in Slack attempting to deliver you the entire result set. If the collection is too large you may experience `limit_required` or HTTP 500 errors.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;limit&quot;,
                        &quot;type&quot;: &quot;integer&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request&apos;s `response_metadata`. Default value fetches the first \&quot;page\&quot; of the collection. See [pagination](/docs/pagination) for more detail.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;cursor&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Set this to `true` to receive the locale for users. Defaults to `false`&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;include_locale&quot;,
                        &quot;type&quot;: &quot;boolean&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response from users.list method&quot;,
                            &quot;properties&quot;: {
                                &quot;cache_ts&quot;: {
                                    &quot;type&quot;: &quot;integer&quot;
                                },
                                &quot;members&quot;: {
                                    &quot;items&quot;: {
                                        &quot;$ref&quot;: &quot;#/definitions/objs_user&quot;
                                    },
                                    &quot;minItems&quot;: 1,
                                    &quot;type&quot;: &quot;array&quot;,
                                    &quot;uniqueItems&quot;: true
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                },
                                &quot;response_metadata&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/objs_response_metadata&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;members&quot;,
                                &quot;cache_ts&quot;
                            ],
                            &quot;title&quot;: &quot;users.list schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from users.list method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;limit_required&quot;,
                                        &quot;invalid_cursor&quot;,
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;no_permission&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_array_arg&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;team_added_to_org&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;upgrade_required&quot;,
                                        &quot;fatal_error&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;users.list error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;users:read&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;users&quot;
                ]
            }
        },
        &quot;/users.lookupByEmail&quot;: {
            &quot;get&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;
                ],
                &quot;description&quot;: &quot;Find a user with an email address.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/users.lookupByEmail&quot;
                },
                &quot;operationId&quot;: &quot;users_lookupByEmail&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `users:read.email`&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;An email address belonging to a user in the workspace&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;email&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;Schema for successful response from users.lookupByEmail method&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                },
                                &quot;user&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/objs_user&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;user&quot;
                            ],
                            &quot;title&quot;: &quot;users.lookupByEmail success schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from users.lookupByEmail method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;users_not_found&quot;,
                                        &quot;enterprise_is_restricted&quot;,
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;no_permission&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_array_arg&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;team_added_to_org&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;upgrade_required&quot;,
                                        &quot;fatal_error&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;users.lookupByEmail error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;users:read.email&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;users&quot;
                ]
            }
        },
        &quot;/users.profile.get&quot;: {
            &quot;get&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;
                ],
                &quot;description&quot;: &quot;Retrieves a user&apos;s profile information.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/users.profile.get&quot;
                },
                &quot;operationId&quot;: &quot;users_profile_get&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `users.profile:read`&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Include labels for each ID in custom profile fields&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;include_labels&quot;,
                        &quot;type&quot;: &quot;boolean&quot;
                    },
                    {
                        &quot;description&quot;: &quot;User to retrieve profile info for&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;user&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response from users.profile.get method&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                },
                                &quot;profile&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/objs_user_profile&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;profile&quot;
                            ],
                            &quot;title&quot;: &quot;users.profile.get schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from users.profile.get method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;user_not_found&quot;,
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;token_revoked&quot;,
                                        &quot;no_permission&quot;,
                                        &quot;org_login_required&quot;,
                                        &quot;user_is_bot&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_array_arg&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;team_added_to_org&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;upgrade_required&quot;,
                                        &quot;fatal_error&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;users.profile.get error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;users.profile:read&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;users.profile&quot;,
                    &quot;users&quot;
                ]
            }
        },
        &quot;/users.profile.set&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Set the profile information for a user.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/users.profile.set&quot;
                },
                &quot;operationId&quot;: &quot;users_profile_set&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `users.profile:write`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Name of a single key to set. Usable only if `profile` is not passed.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;name&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Collection of key:value pairs presented as a URL-encoded JSON hash. At most 50 fields may be set. Each field name is limited to 255 characters.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;profile&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;ID of user to change. This argument may only be specified by team admins on paid teams.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;user&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Value to set a single key to. Usable only if `profile` is not passed.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;value&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response from users.profile.set method&quot;,
                            &quot;properties&quot;: {
                                &quot;email_pending&quot;: {
                                    &quot;format&quot;: &quot;email&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                },
                                &quot;profile&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/objs_user_profile&quot;
                                },
                                &quot;username&quot;: {
                                    &quot;type&quot;: &quot;string&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;username&quot;,
                                &quot;profile&quot;
                            ],
                            &quot;title&quot;: &quot;users.profile.set schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from users.profile.set method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;reserved_name&quot;,
                                        &quot;invalid_profile&quot;,
                                        &quot;profile_set_failed&quot;,
                                        &quot;not_admin&quot;,
                                        &quot;not_app_admin&quot;,
                                        &quot;cannot_update_admin_user&quot;,
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;token_revoked&quot;,
                                        &quot;no_permission&quot;,
                                        &quot;org_login_required&quot;,
                                        &quot;user_is_bot&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_array_arg&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;team_added_to_org&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;upgrade_required&quot;,
                                        &quot;fatal_error&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;users.profile.set error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;users.profile:write&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;users.profile&quot;,
                    &quot;users&quot;
                ]
            }
        },
        &quot;/users.setActive&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Marked a user as active. Deprecated and non-functional.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/users.setActive&quot;
                },
                &quot;operationId&quot;: &quot;users_setActive&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `users:write`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response from users.setActive method&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;users.setActive schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from users.setActive method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;token_revoked&quot;,
                                        &quot;no_permission&quot;,
                                        &quot;org_login_required&quot;,
                                        &quot;ekm_access_denied&quot;,
                                        &quot;missing_scope&quot;,
                                        &quot;invalid_arguments&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;team_added_to_org&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;fatal_error&quot;,
                                        &quot;internal_error&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;users.setActive error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;users:write&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;users&quot;
                ]
            }
        },
        &quot;/users.setPhoto&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;
                ],
                &quot;description&quot;: &quot;Set the user profile photo&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/users.setPhoto&quot;
                },
                &quot;operationId&quot;: &quot;users_setPhoto&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `users.profile:write`&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Width/height of crop box (always square)&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;crop_w&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;X coordinate of top-left corner of crop box&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;crop_x&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Y coordinate of top-left corner of crop box&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;crop_y&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;File contents via `multipart/form-data`.&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;image&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response from users.setPhoto method&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                },
                                &quot;profile&quot;: {
                                    &quot;additionalProperties&quot;: false,
                                    &quot;properties&quot;: {
                                        &quot;avatar_hash&quot;: {
                                            &quot;pattern&quot;: &quot;^[0-9a-f]{12}$&quot;,
                                            &quot;type&quot;: &quot;string&quot;
                                        },
                                        &quot;image_1024&quot;: {
                                            &quot;format&quot;: &quot;uri&quot;,
                                            &quot;type&quot;: &quot;string&quot;
                                        },
                                        &quot;image_192&quot;: {
                                            &quot;format&quot;: &quot;uri&quot;,
                                            &quot;type&quot;: &quot;string&quot;
                                        },
                                        &quot;image_24&quot;: {
                                            &quot;format&quot;: &quot;uri&quot;,
                                            &quot;type&quot;: &quot;string&quot;
                                        },
                                        &quot;image_32&quot;: {
                                            &quot;format&quot;: &quot;uri&quot;,
                                            &quot;type&quot;: &quot;string&quot;
                                        },
                                        &quot;image_48&quot;: {
                                            &quot;format&quot;: &quot;uri&quot;,
                                            &quot;type&quot;: &quot;string&quot;
                                        },
                                        &quot;image_512&quot;: {
                                            &quot;format&quot;: &quot;uri&quot;,
                                            &quot;type&quot;: &quot;string&quot;
                                        },
                                        &quot;image_72&quot;: {
                                            &quot;format&quot;: &quot;uri&quot;,
                                            &quot;type&quot;: &quot;string&quot;
                                        },
                                        &quot;image_original&quot;: {
                                            &quot;format&quot;: &quot;uri&quot;,
                                            &quot;type&quot;: &quot;string&quot;
                                        }
                                    },
                                    &quot;required&quot;: [
                                        &quot;image_24&quot;,
                                        &quot;image_32&quot;,
                                        &quot;image_48&quot;,
                                        &quot;image_72&quot;,
                                        &quot;image_192&quot;,
                                        &quot;image_512&quot;,
                                        &quot;image_1024&quot;,
                                        &quot;image_original&quot;,
                                        &quot;avatar_hash&quot;
                                    ],
                                    &quot;type&quot;: &quot;object&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;profile&quot;
                            ],
                            &quot;title&quot;: &quot;users.setPhoto schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from users.setPhoto method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;debug_step&quot;: {
                                    &quot;description&quot;: &quot;possibly DEV/QA only&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;dims&quot;: {
                                    &quot;description&quot;: &quot;possibly DEV/QA only&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;bad_image&quot;,
                                        &quot;too_large&quot;,
                                        &quot;too_many_frames&quot;,
                                        &quot;not_found&quot;,
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;token_revoked&quot;,
                                        &quot;no_permission&quot;,
                                        &quot;org_login_required&quot;,
                                        &quot;user_is_bot&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_array_arg&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;team_added_to_org&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;upgrade_required&quot;,
                                        &quot;fatal_error&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                },
                                &quot;time_ident&quot;: {
                                    &quot;description&quot;: &quot;possibly DEV/QA only&quot;,
                                    &quot;type&quot;: &quot;integer&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;users.setPhoto error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;users.profile:write&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;users&quot;
                ]
            }
        },
        &quot;/users.setPresence&quot;: {
            &quot;post&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Manually sets user presence.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/users.setPresence&quot;
                },
                &quot;operationId&quot;: &quot;users_setPresence&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `users:write`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Either `auto` or `away`&quot;,
                        &quot;in&quot;: &quot;formData&quot;,
                        &quot;name&quot;: &quot;presence&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for successful response from users.setPresence method&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;users.setPresence schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: false,
                            &quot;description&quot;: &quot;Schema for error response from users.setPresence method&quot;,
                            &quot;properties&quot;: {
                                &quot;callstack&quot;: {
                                    &quot;description&quot;: &quot;Note: PHP callstack is only visible in dev/qa&quot;,
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;error&quot;: {
                                    &quot;enum&quot;: [
                                        &quot;invalid_presence&quot;,
                                        &quot;not_authed&quot;,
                                        &quot;invalid_auth&quot;,
                                        &quot;account_inactive&quot;,
                                        &quot;token_revoked&quot;,
                                        &quot;no_permission&quot;,
                                        &quot;org_login_required&quot;,
                                        &quot;invalid_arg_name&quot;,
                                        &quot;invalid_array_arg&quot;,
                                        &quot;invalid_charset&quot;,
                                        &quot;invalid_form_data&quot;,
                                        &quot;invalid_post_type&quot;,
                                        &quot;missing_post_type&quot;,
                                        &quot;team_added_to_org&quot;,
                                        &quot;invalid_json&quot;,
                                        &quot;json_not_object&quot;,
                                        &quot;request_timeout&quot;,
                                        &quot;upgrade_required&quot;,
                                        &quot;fatal_error&quot;
                                    ],
                                    &quot;type&quot;: &quot;string&quot;
                                },
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;,
                                &quot;error&quot;
                            ],
                            &quot;title&quot;: &quot;users.setPresence error schema&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;users:write&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;users&quot;
                ]
            }
        },
        &quot;/views.open&quot;: {
            &quot;get&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Open a view for a user.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/views.open&quot;
                },
                &quot;operationId&quot;: &quot;views_open&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `none`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Exchange a trigger to post to the user.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;trigger_id&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;A [view payload](/reference/surfaces/views). This must be a JSON-encoded string.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;view&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response includes the opened view payload.&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default success template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response, before getting to any possible validation errors.&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default error template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;none&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;views&quot;
                ]
            }
        },
        &quot;/views.publish&quot;: {
            &quot;get&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Publish a static view for a User.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/views.publish&quot;
                },
                &quot;operationId&quot;: &quot;views_publish&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `none`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;`id` of the user you want publish a view to.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;user_id&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;A [view payload](/reference/surfaces/views). This must be a JSON-encoded string.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;view&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;A string that represents view state to protect against possible race conditions.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;hash&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response includes the published view payload.&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default success template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response, before getting to any possible validation errors.&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default error template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;none&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;views&quot;
                ]
            }
        },
        &quot;/views.push&quot;: {
            &quot;get&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Push a view onto the stack of a root view.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/views.push&quot;
                },
                &quot;operationId&quot;: &quot;views_push&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `none`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Exchange a trigger to post to the user.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;trigger_id&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;A [view payload](/reference/surfaces/views). This must be a JSON-encoded string.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;view&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response includes the pushed view payload.&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default success template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response.&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default error template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;none&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;views&quot;
                ]
            }
        },
        &quot;/views.update&quot;: {
            &quot;get&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Update an existing view.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/views.update&quot;
                },
                &quot;operationId&quot;: &quot;views_update&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `none`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;A unique identifier of the view to be updated. Either `view_id` or `external_id` is required.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;view_id&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;A unique identifier of the view set by the developer. Must be unique for all views on a team. Max length of 255 characters. Either `view_id` or `external_id` is required.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;external_id&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;A [view object](/reference/surfaces/views). This must be a JSON-encoded string.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;view&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;A string that represents view state to protect against possible race conditions.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;hash&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response includes the updated view payload.&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default success template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response.&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default error template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;none&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;views&quot;
                ]
            }
        },
        &quot;/workflows.stepCompleted&quot;: {
            &quot;get&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Indicate that an app&apos;s step in a workflow completed execution.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/workflows.stepCompleted&quot;
                },
                &quot;operationId&quot;: &quot;workflows_stepCompleted&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `workflow.steps:execute`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Context identifier that maps to the correct workflow step execution.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;workflow_step_execute_id&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Key-value object of outputs from your step. Keys of this object reflect the configured `key` properties of your [`outputs`](/reference/workflows/workflow_step#output) array from your `workflow_step` object.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;outputs&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default success template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default error template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;workflow.steps:execute&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;workflows&quot;
                ]
            }
        },
        &quot;/workflows.stepFailed&quot;: {
            &quot;get&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Indicate that an app&apos;s step in a workflow failed to execute.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/workflows.stepFailed&quot;
                },
                &quot;operationId&quot;: &quot;workflows_stepFailed&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `workflow.steps:execute`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;Context identifier that maps to the correct workflow step execution.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;workflow_step_execute_id&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;A JSON-based object with a `message` property that should contain a human readable error message.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;error&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default success template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default error template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;workflow.steps:execute&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;workflows&quot;
                ]
            }
        },
        &quot;/workflows.updateStep&quot;: {
            &quot;get&quot;: {
                &quot;consumes&quot;: [
                    &quot;application/x-www-form-urlencoded&quot;,
                    &quot;application/json&quot;
                ],
                &quot;description&quot;: &quot;Update the configuration for a workflow extension step.&quot;,
                &quot;externalDocs&quot;: {
                    &quot;description&quot;: &quot;API method documentation&quot;,
                    &quot;url&quot;: &quot;https://api.slack.com/methods/workflows.updateStep&quot;
                },
                &quot;operationId&quot;: &quot;workflows_updateStep&quot;,
                &quot;parameters&quot;: [
                    {
                        &quot;description&quot;: &quot;Authentication token. Requires scope: `workflow.steps:execute`&quot;,
                        &quot;in&quot;: &quot;header&quot;,
                        &quot;name&quot;: &quot;token&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;A context identifier provided with `view_submission` payloads used to call back to `workflows.updateStep`.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;workflow_step_edit_id&quot;,
                        &quot;required&quot;: true,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;A JSON key-value map of inputs required from a user during configuration. This is the data your app expects to receive when the workflow step starts. **Please note**: the embedded variable format is set and replaced by the workflow system. You cannot create custom variables that will be replaced at runtime. [Read more about variables in workflow steps here](/workflows/steps#variables).&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;inputs&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;An JSON array of output objects used during step execution. This is the data your app agrees to provide when your workflow step was executed.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;outputs&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;An optional field that can be used to override the step name that is shown in the Workflow Builder.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;step_name&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    },
                    {
                        &quot;description&quot;: &quot;An optional field that can be used to override app image that is shown in the Workflow Builder.&quot;,
                        &quot;in&quot;: &quot;query&quot;,
                        &quot;name&quot;: &quot;step_image_url&quot;,
                        &quot;type&quot;: &quot;string&quot;
                    }
                ],
                &quot;produces&quot;: [
                    &quot;application/json&quot;
                ],
                &quot;responses&quot;: {
                    &quot;200&quot;: {
                        &quot;description&quot;: &quot;Typical success response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_true&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default success template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    },
                    &quot;default&quot;: {
                        &quot;description&quot;: &quot;Typical error response&quot;,
                        &quot;schema&quot;: {
                            &quot;additionalProperties&quot;: true,
                            &quot;description&quot;: &quot;This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.&quot;,
                            &quot;properties&quot;: {
                                &quot;ok&quot;: {
                                    &quot;$ref&quot;: &quot;#/definitions/defs_ok_false&quot;
                                }
                            },
                            &quot;required&quot;: [
                                &quot;ok&quot;
                            ],
                            &quot;title&quot;: &quot;Default error template&quot;,
                            &quot;type&quot;: &quot;object&quot;
                        }
                    }
                },
                &quot;security&quot;: [
                    {
                        &quot;slackAuth&quot;: [
                            &quot;workflow.steps:execute&quot;
                        ]
                    }
                ],
                &quot;tags&quot;: [
                    &quot;workflows&quot;
                ]
            }
        }
    },
    &quot;schemes&quot;: [
        &quot;https&quot;
    ],
    &quot;securityDefinitions&quot;: {
        &quot;slackAuth&quot;: {
            &quot;authorizationUrl&quot;: &quot;https://slack.com/oauth/authorize&quot;,
            &quot;flow&quot;: &quot;accessCode&quot;,
            &quot;scopes&quot;: {
                &quot;admin&quot;: &quot;admin&quot;,
                &quot;admin.apps:read&quot;: &quot;admin.apps:read&quot;,
                &quot;admin.apps:write&quot;: &quot;admin.apps:write&quot;,
                &quot;admin.conversations:read&quot;: &quot;admin.conversations:read&quot;,
                &quot;admin.conversations:write&quot;: &quot;admin.conversations:write&quot;,
                &quot;admin.invites:read&quot;: &quot;admin.invites:read&quot;,
                &quot;admin.invites:write&quot;: &quot;admin.invites:write&quot;,
                &quot;admin.teams:read&quot;: &quot;admin.teams:read&quot;,
                &quot;admin.teams:write&quot;: &quot;admin.teams:write&quot;,
                &quot;admin.usergroups:read&quot;: &quot;admin.usergroups:read&quot;,
                &quot;admin.usergroups:write&quot;: &quot;admin.usergroups:write&quot;,
                &quot;admin.users:read&quot;: &quot;admin.users:read&quot;,
                &quot;admin.users:write&quot;: &quot;admin.users:write&quot;,
                &quot;authorizations:read&quot;: &quot;authorizations:read&quot;,
                &quot;bot&quot;: &quot;Bot user scope&quot;,
                &quot;calls:read&quot;: &quot;calls:read&quot;,
                &quot;calls:write&quot;: &quot;calls:write&quot;,
                &quot;channels:history&quot;: &quot;channels:history&quot;,
                &quot;channels:manage&quot;: &quot;channels:manage&quot;,
                &quot;channels:read&quot;: &quot;channels:read&quot;,
                &quot;channels:write&quot;: &quot;channels:write&quot;,
                &quot;chat:write&quot;: &quot;chat:write&quot;,
                &quot;chat:write:bot&quot;: &quot;Author messages as a bot&quot;,
                &quot;chat:write:user&quot;: &quot;Author messages as a user&quot;,
                &quot;conversations:history&quot;: &quot;conversations:history&quot;,
                &quot;conversations:read&quot;: &quot;conversations:read&quot;,
                &quot;conversations:write&quot;: &quot;conversations:write&quot;,
                &quot;dnd:read&quot;: &quot;dnd:read&quot;,
                &quot;dnd:write&quot;: &quot;dnd:write&quot;,
                &quot;emoji:read&quot;: &quot;emoji:read&quot;,
                &quot;files:read&quot;: &quot;files:read&quot;,
                &quot;files:write:user&quot;: &quot;files:write:user&quot;,
                &quot;groups:history&quot;: &quot;groups:history&quot;,
                &quot;groups:read&quot;: &quot;groups:read&quot;,
                &quot;groups:write&quot;: &quot;groups:write&quot;,
                &quot;identity.basic&quot;: &quot;identity.basic&quot;,
                &quot;im:history&quot;: &quot;im:history&quot;,
                &quot;im:read&quot;: &quot;im:read&quot;,
                &quot;im:write&quot;: &quot;im:write&quot;,
                &quot;links:write&quot;: &quot;links:write&quot;,
                &quot;mpim:history&quot;: &quot;mpim:history&quot;,
                &quot;mpim:read&quot;: &quot;mpim:read&quot;,
                &quot;mpim:write&quot;: &quot;mpim:write&quot;,
                &quot;none&quot;: &quot;No scope required&quot;,
                &quot;pins:read&quot;: &quot;pins:read&quot;,
                &quot;pins:write&quot;: &quot;pins:write&quot;,
                &quot;reactions:read&quot;: &quot;reactions:read&quot;,
                &quot;reactions:write&quot;: &quot;reactions:write&quot;,
                &quot;reminders:read&quot;: &quot;reminders:read&quot;,
                &quot;reminders:write&quot;: &quot;reminders:write&quot;,
                &quot;remote_files:read&quot;: &quot;remote_files:read&quot;,
                &quot;remote_files:share&quot;: &quot;remote_files:share&quot;,
                &quot;remote_files:write&quot;: &quot;remote_files:write&quot;,
                &quot;rtm:stream&quot;: &quot;rtm:stream&quot;,
                &quot;search:read&quot;: &quot;search:read&quot;,
                &quot;stars:read&quot;: &quot;stars:read&quot;,
                &quot;stars:write&quot;: &quot;stars:write&quot;,
                &quot;team:read&quot;: &quot;team:read&quot;,
                &quot;tokens.basic&quot;: &quot;tokens.basic&quot;,
                &quot;usergroups:read&quot;: &quot;usergroups:read&quot;,
                &quot;usergroups:write&quot;: &quot;usergroups:write&quot;,
                &quot;users.profile:read&quot;: &quot;users.profile:read&quot;,
                &quot;users.profile:write&quot;: &quot;users.profile:write&quot;,
                &quot;users:read&quot;: &quot;users:read&quot;,
                &quot;users:read.email&quot;: &quot;users:read.email&quot;,
                &quot;users:write&quot;: &quot;users:write&quot;,
                &quot;workflow.steps:execute&quot;: &quot;workflow.steps:execute&quot;
            },
            &quot;tokenUrl&quot;: &quot;https://slack.com/api/oauth.access&quot;,
            &quot;type&quot;: &quot;oauth2&quot;
        }
    },
    &quot;swagger&quot;: &quot;2.0&quot;,
    &quot;tags&quot;: []
}</schema>
    <schemaType>OpenApi</schemaType>
    <serviceBinding>{&quot;compatibleMediaTypes&quot;:{}}</serviceBinding>
    <status>Complete</status>
    <systemVersion>2</systemVersion>
</ExternalServiceRegistration>
